/**
GPII Raw Preferences Server Test

Copyright 2014 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

The research leading to these results has received funding from the European Union's
Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 289016.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

/*global require, __dirname, module*/
"use strict";

var fluid = require("infusion"),
    path = require("path"),
    jqUnit = fluid.require("jqUnit"),
    configPath = path.resolve(__dirname, "./configs"),
    kettle = fluid.registerNamespace("kettle"),
    gpii = fluid.registerNamespace("gpii"),
    fs = require("fs");

kettle.loadTestingSupport();

fluid.require("rawPreferencesServer", require);

fluid.registerNamespace("gpii.rawPreferencesServer.test");
var testDefs = [];

/* ---------------------- TESTING GET FUNCTIONALITY --------------------------- */
fluid.registerNamespace("gpii.rawPreferencesServer.test.get");

gpii.rawPreferencesServer.test.get.successfulRequestAssert = function (userToken) {
    return function (data) {
        data = JSON.parse(data);

        // read expected preferences directly from preferences file
        var rawPrefs = fs.readFileSync(__dirname + "/data/" + userToken + ".json");
        var expected = {
            userToken: userToken,
            preferences: JSON.parse(rawPrefs)
        };

        jqUnit.assertDeepEq("Response is correct", expected, data);
    };
};

gpii.rawPreferencesServer.test.get.failingRequestAssert = function (data) {
    data = JSON.parse(data);
    // If a user token doesn't exist, expect the preferences part to be undefined
    jqUnit.assertTrue("Checking that we're getting 'undefined' preferences for nonexisting user token",
        data.preferences === undefined);
};

gpii.rawPreferencesServer.test.get.buildTestDef = function (fixture) {
    var sequence = [{
        func: "{getRequest}.send"
    }];
    sequence.push(fixture.onCompleteSequence);

    return {
        name: fixture.name,
        expect: 1,
        config: {
            configName: "testSetup",
            configPath: configPath
        },
        components: {
            getRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/rawPreferences/%userToken",
                    port: 8078,
                    termMap: {
                        userToken: fixture.userToken
                    }
                }
            }
        },
        sequence: sequence
    };
};

gpii.rawPreferencesServer.test.get.fixtures = [
    {
        name: "Raw Preferences Server - basic GET test",
        userToken: "np_flatonly",
        onCompleteSequence: {
            event: "{getRequest}.events.onComplete",
            listenerMaker: "gpii.rawPreferencesServer.test.get.successfulRequestAssert",
            makerArgs: [ "np_flatonly" ]
        }
    }, {
        name: "Raw Preferences Server - failing GET test (non-existing user token)",
        userToken: "bogus_np",
        onCompleteSequence: {
            event: "{getRequest}.events.onComplete",
            listener: "gpii.rawPreferencesServer.test.get.failingRequestAssert"
        }
    }
];

fluid.each(gpii.rawPreferencesServer.test.get.fixtures, function (fixture) {
    testDefs.push(gpii.rawPreferencesServer.test.get.buildTestDef(fixture));
});

/* ---------------------- TESTING POST FUNCTIONALITY --------------------------- */
fluid.registerNamespace("gpii.rawPreferencesServer.test.post");

gpii.rawPreferencesServer.test.post.assertNewNPResponse = function (data) {
    data = JSON.parse(data);
    jqUnit.assertTrue("Structure of returned payload should contain user token and preferences",
        data.preferences !== undefined && data.userToken !== undefined);
    // saved prefs set should contain the preferences
    var fsPrefs = fs.readFileSync(__dirname + "/data/" + data.userToken + ".json");
    jqUnit.assertDeepEq("Expecting preferences to be those posted response",
        JSON.parse(fsPrefs), data.preferences);

    // clean up the created NP set
    fs.unlinkSync(__dirname + "/data/" + data.userToken + ".json");
};

gpii.rawPreferencesServer.test.post.buildTestDef = function (fixture) {
    return {
        name: fixture.name,
        expect: 2,
        config: {
            configName: "testSetup",
            configPath: configPath
        },
        components: {
            postRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/rawPreferences",
                    method: "POST",
                    port: 8078
                }
            }
        },
        sequence: [{
            func: "{postRequest}.send",
            args: fixture.postBody
        }, {
            event: "{postRequest}.events.onComplete",
            listener: "gpii.rawPreferencesServer.test.post.assertNewNPResponse"
        }]
    };
};

gpii.rawPreferencesServer.test.post.fixtures = [
    {
        name: "POST: With no user token specified",
        postBody: {
            "flat": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/onScreenKeyboardEnabled": [{ "value": true }],
                            "http://registry.gpii.net/common/initDelay": [{ "value": 0.120 }],
                            "http://registry.gpii.net/common/cursorSpeed": [{ "value": 0.850 }],
                            "http://registry.gpii.net/common/cursorAcceleration": [{ "value": 0.800 }],
                            "http://registry.gpii.net/common/mouseEmulationEnabled": [{ "value": true }],
                            "http://registry.gpii.net/common/unknown": [{ "value": true }]
                        }
                    }
                },
                "metadata": []
            }
        }
    }
];

fluid.each(gpii.rawPreferencesServer.test.post.fixtures, function (fixture) {
    testDefs.push(gpii.rawPreferencesServer.test.post.buildTestDef(fixture));
});


/* ---------------------- TESTING PUT FUNCTIONALITY --------------------------- */
fluid.registerNamespace("gpii.rawPreferencesServer.test.put");

gpii.rawPreferencesServer.test.put.assertResponse = function (userToken) {
    return function (data) {
        data = JSON.parse(data);
        var fsPrefs = fs.readFileSync(__dirname + "/data/" + userToken + ".json");

        jqUnit.assertDeepEq("Expecting return payload to contain prefs and user token",
             { userToken: userToken, preferences: JSON.parse(fsPrefs) }, data);
    };
};

gpii.rawPreferencesServer.test.put.copyNPSet = function (from, to) {
    var fsPrefs = fs.readFileSync(__dirname + "/data/" + from + ".json");
    fs.writeFileSync(__dirname + "/data/" + to + ".json", fsPrefs);
};

gpii.rawPreferencesServer.test.put.deleteNPSet = function (userToken) {
    fs.unlinkSync(__dirname + "/data/" + userToken + ".json");
};

gpii.rawPreferencesServer.test.put.buildTestDef = function (fixture) {
    var testDef = {
        name: fixture.name,
        expect: 1,
        config: {
            configName: "testSetup",
            configPath: configPath
        },
        components: {
            postRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/rawPreferences/%userToken",
                    method: "PUT",
                    port: 8078,
                    termMap: {
                        userToken: fixture.userToken
                    }
                }
            }
        },
        sequence: [{
            func: "{postRequest}.send",
            args: fixture.putBody
        }, {
            event: "{postRequest}.events.onComplete",
            listenerMaker: "gpii.rawPreferencesServer.test.put.assertResponse",
            makerArgs: [ fixture.userToken ]
        }, {
            func: "gpii.rawPreferencesServer.test.put.deleteNPSet",
            args: [ fixture.userToken ]
        }]
    };

    if (fixture.preSequence) {
        testDef.sequence.unshift(fixture.preSequence);
    }
    return testDef;

};

gpii.rawPreferencesServer.test.put.fixtures = [
    {
        name: "PUT: Using user token for new preferences set",
        userToken: "brand_new",
        putBody: {
            "flat": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/onScreenKeyboardEnabled": [{ "value": true }],
                            "http://registry.gpii.net/common/mouseEmulationEnabled": [{ "value": true }],
                            "http://registry.gpii.net/common/unknown": [{ "value": true }]
                        }
                    }
                },
                "metadata": []
            }
        }
    }, {
        name: "PUT: Updating existing preferences set",
        userToken: "overwriter",
        putBody: {
            "flat": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/onScreenKeyboardEnabled": [{ "value": true }],
                            "http://registry.gpii.net/common/initDelay": [{ "value": 0.120 }],
                            "http://registry.gpii.net/common/cursorSpeed": [{ "value": 0.850 }],
                            "http://registry.gpii.net/common/cursorAcceleration": [{ "value": 0.800 }],
                            "http://registry.gpii.net/common/mouseEmulationEnabled": [{ "value": true }],
                            "http://registry.gpii.net/common/unknown": [{ "value": true }]
                        }
                    }
                },
                "metadata": []
            }
        },
        preSequence: {
            func: "gpii.rawPreferencesServer.test.put.copyNPSet",
            args: [ "np_flatonly", "overwriter" ]
        }
    }
];

fluid.each(gpii.rawPreferencesServer.test.put.fixtures, function (fixture) {
    testDefs.push(gpii.rawPreferencesServer.test.put.buildTestDef(fixture));
});

module.exports = kettle.test.bootstrapServer(testDefs);
