/**
 * GPII Raw Preferences Server Test
 *
 * Copyright 2014 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/kettle/LICENSE.txt
 */

/*global require, __dirname, module*/
"use strict";

var fluid = require("infusion"),
    path = require("path"),
    jqUnit = fluid.require("jqUnit"),
    configPath = path.resolve(__dirname, "./configs"),
    kettle = fluid.registerNamespace("kettle"),
    gpii = fluid.registerNamespace("gpii"),
    fs = require("fs");

fluid.require("rawPreferencesServer", require);
fluid.require("kettle/test/utils/js/KettleTestUtils", require);

fluid.registerNamespace("gpii.rawPreferencesServer.test");
var testDefs = [];

/* ---------------------- TESTING GET FUNCTIONALITY --------------------------- */
fluid.registerNamespace("gpii.rawPreferencesServer.test.get");

gpii.rawPreferencesServer.test.get.successfulRequestAssert = function (token) {
    return function (data) {
        data = JSON.parse(data);

        // read expected preferences directly from preferences file
        var rawPrefs = fs.readFileSync(__dirname+"/data/"+token+".json");
        var expected = {
            token: token,
            preferences: JSON.parse(rawPrefs)
        };

        jqUnit.assertDeepEq("Response is correct", expected, data);
    };
};

gpii.rawPreferencesServer.test.get.failingRequestAssert = function (data) {
    data = JSON.parse(data);
    // If a token doesn't exist, expect the preferences part to be undefined
    jqUnit.assertTrue("Checking that we're getting 'undefined' preferences for nonexisting token",
        data.preferences === undefined);
};

gpii.rawPreferencesServer.test.get.buildTestDef = function (fixture) {
    var sequence = [{
        func: "{getRequest}.send"
    }];
    sequence.push(fixture.onCompleteSequence);

    return {
        name: fixture.name,
        expect: 1,
        config: {
            configName: "testSetup",
            configPath: configPath
        },
        components: {
            getRequest: {
                type: "kettle.test.request.http",
                options: {
                    requestOptions: {
                        path: "/rawPreferences/%token",
                        port: 8078
                    },
                    termMap: {
                        token: fixture.token
                    }
                }
            }
        },
        sequence: sequence
    };
};

gpii.rawPreferencesServer.test.get.fixtures = [
    {
        name: "Raw Preferences Server - basic GET test",
        token: "np_flatonly",
        onCompleteSequence: {
            event: "{getRequest}.events.onComplete",
            listenerMaker: "gpii.rawPreferencesServer.test.get.successfulRequestAssert",
            makerArgs: [ "np_flatonly" ]
        }
    }, {
        name: "Raw Preferences Server - failing GET test (non-existing token)",
        token: "bogus_np",
        onCompleteSequence: {
            event: "{getRequest}.events.onComplete",
            listener: "gpii.rawPreferencesServer.test.get.failingRequestAssert"
        }
    }
];

fluid.each(gpii.rawPreferencesServer.test.get.fixtures, function (fixture) {
    testDefs.push(gpii.rawPreferencesServer.test.get.buildTestDef(fixture));
});

/* ---------------------- TESTING POST FUNCTIONALITY --------------------------- */
fluid.registerNamespace("gpii.rawPreferencesServer.test.post");

gpii.rawPreferencesServer.test.post.assertNewNPResponse = function (data) {
    data = JSON.parse(data);
    jqUnit.assertTrue("Structure of returned payload should contain token and preferences",
        data.preferences !== undefined && data.token !== undefined);
    // saved prefs set should contain the preferences
    var fsPrefs = fs.readFileSync(__dirname+"/data/"+data.token+".json");
    jqUnit.assertDeepEq("Expecting preferences to be those posted response",
        JSON.parse(fsPrefs), data.preferences);

    // clean up the created NP set
    fs.unlinkSync(__dirname + "/data/" + data.token + ".json");
};

gpii.rawPreferencesServer.test.post.buildTestDef = function (fixture) {
    return {
        name: fixture.name,
        expect: 2,
        config: {
            configName: "testSetup",
            configPath: configPath
        },
        components: {
            postRequest: {
                type: "kettle.test.request.http",
                options: {
                    requestOptions: {
                        path: "/rawPreferences",
                        method: "POST",
                        port: 8078
                    }
                }
            }
        },
        sequence: [{
            func: "{postRequest}.send",
            args: fixture.postBody
        }, {
            event: "{postRequest}.events.onComplete",
            listener: "gpii.rawPreferencesServer.test.post.assertNewNPResponse"
        }]
    };
};

gpii.rawPreferencesServer.test.post.fixtures = [
    {
        name: "POST: With no token specified",
        postBody: {
            "flat": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/onscreenKeyboard": [{ "value": true }],
                            "http://registry.gpii.net/common/-provisional-initDelay": [{ "value": 0.120 }],
                            "http://registry.gpii.net/common/cursorSpeed": [{ "value": 0.850 }],
                            "http://registry.gpii.net/common/cursorAcceleration": [{ "value": 0.800 }],
                            "http://registry.gpii.net/common/-provisional-mouseEmulationEnabled": [{ "value": true }],
                            "http://registry.gpii.net/common/unknown": [{ "value": true }]
                        }
                    }
                },
                "metadata": []
            }
        }
    }
];

fluid.each(gpii.rawPreferencesServer.test.post.fixtures, function (fixture) {
    testDefs.push(gpii.rawPreferencesServer.test.post.buildTestDef(fixture));
});


/* ---------------------- TESTING PUT FUNCTIONALITY --------------------------- */
fluid.registerNamespace("gpii.rawPreferencesServer.test.put");

gpii.rawPreferencesServer.test.put.assertResponse = function (token) {
    return function (data) {
        data = JSON.parse(data);
        var fsPrefs = fs.readFileSync(__dirname+"/data/"+token+".json");

        jqUnit.assertDeepEq("Expecting return payload to contain prefs and token",
             { token: token, preferences: JSON.parse(fsPrefs) }, data);
    };
};

gpii.rawPreferencesServer.test.put.copyNPSet = function (from, to) {
    var fsPrefs = fs.readFileSync(__dirname+"/data/"+from+".json");
    fs.writeFileSync(__dirname+"/data/"+to+".json", fsPrefs);
};

gpii.rawPreferencesServer.test.put.deleteNPSet = function (token) {
    fs.unlinkSync(__dirname + "/data/" + token + ".json");
};

gpii.rawPreferencesServer.test.put.buildTestDef = function (fixture) {

    var testDef = {
        name: fixture.name,
        expect: 1,
        config: {
            configName: "testSetup",
            configPath: configPath
        },
        components: {
            postRequest: {
                type: "kettle.test.request.http",
                options: {
                    requestOptions: {
                        path: "/rawPreferences/%token",
                        method: "PUT",
                        port: 8078
                    },
                    termMap: {
                        token: fixture.token
                    }
                }
            }
        },
        sequence: [{
            func: "{postRequest}.send",
            args: fixture.putBody
        }, {
            event: "{postRequest}.events.onComplete",
            listenerMaker: "gpii.rawPreferencesServer.test.put.assertResponse",
            makerArgs: [ fixture.token ]
        }, {
            func: "gpii.rawPreferencesServer.test.put.deleteNPSet",
            args: [ fixture.token ]
        }]
    };

    if (fixture.preSequence) {
        testDef.sequence.unshift(fixture.preSequence);
    }
    return testDef;

};

gpii.rawPreferencesServer.test.put.fixtures = [
    {
        name: "PUT: Using token for new preferences set",
        token: "brand_new",
        putBody: {
            "flat": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/onscreenKeyboard": [{ "value": true }],
                            "http://registry.gpii.net/common/-provisional-mouseEmulationEnabled": [{ "value": true }],
                            "http://registry.gpii.net/common/unknown": [{ "value": true }]
                        }
                    }
                },
                "metadata": []
            }
        }
    }, {
        name: "PUT: Updating existing preferences set",
        token: "overwriter",
        putBody: {
            "flat": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/onscreenKeyboard": [{ "value": true }],
                            "http://registry.gpii.net/common/-provisional-initDelay": [{ "value": 0.120 }],
                            "http://registry.gpii.net/common/cursorSpeed": [{ "value": 0.850 }],
                            "http://registry.gpii.net/common/cursorAcceleration": [{ "value": 0.800 }],
                            "http://registry.gpii.net/common/-provisional-mouseEmulationEnabled": [{ "value": true }],
                            "http://registry.gpii.net/common/unknown": [{ "value": true }]
                        }
                    }
                },
                "metadata": []
            }
        },
        preSequence: {
            func: "gpii.rawPreferencesServer.test.put.copyNPSet",
            args: [ "np_flatonly", "overwriter" ]
        }
    }
];

fluid.each(gpii.rawPreferencesServer.test.put.fixtures, function (fixture) {
    testDefs.push(gpii.rawPreferencesServer.test.put.buildTestDef(fixture));
});

module.exports = kettle.test.bootstrapServer(testDefs);
