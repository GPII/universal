/*!
GPII Ontology Server

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        path = require("path"),
        gpii = fluid.registerNamespace("gpii");

    fluid.require("kettle", require);
    fluid.require("./ontologyConvertPost.js", require);

    fluid.defaults("gpii.ontologyServer", {
        gradeNames: ["kettle.app", "autoInit"],
        handlers: {
            ontologyConvertPost: {
                route: "/ontology/convert/:to",
                type: "post"
            }
        },
        ontologySourceUrl: "",
        root: path.join(__dirname, ".."),
        components: {
            rawOntologySource: {
                type: "kettle.dataSource",
                options: {
                    url: "{gpii.ontologyServer}.options.ontologySourceUrl",
                    termMap: {
                        name: "%name"
                    },
                    responseParser: "gpii.ontologyServer.responseParser"
                }
            },
            ontologySource: {
                type: "kettle.callbackWrappingPromiseDataSource"
            }
        }
    });

    gpii.ontologyServer.responseParser = function (ontology) {
        return ontology.transformations;
    };

    fluid.defaults("gpii.ontologyServer.development", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        components: {
            callbackWrapper: "{callbackWrapper}",
            rawOntologySource: {
                type: "kettle.dataSource.URL",
                options: {
                    url: "{gpii.matchMaker}.options.ontologyServerUrl"
                }
            },
            ontologySource: {
                type: "kettle.callbackWrappingPromiseDataSource",
                options: {
                    components: {
                        rawSource: "{rawOntologySource}"
                    }
                }
            }
        }
    });

    gpii.ontologyServer.development.preInit = function (that) {
        that.set = function (directModel, model, callback) {
            var preferences = model.preferences,
                source = gpii.ontologyServer.parsePreferences(preferences);
            if (source.from === source.to) {
                callback(preferences);
                return;
            }
            callback = that.callbackWrapper.wrap(callback);
            that.ontologySource.get(null).then(function (data) {
                preferences = fluid.model.transformWithRules(preferences,
                    gpii.ontologyServer.expandTransformations(data[source.transformation].transformations));
                callback(preferences);
            });
        };
    };

})();