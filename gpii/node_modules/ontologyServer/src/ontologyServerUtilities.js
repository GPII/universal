/*!
GPII Ontology Server Utilities

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

var fluid = fluid || require("infusion");
    
var ontologyServer = fluid.registerNamespace("gpii.ontologyServer"),
    transform = fluid.registerNamespace("gpii.ontologyServer.transform");

ontologyServer.parsePreferences = function (preferences, to) {
    return fluid.find(preferences, function (preference, key) {
        var togo = {
            to: to || "ISO24751-2"
        };
        var ontologyPrefix = "//registry.gpii.org/";
        if (key.indexOf(ontologyPrefix) < 0) {
            togo.from = "ISO24751-2";
        } else {
            // Currently only assume that we have 2 ontologies:
            // ISO24751-2 and the flat one.
            togo.from = "flat";
        }
        togo.transformation = [togo.to, togo.from].join("/");
        return togo;
    });
};

ontologyServer.expandTransformations = function (transformations) {
    var expanded = {};
    fluid.each(transformations, function (transformation, elPath) {
        var source, sourceURI;
        if (typeof transformation !== "string" || transformation.charAt(0) !== "{") {
            expanded[elPath] = transformation;
            return;
        }
        source = fluid.parseContextReference(transformation, 0);
        sourceURI = fluid.pathUtil.escapeSegment(source.context);
        expanded[elPath] = fluid.model.composeSegments(sourceURI, source.path);
    });
    return expanded;
};

transform.application = function (preferences, expander, expandSpec) {
    var searchValue = "//registry.gpii.org/applications/";
    fluid.each(preferences, function (preference, uri) {
        var appIndex = uri.indexOf(searchValue),
            appId;
        if (appIndex < 0) {
            return;
        }
        appId = uri.substring(appIndex + searchValue.length);
        preference = {
            id: appId,
            parameters: preference[0].value
        };
        fluid.model.transform.setValue(fluid.model.composeSegments(expandSpec.outputPath,
            fluid.pathUtil.escapeSegment(appId)), preference, expander);
    });
};

fluid.defaults("gpii.ontologyServer.transform.application", {
    gradeNames: "fluid.standardTransformFunction"
});