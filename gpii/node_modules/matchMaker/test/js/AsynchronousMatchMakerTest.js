/*!
GPII Async MatchMaker Tests

Copyright 2012 OCAD University
Copyright 2012 Raising The Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

// Declare dependencies
/* global jqUnit */

var fluid = fluid || require("infusion");
var gpii = fluid.registerNamespace("gpii");

(function () {
    "use strict";

    fluid.registerNamespace("gpii.tests.asyncMatchMaker");
    gpii.tests.asyncMatchMaker.solutions = [{
        "settingsHandlers": [{
            "type": "gpii.integrationTesting.mockSettingsHandler",
            "capabilities": ["display.screenEnhancement"],
            "capabilitiesTransformations": {
                "mag-factor": "display.screenEnhancement.magnification",
                "show-cross-hairs": "display.screenEnhancement.-provisional-showCrosshairs",
                "mouse-tracking": {
                    "transform": {
                        "type": "fluid.transforms.valueMapper",
                        "inputPath": "display.screenEnhancement.tracking",
                        "options": {
                            "mouse": {
                                "outputValue": "centered"
                            }
                        }
                    }
                }
            }
        }]
    }];
    
    gpii.tests.asyncMatchMaker.profile = {
        "display": {
            "screenEnhancement": {
                "fontSize": 24,
                "foregroundColor": "white",
                "backgroundColor": "black",
                "fontFace": {
                    "fontName": ["Comic Sans"],
                    "genericFontFace": "sans serif"
                },
                "magnification": 2.0,
                "tracking": ["mouse"],
                "invertImages": true,
                "-provisional-showCrosshairs": true
            }
        }
    };
    gpii.tests.asyncMatchMaker.strategy = function (/*leaves, solrecs*/) {
        var togo = fluid.promise();
        fluid.invokeLater(function () {
            togo.resolve([{disposition: "accept"}]);
        });
        return togo;
    };
    
    gpii.tests.asyncMatchMaker.runTests = function () {
        jqUnit.module("MatchMaker");
        jqUnit.asyncTest("Run an async strategy", function () {
            var promise = gpii.matchMaker.disposeSolutions(gpii.tests.asyncMatchMaker.profile,
                gpii.tests.asyncMatchMaker.solutions, gpii.tests.asyncMatchMaker.strategy);
                
            promise.then(function (disposed) {
                jqUnit.assertEquals("Accepted relevant solution", "accept", disposed[0].disposition);
                jqUnit.start();
            });
        });
    };

}());