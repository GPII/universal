/*!
GPII Async MatchMaker Tests

Copyright 2012 OCAD University
Copyright 2012 Raising The Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

// Declare dependencies
/*global jQuery, require, fluid, jqUnit, gpii, start*/

var fluid = fluid || require("infusion");
var gpii = fluid.registerNamespace("gpii");

(function ($) {
    "use strict";

    fluid.registerNamespace("gpii.tests.asyncMatchMaker");
    var solutions = [{
        "settingsHandlers": [{
            "type": "gpii.integrationTesting.mockSettingsHandler", 
            "capabilities": ["display.screenEnhancement"],
            "capabilitiesTransformations": {
                "mag-factor": "display.screenEnhancement.magnification",
                "show-cross-hairs": "display.screenEnhancement.-provisional-showCrosshairs",
                "mouse-tracking": {
                    "expander": {
                        "type": "fluid.model.transform.valueMapper",
                        "inputPath": "display.screenEnhancement.tracking",
                        "options": {
                            "mouse": {
                                "outputValue": "centered"
                            }
                        }
                    }
                }
            }
        }]
    }];
    var profile = {
        "display": {
            "screenEnhancement": {
                "fontSize": 24,
                "foregroundColor": "white",
                "backgroundColor": "black",
                "fontFace": {
                    "fontName": ["Comic Sans"],
                    "genericFontFace": "sans serif"
                },
                "magnification": 2.0,
                "tracking": "mouse",
                "invertImages": true,
                "-provisional-showCrosshairs": true
            }
        }
    };
    var matchMaker = gpii.matchMaker;
    var async = fluid.registerNamespace("gpii.matchMaker.async");
    
    // This is a sample strategy that runs asynchronously.
    // It does nothing but tries to load a non-existent file
    // asynchronously and regardless of outcome, returns an
    // accepted match.
    async.strategy = function (leaves, solrecs) {
        return when($.ajax({
            url: "test",
            dataType: "json",
        })).always(function () {
            return [{disposition: "accept"}]
        });
    };
    var runAsync = function(profile, solutions) {
        return matchMaker.disposeSolutions(profile, solutions, matchMaker.async.strategy);
    };
    gpii.tests.asyncMatchMaker.runTests = function() {
        jqUnit.module("MatchMaker");
        jqUnit.asyncTest("Run an async strategy", function() {
            runAsync(profile, solutions).then(function (disposed) {
                jqUnit.assertEquals("Accepted relevant solution", "accept", disposed[0].disposition);
                jqUnit.start();
            });
        });
    };

}(jQuery));