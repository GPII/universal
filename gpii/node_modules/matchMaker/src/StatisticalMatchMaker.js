var fluid = require("infusion");

var stat = fluid.registerNamespace("gpii.matchMaker.statistical");

stat.match = function (callbackWrapper, preferences, solutions, originalModel, strategy) {
	// Loging
	gpii.matchMaker.log.inAutoFile(preferences, "pre");
	// Statistical MM integration:
	preferences = gpii.matchMaker.statistical.infer(preferences);
	// Loging
	gpii.matchMaker.log.inAutoFile(preferences, "post");
	// Original matchMaker.match function:
	return when(gpii.matchMaker.disposeSolutions(preferences, solutions, strategy), function (disposed) {
		var togo = [];
		fluid.each(disposed, function(solrec) {
			if (solrec.disposition === "accept") {
				togo.push(solrec.solution);
			}
		});
		return togo;
	});
};

stat.infer = function (preferences) {
	fluid.each(preferences.applications, function(application){
		if (application.id in stat.data) {
			fluid.each(stat.data[application.id], function(inferer){
				preferences = stat.setInferred(preferences, application.parameters, inferer.key, inferer.value, inferer.data);
			});
		};
	});
    return preferences;
};

stat.setInferred = function(preferences, parameters, key, value, data){
	var cur = preferences;
	var splittedKey = key.split(".");
	for (var i=1; i<splittedKey.length; i++) {
		if (splittedKey[i] in cur) {
			if (i == splittedKey.length - 1) {return preferences;};
		} else {
			if (i == splittedKey.length - 1) {
				cur[splittedKey[i]]=eval(value);
				return preferences;
			};
			cur[splittedKey[i]]={};
		};
		cur = cur[splittedKey[i]];
	};
}
