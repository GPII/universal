/*!
GPII Match Maker POST Handler

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {
    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.request.matchMaker");

    gpii.request.matchMaker.match = function (matchMaker, requestPromise, solutions, preferences) {
        var transform = matchMaker.transformer.transformSettings,
            strategy = fluid.getGlobalValue(matchMaker.options.strategy);
        var mapped = fluid.promise.map(matchMaker.match(preferences, solutions, strategy),
            function (matchedSolutions) {
                return transform({
                    solutions: matchedSolutions,
                    preferences: preferences
                });
            }
        );
        fluid.promise.follow(mapped, requestPromise);
    };

    gpii.request.matchMaker.getSolutions = function (matchMaker, event, model) {
        var device = model.device,
            os = fluid.get(device, "OS.id"),
            version = fluid.get(device, "OS.version");
        matchMaker.solutionsReporter.get({
            os: os,
            version: version
        }, function (solutions) {
            // TODO: presumably this should read filterSolutionsByVersion - currently a no-op
            matchMaker.prefilterSolutions(solutions, os, version);
            solutions = matchMaker.prefilterSolutions(solutions, device);
            event.fire(solutions);
        });
    };

    gpii.request.matchMaker.transformPreferences = function (matchMaker, event, model) {
        // context evaluator hack to always evaluate to the default context:
        var ISOprefs = matchMaker.ontologyHandler.prefsToOntology(model.preferences, "flat", "ISO24751");
        if (ISOprefs.contexts && ISOprefs.contexts["gpii-default"]) {
            ISOprefs = ISOprefs.contexts["gpii-default"];
        }
        event.fire(ISOprefs.preferences);
    };

    gpii.request.matchMaker.matchPost = function (that, model) {
        that.events.onMatchRequest.fire(model);
    };

    fluid.defaults("kettle.requests.request.handler.matchPost", {
        gradeNames: ["autoInit", "fluid.eventedComponent"],
        components: {
            "matchMaker": "{gpii.matchMaker}"
        },
        invokers: {
            handle: {
                funcName: "gpii.request.matchMaker.matchPost",
                args: ["{that}", "{request}.req.body"],
                dynamic: true
            },
            match: {
                funcName: "gpii.request.matchMaker.match",
                args: ["{gpii.matchMaker}", "{request}.requestPromise", "{arguments}.0", "{arguments}.1"]
            },
            getSolutions: {
                funcName: "gpii.request.matchMaker.getSolutions",
                args: ["{gpii.matchMaker}", "{that}.events.onSolutionsReporter", "{arguments}.0"]
            },
            transformPreferences: {
                funcName: "gpii.request.matchMaker.transformPreferences",
                args: ["{gpii.matchMaker}", "{that}.events.onOntologyServer", "{arguments}.0"]
            }
        },
        events: {
            onMatchRequest: null,
            onSolutionsReporter: null,
            onOntologyServer: null,
            onReadyToMatch: {
                events: {
                    solutions: "onSolutionsReporter",
                    ontology: "onOntologyServer"
                },
                args: ["{arguments}.solutions.0", "{arguments}.ontology.0"]
            }
        },
        listeners: {
            onMatchRequest: [{
                listener: "{that}.getSolutions"
            }, {
                listener: "{that}.transformPreferences"
            }],
            onReadyToMatch: "{that}.match"
        }
    });

    fluid.defaults("kettle.requests.request.handler.proxyMatchPost", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.matchMaker.proxyMatchPost",
                args: [
                    "{requestProxy}",
                    "{request}.req.body",
                    "{gpii.matchMakerProxy}.matchMakerSource",
                    "{gpii.matchMakerProxy}.options.matchMakerPathMap"
                ],
                dynamic: true
            }
        }
    });

    gpii.request.matchMaker.proxyMatchPost = function (requestProxy, model, matchMakerSource, matchMakerPathMap) {
        var matchMakerType;
        fluid.remove_if(model.preferences.contexts["gpii-default"].preferences, function (pref, key) {
            if (key.indexOf("matchMakerType") > -1) {
                matchMakerType = pref;
                return matchMakerType;
            }
        });
        matchMakerSource.set({
            matchMakerPath: matchMakerPathMap[matchMakerType || "flat"]
        }, model, requestProxy.events.onSuccess.fire);
    };

})();
