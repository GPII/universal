/*!
    GPII Local Settings Logger

    Copyright 2014 Hochschule der Medien (HdM)
    Copyright 2014 Raising the Floor - International (RtF)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Acknowledgements:
    The research leading to these results has received funding from 
    the European Union's Seventh Framework Programme (FP7/2007-2013) 
    under grant agreement no. 289016.
*/


var http = require("http"),
    path = require("path"),
    url = require("url"),
    logDir = "/gpiilogs_pilot2", // The default logging directory, unless another directory is passed as a parameter.
    token = "token",
    settings = "snapshot",
    server = "http://localhost",
    nodePort = 8081, /*@@todo fetch this from config? */
    token_url = server + ":" + nodePort + "/" + token,
    settings_url = server + ":" + nodePort + "/" + settings;


/**
 * "Pad" integers less than 10 by adding a 0 in front.
 * @param {number} n An integer between [0, 99].
 * @returns {number|string} The same integer written as 2 digits.
 * @author Christophe Strobbe (HdM)
 */
var padInteger = function (n) {
    "use strict";
    // Only accept integers less than 100, else return 'xx':
    if (typeof n === 'number' && n < 100 && (n % 1 === 0)) {
        return n < 10 ? ('0' + n) : n;
    } else {
        return 'xx';
    }
};


/**
 * Converts a Date object into a string that represents the date.
 * @param {Object} d A date.
 * @returns {string} A string representing the current date and time, 
 *  in the format YYYY-MM-DD_hh-mm-ss.
 * @author Christophe Strobbe (HdM)
 */
var createLocalDateString = function (d) {
    "use strict";
    var aDate,
        UTCoffset;

    UTCoffset = d.getTimezoneOffset() / 60;
    aDate = d.getUTCFullYear() + '-' + padInteger(d.getUTCMonth() + 1) + '-' + 
            padInteger(d.getUTCDate()) + '_' + padInteger(d.getUTCHours() - UTCoffset) + 
            '-' + padInteger(d.getUTCMinutes()) + '-' + padInteger(d.getUTCSeconds());
    return aDate;
};


// "Borrowed" from Kasper at https://github.com/kaspermarkus/pilotsConfig/blob/GPII-665/requestHandler.js / https://github.com/Cloud4AllTUD/pilotsConfig/blob/master/requestHandler.js
/**
 * Generic function for fetching (JSON) data from a URL.
 * @param {string} url The URL from where the data should be fetched.
 * @param {function} callback The function that will be called when the response is available.
 * @author Kasper Markus (RtF)
 */
var getJSONRequest = function (url, callback) {
    "use strict";
	var	reply = "";

	http.get(url, function(res) {

		res.on('data', function(dat){
			reply += dat;
		});

		res.on('end', function () {
			var parsedReply = JSON.parse(reply);
			callback(parsedReply);
		});

	}).on('error', function(e) {
		console.log("Error on get request to " + url + ": " + e.message);
		callback(undefined);
	});
};


/**
 * Retrieve the current logged in token(s) from the local Flow Manager. 
 * @param {function} callback The function that will be called when the response is available.
 * @author Christophe Strobbe (HdM)
 */
var fetchCurrentTokens = function (callback) {
    "use strict";

    var options = {
            host: url.parse(token_url).host.split(":")[0],
            port: url.parse(token_url).host.split(":")[1],
            path: url.parse(token_url).pathname
        };

    return getJSONRequest(options, callback);
};


/**
 * Retrieve the settings currently applied to the local system (OS, assistive technologies and other applications). 
 * @param {function} callback The function that will be called when the response is available.
 * @author Christophe Strobbe (HdM)
 */
var fetchCurrentSettings = function (callback) {
    "use strict";

    var options = {
            host: url.parse(settings_url).host.split(":")[0],
            port: url.parse(settings_url).host.split(":")[1],
            path: url.parse(settings_url).pathname
        };
    return getJSONRequest(options, callback);
};


/**
 * Fetch the settings for the currently logged in token(s) and write them to a log file on the local file system.
 * @param {function} callback The function that will be called when the response is available.
 * @author Christophe Strobbe (HdM)
 */
var logCurrentSettings = function (callback) {
    "use strict";

    var fs = require('fs'),
        curDate = null,
        fileLocation = null,
        platform = process.platform, // Requires no lib, unlike the following: var os = require('os'); platform = os.platform();
        exitstatus = 0,
        exitmsg = "",
        returnvalue;

    // If a logging directory is passed as a command line argument, use this instead of the default directory:
    if (process.argv[2] && (typeof process.argv[2] !== 'undefined')) {
        logDir = process.argv[2];
    }

    fetchCurrentTokens(function (tokens) {
        if (tokens && !(tokens["isError"])) {
            var aToken;
            // WARNING: We don't know how to distinguish between the settings for multiple tokens.
            // So if more than one token is logged in, we only care about the last one!!
            if (tokens.length > 1) {
                exitstatus = 0;
                exitmsg = "WARNING: More than one token is logged in, but the system will pretend that only the last one is relevant!";
                //console.log(exitmsg);
                callback([exitmsg]);
            }

            if (tokens.length > 0) {
                aToken = tokens[tokens.length - 1];

                fetchCurrentSettings( function (settings) {
                    curDate = createLocalDateString(new Date());
                    fs.exists(path.resolve(__dirname, logDir), function(exists) {
                        if (exists) {
                            console.log("Existing logs directory = " + path.resolve(__dirname, logDir)); 
                        } else {
                            fs.mkdir(path.resolve(__dirname, logDir));
                            console.log("Created new logs directory at " + path.resolve(__dirname, logDir));
                        }
                        fileLocation = logDir + "/" + curDate + "_" + platform + "__" + aToken + ".json";
                        fs.writeFile(path.resolve(__dirname, fileLocation), JSON.stringify(settings, null, "   "));
                        exitmsg = "Finished writing settings to the file " + fileLocation;
                        console.log(exitmsg);
                        callback([exitmsg]);
                    });
                });
            }

        } else {
            exitstatus = 1;
            exitmsg = "WARNING: No settings were logged because no tokens are currently logged in to the system.";
            console.log(exitmsg);
            callback({"isError": true, "message" : exitmsg});
        }
    });
};


/**
 * Fetch a snapshot of the local settings for the currently logged in tokens
 * and write them to a log file on the local file system.
 * <strong>Warning</strong>: This function assumes a local Flow Manager and therefore a locally installed GPII real-time framework.
 * @author Christophe Strobbe (HdM)
 */
(function () {
    "use strict";
    // exit code (0 = OK; 1 = catchall for general errors). See http://www.tldp.org/LDP/abs/html/exitcodes.html#EXITCODESREF 
    // optionally add code that returns something like { "isError" : true, "message": "Settings could not be logged."} if logging did not work.
    logCurrentSettings(function(logmessage) {
        //console.log("Done!!! " + logmessage);
    });
}());
