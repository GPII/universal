/*!
GPII Default Matchmaker

Copyright 2012 OCAD University
Copyright 2012 Antranig Basman

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        path = require("path"),
        semver = require("semver"),
        when = require("when"),
        gpii = fluid.registerNamespace("gpii"),
        $ = fluid.registerNamespace("jQuery");

    fluid.require("kettle", require);
    fluid.require("./MatchPost.js", require);
    fluid.require("transformer", require);
    fluid.require("ontologyHandler", require);

    fluid.registerNamespace("gpii.matchMaker");

    gpii.matchMaker.inverseCapabilities = require("./inverseCapabilities.json");

    fluid.defaults("gpii.matchMaker", {
        gradeNames: ["kettle.app", "autoInit"],
        mergePolicy: {
            inverseCapabilities: "nomerge"
        },
        handlers: {
            matchPost: {
                route: "/match",
                type: "post"
            }
        },
        inverseCapabilities: gpii.matchMaker.inverseCapabilities,
        strategy: "gpii.matchMaker.flat.disposeStrategy",
        solutionsReporterUrl: "",
        root: path.join(__dirname, ".."),
        components: {
            solutionsReporter: {
                type: "kettle.dataSource.URL",
                options: {
                    gradeNames: ["kettle.dataSource.simpleCallbackWrapper"],
                    url: "{gpii.matchMaker}.options.solutionsReporterUrl",
                    termMap: {
                        "os": "%os",
                        "version": "%version"
                    }
                }
            },
            ontologyHandler: {
                type: "gpii.ontologyHandler"
            },
            transformer: {
                type: "gpii.transformer"
            }
        },
        invokers: {
            match: {
                funcName: "gpii.matchMaker.match",
                args: ["{arguments}.0", "{arguments}.1", "{arguments}.2", "{that}.options.inverseCapabilities"]
            },
            prefilterSolutions: {
                funcName: "gpii.matchMaker.prefilterSolutions",
                args: ["{arguments}.0", "{arguments}.1"]
            },
            filterSolutionsByVersion: {
                funcName: "gpii.matchMaker.filterSolutionsByVersion",
                args: ["{arguments}.0", "{arguments}.1", "{arguments}.2"]
            }
        }
    });

    fluid.defaults("gpii.matchMaker.dev", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        components: {
            ontologyHandler: {
                type: "gpii.ontologyHandler"
            }
        },
        distributeOptions: {
            source: "{that}.options.urlExpanderGradeNames",
            target: "{that urlExpander}.options.gradeNames"
        },
        urlExpanderGradeNames: ["kettle.urlExpander.development"]
    });

    fluid.defaults("gpii.matchMakerProxy", {
        gradeNames: ["kettle.app", "autoInit"],
        handlers: {
            proxyMatchPost: {
                route: "/match",
                type: "post"
            }
        },
        root: path.join(__dirname, ".."),
        components: {
            matchMakerSource: {
                type: "kettle.dataSource.URL",
                options: {
                    gradeNames: ["kettle.dataSource.simpleCallbackWrapper"],
                    url: "{gpii.matchMakerProxy}.options.matchMakerUrl",
                    writable: true,
                    termMap: {
                        matchMakerPath: "%matchMakerPath"
                    }
                }
            }
        },
        matchMakerPathMap: {},
        matchMakerUrl: "%matchMakerPath/match"
    });

    gpii.matchMaker.prefilterSolutions = function (solutions, device) {
        return fluid.remove_if(fluid.copy(solutions), function (solution) {
            // Match on device solutions.
            var matchesSolutions = fluid.find(device.solutions, function (devSolution) {
                if (devSolution.id === solution.id &&
                    (!solution.version ||
                     !devSolution.version ||
                     semver.satisfies(devSolution.version, solution.version)
                    )) {
                    return true;
                }
            });
            if (!matchesSolutions) {
                return solutions;
            }
        });
    };

    gpii.matchMaker.filterSolutionsByVersion = function (solutions, os, version) {
        if (!version) {
            return;
        }
        fluid.remove_if(solutions, function (solution) {
            var solutionOSVersion = fluid.find(fluid.get(solution, "contexts.OS"), function (OSEntry) {
                return OSEntry.id === os ? OSEntry.version : undefined;
            });
            if (!semver.satisfies(version, solutionOSVersion)) {
                return true;
            }
        });
    };

    gpii.matchMaker.supplyOntologizedPreferences = function (preferences, inverseCapabilities) {
        // these rules should i) be qualified by ontology, ii) have their inverse computed by the framework automatically
        // GPII-417 will have information eventually
        var togo = {};
        fluid.each(preferences.applications, function (val, id) {
            var trans = inverseCapabilities[id];
            if (trans) {
                $.extend(true, togo, fluid.model.transformWithRules(val.parameters, trans));
            }
        });
        return togo;
    };

    gpii.matchMaker.match = function (preferences, solutions, strategy, inverseCapabilities) {
        var ontologized = gpii.matchMaker.supplyOntologizedPreferences(preferences, inverseCapabilities);
        $.extend(true, preferences, ontologized);

        return when(gpii.matchMaker.disposeSolutions(preferences, solutions, strategy), function (disposed) {
            var togo = [];
            fluid.each(disposed, function(solrec) {
                if (solrec.disposition === "accept") {
                    togo.push(solrec.solution);
                }
            });
            return togo;
        });
    };

})();