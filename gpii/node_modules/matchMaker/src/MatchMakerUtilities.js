/*!
GPII Canopy Matchmaker

Copyright 2012 OCAD University
Copyright 2012 Antranig Basman

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

var fluid = fluid || require("infusion"),
    when = when || require("when");
    
var matchMaker = fluid.registerNamespace("gpii.matchMaker");

matchMaker.computeLeavesFromOneSolution = function (solution) {
    var leaves = [];
    leaves = leaves.concat(fluid.makeArray(solution.capabilities));
    var inputPaths = fluid.model.transform.collectInputPaths(solution.capabilitiesTransformations || {});
    leaves = leaves.concat(inputPaths);
    return leaves;
};

matchMaker.computeLeavesFromSolution = function (solution) {
    var leaves = [];
    leaves = leaves.concat.apply(leaves, fluid.transform(solution.settingsHandlers, 
        function(settingsHandler) {
            return matchMaker.computeLeavesFromOneSolution(settingsHandler);
        }));
    return leaves;
};

function computeLeavesImpl (model, path, paths) {
    fluid.each(model, function (value, key) {
        var newPath = fluid.pathUtil.composePath(path, key.toString());
        if (fluid.isPrimitive(value)) {
            paths.push(newPath);
        }
        else {
            computeLeavesImpl(value, newPath, paths);
        }
    });
}

matchMaker.computeLeaves = function (model) {
    var paths = [];
    computeLeavesImpl(model, "", paths);
    return paths;
};

/** Returns a non-positive number indicating by how many path segments the supplied
 * path fails to index correctly into the supplied model. A return value of 0 
 * indicates that the path indexes fully */

matchMaker.prefixLength = function (path, model) {
    var segs = fluid.pathUtil.parseEL(path);
    for (var i = 0; i < segs.length; ++ i) {
        var seg = segs[i];
        model = model[seg];
        if (model === undefined) {
            return i - segs.length;
        }
    }
    return 0;
};

matchMaker.makeComparator = function (leaves) {
    return function (solnA, solnB) {
        var domA = false, domB = false;
        for (var i = 0; i < leaves.length; ++ i) {
            var leaf = leaves[i];
            var goodA = matchMaker.prefixLength(leaf, solnA.solution);
            var goodB = matchmaker.prefixLength(leaf, solnB.solution);
            if (goodA > goodB) {
                domA = true;
            }
            else if (goodB > goodA) {
                domB = true;
            }
        }
        return domA ^ domB? (domA? 1 : -1) : 0;
    };
};

// TODO: Advertise these core configurations from the framework, and reference them here
var parser = {
    parse: fluid.pathUtil.parseEL,
    compose: fluid.pathUtil.composePath
};

matchMaker.accessConfigs = {
    get: {
        parser: parser,
        strategies: [fluid.model.defaultFetchStrategy]
    },
    set: {
        parser: parser,
        strategies: [fluid.model.defaultFetchStrategy, fluid.model.defaultCreatorStrategy]
    }
};

matchMaker.pathsToSkeleton = function (paths) {
    var togo = {};
    for (var i = 0; i < paths.length; ++ i) {
        var path = paths[i];
        var existing = fluid.get(togo, path, matchMaker.accessConfigs.get);
        if (!existing) {
            fluid.set(togo, path, {}, matchMaker.accessConfigs.set);
        }  
    };
    return togo;
};

matchMaker.sortDescending = function (numA, numB) {
    return numB - numA;
};

matchMaker.expandSolutions = function (solutions) {
    return fluid.transform(solutions, function (solution, index) {
        var paths = matchMaker.computeLeavesFromSolution(solution);
        var skeleton = matchMaker.pathsToSkeleton(paths);
        return {
            solution: solution,
            skeleton: skeleton,
            index: index
        }
    });
};

matchMaker.disposeSolutions = function (profile, solutions, strategy) {
    var leaves = matchMaker.computeLeaves(profile);
    var solrecs = matchMaker.expandSolutions(solutions);
    return when(strategy(leaves, solrecs), function (disposed) {
        return disposed;
    })
};

matchMaker.extractDispositions = function (solrecs) {
    var togo = [];
    fluid.each(solrecs, function(soln) {
        togo[soln.index] = soln.disposition;
    });
    return togo;
};