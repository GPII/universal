/*

    "rehydrate" each of the solution registry entries and confirm that it can be instantiated.

 */
"use strict";
var fluid = require("infusion");
var gpii = fluid.registerNamespace("gpii");
var jqUnit = require("node-jqunit");

require("../src/js/contexts");
require("../src/js/rehydrator");
require("../src/js/setting");
require("../src/js/settingsHandlerHolder");
require("../src/js/solutionsHolder");

fluid.registerNamespace("gpii.test.solutionsRegistry.solutionsDefinitions");

gpii.test.solutionsRegistry.solutionsDefinitions.testGrades = function (solutionGrades) {
    jqUnit.assertTrue("There should be solution grades.", solutionGrades.length > 0);

    fluid.each(solutionGrades, function (solutionGrade) {
        try {
            fluid.invokeGlobalFunction(solutionGrade);
            jqUnit.assert("We should be able to instantiate the solution '" + solutionGrade + "'.");
        }
        catch (error) {
            jqUnit.fail("Cannot instantiate solution '" + solutionGrade + "'.");
            fluid.log(JSON.stringify(error, null, 2));
        }
    });
};

fluid.defaults("gpii.test.solutionsRegistry.solutionsDefinitions.sequenceElement", {
    gradeNames: "fluid.test.sequenceElement",
    sequence: [
        {
            func: "{testEnvironment}.events.scanSolutions.fire"
        },
        {
            event: "{testEnvironment}.events.onSolutionsScanned",
            listener: "gpii.test.solutionsRegistry.solutionsDefinitions.testGrades",
            args: ["{arguments}.0"]
        }
    ]
});

fluid.defaults("gpii.test.solutionsRegistry.solutionsDefinitions.sequenceGrade", {
    gradeNames: "fluid.test.sequence",
    sequenceElements: {
        start: {
            gradeNames: "gpii.test.solutionsRegistry.solutionsDefinitions.sequenceElement",
            priority: "before:sequence"
        }
    }
});

fluid.defaults("gpii.test.solutionsRegistry.solutionsDefinitions.caseHolder", {
    gradeNames: ["fluid.test.testCaseHolder"],
    modules: [{
        name: "Testing solutions registry definitions.",
        tests: [{
            name: "Attempt to instantiate each defined grade.",
            sequenceGrade: "gpii.test.solutionsRegistry.solutionsDefinitions.sequenceGrade"
        }]
    }]
});

// Test Environment
fluid.defaults("gpii.test.solutionsRegistry.solutionsDefinitions.environment", {
    gradeNames: ["fluid.test.testEnvironment"],
    events: {
        scanSolutions: null,
        onSolutionsScanned: null
    },
    components: {
        caseHolder: {
            type: "gpii.test.solutionsRegistry.solutionsDefinitions.caseHolder"
        },
        rehydrator: {
            createOnEvent: "{environment}.events.scanSolutions",
            type: "gpii.solutionsRegistry.rehydrator",
            options: {
                listeners: {
                    "scanRegistry.notifyParent": {
                        priority: "last",
                        func: "{environment}.events.onSolutionsScanned.fire",
                        args: ["{arguments}.0"] // solutionGrades
                    }
                }
            }
        }
    }
});

fluid.test.runTests("gpii.test.solutionsRegistry.solutionsDefinitions.environment");
