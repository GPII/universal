/*
 * Tests for GPII Solutions Utils
 *
 * Copyright 2019 Raising the Floor - US
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";
var fluid  = require("infusion");
var gpii   = fluid.registerNamespace("gpii");
var jqUnit = require("node-jqunit");

require("../src/js/SolutionsUtils");

jqUnit.module("Tests for Solutions Registry Utility functions.");

fluid.registerNamespace("gpii.tests.universal.solutionsRegistry.solutionsUtils");

gpii.tests.universal.solutionsRegistry.solutionsUtils.defaultValueTests = [
    {
        schema: {
            "title": "Attribute Rotation Delay",
            "description": "When in Attribute...",
            "type": "integer",
            "default": 1000
        },
        result: {
            hasDefault: true,
            type: "integer",
            default: 1000
        }
    },
    {
        schema: {
            "title": "Attribute Rotation Delay",
            "description": "When in Attribute...",
            "default": 1000
        },
        result: {
            hasDefault: true,
            default: 1000
        }
    },
    {
        schema: {
            "title": "Attribute Rotation Delay With No Default...",
            "description": "When in Attribute...",
            "type": "integer"
        },
        result: {
            hasDefault: false
        }
    },
    {
        schema: {
            "title": "Desktop background wallpaper",
            "description": "The path to the image to be set as the new desktop wallpaper.",
            "properties": {
                "path": { "type":  "string"},
                "value": {
                    "type": "string",
                    "default": "%SystemRoot%\\Web\\Wallpaper\\Windows\\img0.jpg"
                }
            }
        },
        result: {
            hasDefault: true,
            type: "string",
            default: "%SystemRoot%\\Web\\Wallpaper\\Windows\\img0.jpg"
        }
    },
    {
        schema: {
            "title": "Desktop background wallpaper",
            "description": "The path to the image to be set as the new desktop wallpaper.",
            "properties": {
                "path": { "type":  "string"},
                "value": {
                    "default": "%SystemRoot%\\Web\\Wallpaper\\Windows\\img0.jpg"
                }
            }
        },
        result: {
            hasDefault: true,
            default: "%SystemRoot%\\Web\\Wallpaper\\Windows\\img0.jpg"
        }
    },
    {
        schema: {
            "title": "Desktop background wallpaper",
            "description": "The path to the image to be set as the new desktop wallpaper.",
            "properties": {
                "path": { "type":  "string", "required": true},
                "value": {
                    "type": "string",
                    "required": true,
                    "default": ""
                }
            }
        },
        result: {
            hasDefault: true,
            type: "string",
            default: ""
        }
    },
    {
        schema: {
            "title": "Screen mirroring",
            "description": "Mirrors the primary screen into a secondary screen.",
            "type": "boolean",
            "default": false
        },
        result: {
            hasDefault: true,
            type: "boolean",
            default: false
        }
    }
];

gpii.tests.universal.solutionsRegistry.solutionsUtils.findDefaultValueTest = function (schema, expectedResult) {
    var result = gpii.universal.solutionsRegistry.findDefaultValue(schema);
    jqUnit.assertDeepEq("Checking default value for: " + schema.title, expectedResult, result);
};

gpii.tests.universal.solutionsRegistry.solutionsUtils.findDefaultValueTests = function () {
    jqUnit.test("Testing my empty stubs...", function () {
        fluid.each(gpii.tests.universal.solutionsRegistry.solutionsUtils.defaultValueTests, function (item) {
            gpii.tests.universal.solutionsRegistry.solutionsUtils.findDefaultValueTest(item.schema, item.result);
        });
    });
};

fluid.defaults("gpii.tests.universal.solutionsRegistry.solutionsUtils", {
    gradeNames: ["fluid.component"],
    listeners: {
        "onCreate.findDefaultValueTest": {
            funcName: "gpii.tests.universal.solutionsRegistry.solutionsUtils.findDefaultValueTests"
        }
    }
});

gpii.tests.universal.solutionsRegistry.solutionsUtils();
