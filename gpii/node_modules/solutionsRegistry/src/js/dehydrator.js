// A one time script to break apart the legacy solutions registry files.
//
// Should be removed once we finish splitting apart the legacy data.
"use strict";
var fluid = require("infusion");
var gpii  = fluid.registerNamespace("gpii");

fluid.require("%gpii-universal");

var fs = require("fs");
var mkdirp = require("mkdirp");
var path = require("path");

fluid.registerNamespace("gpii.solutionsRegistry.dehydrator");

gpii.solutionsRegistry.dehydrator.separateSolutionsEntries = function (that) {
    var resolvedSolutionFilesPath = fluid.module.resolvePath(that.options.solutionFilesPath);
    var resolvedSolutionOutputPath = fluid.module.resolvePath(that.options.solutionOutputPath);

    var solutionFiles = fs.readdirSync(resolvedSolutionFilesPath);
    fluid.each(solutionFiles, function (solutionFile) {
        if (solutionFile.match(/\.json(5)$/)) {
            var solutionFilePath = path.resolve(resolvedSolutionFilesPath, solutionFile);
            var singleFileSolutions = require(solutionFilePath);

            fluid.each(singleFileSolutions, function (solutionDefinition, solutionKey) {
                var segments = solutionKey.split(".");
                var appName = segments.pop();
                var namespace = segments.join(".");

                var namespacePath = path.resolve(resolvedSolutionOutputPath, namespace);
                if (!fs.existsSync(namespacePath)) {
                    mkdirp.sync(namespacePath);
                }

                var filePath = path.resolve(namespacePath, appName + ".json5");
                var fileExists = fs.existsSync(filePath);
                if (fileExists && !that.options.replaceExisting) {
                    console.log("There is already a definition for solution " + appName + " in namespace " + namespace + ". Skipping entry");
                }
                else {
                    if (fileExists) {
                        console.log("Replacing existing definition for solution " + appName + " in namespace " + namespace + ".");
                    }
                    else {
                        console.log("Creating definition for solution " + appName + " in namespace " + namespace + ".");
                    }

                    // Rearrange the outer shell of the solution definition, avoiding settings handlers.
                    var revisedSolutionDef = fluid.model.transformWithRules(solutionDefinition, that.options.rules.solution);

                    fluid.each(solutionDefinition.settingsHandlers, function (settingsHandlerDef, settingsHandlerKey) {
                        // Rearrange the outer shell of the settingsHandler definition, avoiding settings.
                        var revisedSettingsHandlerDef = fluid.model.transformWithRules(settingsHandlerDef, that.options.rules.settingsHandler);

                        fluid.each(settingsHandlerDef.supportedSettings, function (settingsDef, settingKey) {
                            // Extract the basic material from the settingsDef.
                            var revisedSettingDef = fluid.model.transformWithRules(settingsDef, that.options.rules.setting);
                            // revisedSettingDef.type = "gpii.solutions." + solutionKey + "." + settingKey;
                            fluid.set(revisedSettingsHandlerDef, ["supportedSettings", settingKey], revisedSettingDef);
                        });

                        fluid.set(revisedSolutionDef, ["settingsHandlers", settingsHandlerKey], revisedSettingsHandlerDef);
                    });

                    // Write the JSON plus trailing carriage return to a file.
                    fs.writeFileSync(filePath, JSON.stringify(revisedSolutionDef, null, 2) + "\n", { encoding: "utf8" });
                }
            });
        }
    });
};

fluid.defaults("gpii.solutionsRegistry.dehydrator", {
    gradeNames: ["fluid.component"],
    solutionFilesPath: "%gpii-universal/testData/solutions",
    solutionOutputPath: "%gpii-universal/gpii/node_modules/solutionsRegistry/src/solutions",
    replaceExisting: false,
    rules: {
        solution: {
            "": "",
            "settingsHandlers": {
                transform: {
                    type: "fluid.transforms.delete"
                }
            }
        },
        settingsHandler: {
            "": "",
            "settingsHandlerOptions": "options",
            "options": {
                transform: {
                    type: "fluid.transforms.delete"
                }
            },
            "supportedSettings": {
                transform: {
                    type: "fluid.transforms.delete"
                }
            },
            "settingsHandlerNamespace": "type",
            "type": {
                transform: {
                    type: "fluid.transforms.delete"
                }
            }
        },
        setting: {
            "": ""
        }
    },
    listeners: {
        "onCreate.separate": {
            funcName: "gpii.solutionsRegistry.dehydrator.separateSolutionsEntries",
            args: ["{that}"]
        }
    }
});

gpii.solutionsRegistry.dehydrator();
