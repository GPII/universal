/* Defines the base `gpii.solutionsRegistry.solution` grade used by all solutions, and useful variations, such as per-platform. */
"use strict";
var fluid = require("infusion");

// TODO: invoker to return all settings for this solution at once

fluid.defaults("gpii.solutionsRegistry.solution", {
    gradeNames: ["fluid.component"],
    settingsHandlers: {},
    rules: {
        settingsHandlerDefToOptions: {
            "": "",
            "type": {
                transform: {
                    type: "fluid.transforms.delete"
                }
            },
            "parents": {
                transform: {
                    type: "fluid.transforms.delete"
                }
            }
        },
        settingsHandlerDefToType: {
            "": {
                transform: {
                    type: "fluid.transforms.firstValue",
                    values: ["type", { literalValue: "gpii.solutionsRegistry.settingsHandlerHolder"}]
                }
            }
        }
    },
    dynamicComponents: {
        settingsHandler: {
            sources: "@expand:fluid.hashToArray({that}.options.settingsHandlers,\"settingsHandlerKey\")",

            type: {
                expander: {
                    funcName: "fluid.model.transformWithRules",
                    args: ["{source}", "{gpii.solutionsRegistry.solution}.options.rules.settingsHandlerDefToType"]
                }
            },
            options: {
                supportedSettings: "{source}.supportedSettings",
                gradeNames: "{source}.parents",
                // We have to stuff the payload into a child element to avoid breaking things by expanding all options.
                settingsHandlerOptions: {
                    expander: {
                        func: "fluid.model.transformWithRules",
                        args: ["{source}", "{gpii.solutionsRegistry.solution}.options.rules.settingsHandlerDefToOptions"] // object, rules, options
                    }
                }
            }
        }
    }
});
