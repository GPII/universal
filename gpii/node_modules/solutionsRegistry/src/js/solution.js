/* Defines the base `gpii.solutionsRegistry.solution` grade used by all solutions, and useful variations, such as per-platform. */
"use strict";
var fluid = require("infusion");
var gpii  = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.solutionsRegistry.solution");

gpii.solutionsRegistry.solution.exportOptions = function (that) {
    var payload = fluid.model.transformWithRules(that.options, that.options.rules.optionsToExport);

    // Iterate through each settings handler and merge its material.
    var settingsHandlerComponents = fluid.queryIoCSelector(that, "gpii.solutionsRegistry.settingsHandlerHolder");
    fluid.each(settingsHandlerComponents, function (settingsHandlerComponent) {
        fluid.set(payload, ["settingsHandlers", settingsHandlerComponent.options.key], settingsHandlerComponent.exportOptions());
    });

    return payload;
};

fluid.defaults("gpii.solutionsRegistry.solution", {
    gradeNames: ["fluid.component"],
    settingsHandlers: {},
    // Bucket to distinguish material that should be spit out as part of the legacy format from inherited material.
    solutionOptions: {
    },
    rules: {
        optionsToExport: {
            "": "solutionOptions",
            "parents": {
                "transform": {
                    "type": "fluid.transforms.delete"
                }
            },
            "key": {
                "transform": {
                    "type": "fluid.transforms.delete"
                }
            },
            "type": {
                "transform": {
                    "type": "fluid.transforms.delete"
                }
            }
        },
        settingsHandlerDefToOptions: {
            "": "",
            "supportedSettings": {
                transform: {
                    type: "fluid.transforms.delete"
                }
            },
            "parents": {
                transform: {
                    type: "fluid.transforms.delete"
                }
            },
            "type": {
                transform: {
                    type: "fluid.transforms.delete"
                }
            },
            "key": {
                transform: {
                    type: "fluid.transforms.delete"
                }
            }
        },
        settingsHandlerDefToType: {
            "": {
                transform: {
                    type: "fluid.transforms.firstValue",
                    values: ["type", { literalValue: "gpii.solutionsRegistry.settingsHandlerHolder"}]
                }
            }
        }
    },
    dynamicComponents: {
        settingsHandler: {
            sources: {
                expander: {
                    funcName: "fluid.hashToArray",
                    args: ["{that}.options.settingsHandlers","key"]
                }
            },
            type: {
                expander: {
                    funcName: "fluid.model.transformWithRules",
                    args: ["{source}", "{gpii.solutionsRegistry.solution}.options.rules.settingsHandlerDefToType"]
                }
            },
            options: {
                gradeNames: "{source}.parents",
                key: "{source}.key",
                supportedSettings: "{source}.supportedSettings",
                // We have to stuff this part of the payload into a child element to avoid breaking things by expanding all options.
                settingsHandlerOptions: {
                    expander: {
                        func: "fluid.model.transformWithRules",
                        args: ["{source}", "{gpii.solutionsRegistry.solution}.options.rules.settingsHandlerDefToOptions"] // object, rules, options
                    }
                }
            }
        }
    },
    invokers: {
        "exportOptions": {
            funcName: "gpii.solutionsRegistry.solution.exportOptions",
            args:     ["{that}"]
        }
    }
});
