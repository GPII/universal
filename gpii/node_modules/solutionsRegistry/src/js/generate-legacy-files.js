/*

    Generate the legacy "context" (OS) files.

 */
"use strict";
var fluid  = require("infusion");
var gpii   = fluid.registerNamespace("gpii");

var mkdirp = require("mkdirp");
var fs     = require("fs");
var path   = require("path");

require("../../");
require("./liveSolutionsRegistry");

fluid.registerNamespace("gpii.solutionsRegistry.contextFileGenerator");

gpii.solutionsRegistry.contextFileGenerator.generate = function (that) {
    // Make the output directory if needed.
    var resolvedOutputPath = fluid.module.resolvePath(that.options.outputPath);
    if (!fs.existsSync(resolvedOutputPath)) {
        mkdirp.sync(resolvedOutputPath);
    }

    // Create each defined "context file", i.e. win32.json5, android.json5.
    fluid.each(that.options.fileDefs, function (contextFileGrade, contextFileKey) {
        var contextComponents = fluid.queryIoCSelector(that, contextFileGrade);
        console.log("Found " + contextComponents.length + " child components for context '" + contextFileKey + "'.");

        var contextPayload = {};

        // Process each solution.
        fluid.each(contextComponents, function (solutionComponent) {
            // Top-level options not associated with components
            var solutionPayload = fluid.filterKeys(solutionComponent.options, that.options.optionsToExclude, true);

            var settingsHandlerComponents = fluid.queryIoCSelector(solutionComponent, "gpii.solutionsRegistry.settingsHandlerHolder");

            // Process each settings handler
            fluid.each(settingsHandlerComponents, function (settingsHandlerComponent) {
                // Settings handler options other than supported settings.
                var rawSettingsHandlerPayload = fluid.get(settingsHandlerComponent, "options.settingsHandlerOptions");
                var settingsHandlerPayload = that.filterObject(rawSettingsHandlerPayload);
                settingsHandlerPayload.type = rawSettingsHandlerPayload.settingsHandlerNamespace;

                if (settingsHandlerPayload.settingsHandlerOptions) {
                    var deepOptions = fluid.copy(settingsHandlerPayload.settingsHandlerOptions);
                    delete settingsHandlerPayload.settingsHandlerOptions;
                    settingsHandlerPayload.options = deepOptions;
                }

                // The settings handler already keeps enough info about the support settings that we don't need to use
                // fluid.queryIoCSelector here.
                var rawSettings = fluid.get(settingsHandlerPayload, "supportedSettings");
                if (rawSettings !== undefined && Object.keys(rawSettings).length) {
                    var filteredSettings = fluid.transform(rawSettings, that.filterObject);
                    fluid.set(settingsHandlerPayload, "supportedSettings", filteredSettings);
                }

                // Add each settings handler payload to the solution.
                fluid.set(solutionPayload, ["settingsHandlers", rawSettingsHandlerPayload.key], settingsHandlerPayload);
            });

            // Add each solution's material to the combined "context" object.
            fluid.set(contextPayload, [solutionComponent.options.key], solutionPayload);
        });

        // Output the combined context payload to a JSON file matching the contextFileKey.
        var contextFilename = contextFileKey + ".json5";
        var contextFilePath = path.resolve(resolvedOutputPath, contextFilename);
        fs.writeFileSync(contextFilePath, JSON.stringify(contextPayload, null, 2) + "\n", { encoding: "utf8"});
    });
};

fluid.defaults("gpii.solutionsRegistry.contextFileGenerator", {
    gradeNames: ["gpii.solutionsRegistry.live"],
    outputPath: "%solutionsRegistry/src/generated",
    optionsToExclude: [
        "argumentMap",
        "components",
        "dynamicComponents",
        "events",
        "gradeNames",
        "key",
        "initFunction",
        "parents",
        "rules",
        "settingsHandlerKey",
        "settingsHandlerNamespace"
    ],
    fileDefs: {
        android: "gpii.solutionsRegistry.context.android",
        darwin:  "gpii.solutionsRegistry.context.darwin",
        linux:   "gpii.solutionsRegistry.context.linux",
        web:     "gpii.solutionsRegistry.context.web",
        win32:   "gpii.solutionsRegistry.context.windows"
    },
    listeners: {
        "registryCreated.generateContextFiles": {
            funcName: "gpii.solutionsRegistry.contextFileGenerator.generate",
            args: ["{that}"]
        }
    },
    invokers: {
        filterObject: {
            funcName: "fluid.filterKeys",
            args: ["{arguments}.0", "{that}.options.optionsToExclude", true]
        }
    }
});

gpii.solutionsRegistry.contextFileGenerator();
