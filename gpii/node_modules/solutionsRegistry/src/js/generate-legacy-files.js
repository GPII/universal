/*

    Generate the legacy "context" (OS) files.

 */
"use strict";
var fluid = require("infusion");
var gpii = fluid.registerNamespace("gpii");

require("./liveSolutionsRegistry");

fluid.registerNamespace("gpii.solutionsRegistry.contextFileGenerator");

gpii.solutionsRegistry.contextFileGenerator.generate = function (that) {
    // TODO: Make the output directory if needed.
    fluid.each(that.options.fileDefs, function (contextFileGrade, contextFileKey) {
        var contextComponents = fluid.queryIoCSelector(that, contextFileGrade);
        // TODO: build the wiring to allow each solution to spit out its legacy equivalent, and add to a combined object.
        console.log("Found " + contextComponents.length + " child components for context '" + contextFileKey + "'.");
        // TODO: output the combined object to a JSON file matching the contextFileKey
    });
};

fluid.defaults("gpii.solutionsRegistry.contextFileGenerator", {
    gradeNames: ["gpii.solutionsRegistry.live"],
    outputPath: "%gpii-universal/build/solutions",
    fileDefs: {
        android: "gpii.solutionsRegistry.context.android",
        darwin:  "gpii.solutionsRegistry.context.darwin",
        linux:   "gpii.solutionsRegistry.context.linux",
        web:     "gpii.solutionsRegistry.context.web",
        win32:   "gpii.solutionsRegistry.context.windows"
    },
    listeners: {
        "registryCreated.geenrateContextFiles": {
            funcName: "gpii.solutionsRegistry.contextFileGenerator.generate",
            args: ["{that}"]
        }
    }
});

gpii.solutionsRegistry.contextFileGenerator();
