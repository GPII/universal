"use strict";
var fluid = require("infusion");
var gpii  = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.solutionsRegistry.settingsHandlerHolder");

// Invoker to report our options and all supported settings.
gpii.solutionsRegistry.settingsHandlerHolder.exportOptions = function (that) {
    var payload = fluid.model.transformWithRules(that.options, that.options.rules.optionsToExport);

    // Use fluid.queryIoC to select our child settings.  This approach still requires stashing a "setting key" option.
    var settingsComponents = fluid.queryIoCSelector(that, "gpii.solutionsRegistry.setting");
    fluid.each(settingsComponents, function (settingsComponent) {
        fluid.set(payload, ["supportedSettings", settingsComponent.options.key], settingsComponent.exportOptions());
    });

    return payload;
};

fluid.defaults("gpii.solutionsRegistry.settingsHandlerHolder", {
    gradeNames: ["fluid.component"],
    rules: {
        optionsToExport: {
            "": "settingsHandlerOptions",
            "type": "settingsHandlerOptions.settingsHandlerNamespace",
            "settingsHandlerNamespace": {
                "transform": {
                    "type": "fluid.transforms.delete"
                }
            },
            "parents": {
                "transform": {
                    "type": "fluid.transforms.delete"
                }
            },
            "key": {
                transform: {
                    type: "fluid.transforms.delete"
                }
            }
        },
        settingsDefToOptions: {
            "": "",
            "key": {
                transform: {
                    type: "fluid.transforms.delete"
                }
            },
            "parents": {
                transform: {
                    type: "fluid.transforms.delete"
                }
            }
        },
        settingsDefToType: {
            "": {
                transform: {
                    type: "fluid.transforms.firstValue",
                    values: ["type", { literalValue: "gpii.solutionsRegistry.setting"}]
                }
            }
        }
    },
    dynamicComponents: {
        setting: {
            sources: {
                expander: {
                    funcName: "fluid.hashToArray",
                    args: ["{settingsHandlerHolder}.options.supportedSettings", "key"]
                }
            },
            type: {
                expander: {
                    func: "fluid.model.transformWithRules",
                    args: ["{source}", "{settingsHandlerHolder}.options.rules.settingsDefToType"] // object, rules, options
                }
            },
            options: {
                gradeNames: "{source}.parents",
                key: "{source}.key",
                // We have to stuff the payload into a child element to avoid breaking things by expanding all options.
                settingOptions: {
                    expander: {
                        func: "fluid.model.transformWithRules",
                        args: ["{source}", "{settingsHandlerHolder}.options.rules.settingsDefToOptions"] // object, rules, options
                    }
                }
            }
        }
    },
    invokers: {
        "exportOptions": {
            funcName: "gpii.solutionsRegistry.settingsHandlerHolder.exportOptions",
            args:     ["{that}"]
        }
    }
});
