/* eslint-env node */
"use strict";
var fluid = require("infusion");
var gpii  = fluid.registerNamespace("gpii");

var fs    = require("fs");
var path  = require("path");

// Add the ability to require JSON5 files.
require("json5/lib/register");

fluid.require("%gpii-universal");

// TODO: Make a codex retrieval invoker that returns all known settings (and eventually preferences).

fluid.registerNamespace("gpii.solutionsRegistry.rehydrator");

// Find all solutions and wire them into a single "solutions" option for the LSR.
gpii.solutionsRegistry.rehydrator.scan = function (that) {
    // Scan through the solutions directory registering grades
    var resolveSolutionDirPath = fluid.module.resolvePath(that.options.solutionDir);
    var namespaceDirs = fs.readdirSync(resolveSolutionDirPath);
    fluid.each(namespaceDirs, function (namespaceDir) {
        var namespaceDirPath = path.resolve(resolveSolutionDirPath, namespaceDir);
        var stats = fs.statSync(namespaceDirPath);
        if (stats.isDirectory()) {
            var namespaceFiles = fs.readdirSync(namespaceDirPath);
            fluid.each(namespaceFiles, function (filename) {
                if (path.extname(filename).match(/\.json5?$/, "i")) {
                    var defaultTypeKey = filename.split(".").slice(0,-1).join(".");
                    var filePath = path.resolve(namespaceDirPath, filename);
                    var fileContents = require(filePath);
                    var fileOptions = fluid.filterKeys(fileContents, ["type", "parents"], true);
                    fileOptions.gradeNames = fileContents.parents || ["gpii.solutionsRegistry.solution"];
                    var gradeName = fileContents.type || ([namespaceDir, defaultTypeKey].join("."));
                    fluid.defaults(gradeName, fileOptions);
                }
            });
        }
    });

    // When everything is scanned, we should be able to find all solutions using `fluid.indexDefaults`:
    //
    // https://github.com/fluid-project/infusion/blob/master/src/framework/core/js/Fluid.js#L1994
    var solutionIndexMatches = fluid.indexDefaults("solutionIndex", {
        gradeNames: ["gpii.solutionsRegistry.solution"],
        indexFunc: function (defaults) {
            return defaults.gradeNames;
        }
    });

    var solutionGrades = solutionIndexMatches["gpii.solutionsRegistry.solution"].filter(function (entry) {
        return entry !== "gpii.solutionsRegistry.solution"; // Exclude the base marker grade itself.
    });

    return solutionGrades;
};

fluid.defaults("gpii.solutionsRegistry.rehydrator", {
    gradeNames: ["fluid.component"],
    solutionDir: "%gpii-universal/gpii/node_modules/solutionsRegistry/src/solutions",
    events: {
        scanRegistry: null
    },
    listeners: {
        "onCreate.scanRegistry": {
            funcName: "fluid.promise.fireTransformEvent",
            args: ["{that}.events.scanRegistry", {}] // event, payload[, options]
        },
        // We use a transforming promise chain not for the transforming part, but for the promise chain part
        "scanRegistry.scan": {
            priority: "first",
            funcName: "gpii.solutionsRegistry.rehydrator.scan",
            args: ["{that}"]
        }
    }
});
