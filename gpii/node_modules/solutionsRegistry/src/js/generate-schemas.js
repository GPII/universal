/*

    A script to generate a combined settings schema that includes detailed schemas for all supported settings.

 */
/* eslint-env node */
"use strict";
var fluid = require("infusion");
var gpii = fluid.registerNamespace("gpii");

var mkdirp = require("mkdirp");
var fs = require("fs");
var path = require("path");

// Add the ability to require JSON5 files.
require("json5/lib/register");

// Require universal so that we can resolve paths to it and any sub-modules.
fluid.require("%gpii-universal");

fluid.registerNamespace("gpii.solutionsRegistry.schemaGenerator");

gpii.solutionsRegistry.schemaGenerator.generateSettingsSchema = function (that) {
    var settingsSchema = require(fluid.module.resolvePath(that.options.baseSettingsSchema));
    // settings schema template from that.options.baseSettingsSchema
    // TODO: Add all solutions/settings and schemas from that.options.solutionsRegistryPath

    var solutionsSettings = gpii.solutionsRegistry.schemaGenerator.settingsFromSolutions(that);
    var genericSettings   = gpii.solutionsRegistry.schemaGenerator.genericSettings(that);

    var allSettings = fluid.extend({}, solutionsSettings, genericSettings);

    // Merge the generated settings schema data into the "base schema" at the right point.
    fluid.set(
        settingsSchema,
        "properties",
        allSettings
    );

    var settingsOutputPath = fluid.module.resolvePath(that.options.settingsSchemaOutputPath);
    var settingsOutputDir  = path.dirname(settingsOutputPath);
    if (!fs.existsSync(settingsOutputDir)) {
        mkdirp.sync(settingsOutputDir);
    }
    fs.writeFileSync(settingsOutputPath, JSON.stringify(settingsSchema, null, 2));
};

gpii.solutionsRegistry.schemaGenerator.settingsFromSolutions = function (that) {
    var allSolutionsSettings = {};
    var resolvedSrPath = fluid.module.resolvePath(that.options.solutionsRegistryPath);
    var srFiles = fs.readdirSync(resolvedSrPath).filter(function (filename) { return filename.match(/\.json5?$/i); });
    fluid.each(srFiles, function (filename) {
        var pathToFile = path.resolve(resolvedSrPath, filename);
        var srFileData = require(pathToFile);
        fluid.each(srFileData, function (solutionDef, solutionKey) {
            var solutionSettings = {
                // Add the name as a courtesy to make reading the generated file more palatable.
                title: solutionDef.name,
                type: "object",
                properties: {},
                additionalProperties: false // TODO: Discuss whether this level of strictness will work for us.
            };

            fluid.each(fluid.get(solutionDef, "settingsHandlers"), function (settingsHandlerDef) {
                fluid.each(fluid.get(settingsHandlerDef, "supportedSettings"), function (settingsDef, settingsKey) {
                    if (settingsDef.schema) {
                        solutionSettings.properties[settingsKey] = settingsDef.schema;
                    }
                });
            });

            if (!fluid.jQueryStandalone.isEmptyObject(solutionSettings.properties)) {
                allSolutionsSettings[solutionKey] = solutionSettings;
            }
        });
    });
    // TODO: Add all solutions/settings and schemas from that.options.solutionsRegistryPath
    return allSolutionsSettings;
};

gpii.solutionsRegistry.schemaGenerator.genericSettings = function (that) {
    var allGenericSettings = {};
    var resolvedPath = fluid.module.resolvePath(that.options.genericPreferenceTermsPath);
    var rawGenericSettings = require(resolvedPath);
    fluid.each(rawGenericSettings, function (settingDef, settingKey) {
        var schema = fluid.get(settingDef, "schema");
        if (schema) {
            allGenericSettings[settingKey] = schema;
        }
    });
    return allGenericSettings;
};

fluid.defaults("gpii.solutionsRegistry.schemaGenerator", {
    gradeNames: ["fluid.component"],
    baseSettingsSchema: "%solutionsRegistry/src/schemas/settings-base-schema.json5",
    settingsSchemaOutputPath: "%gpii-universal/build/schemas/settings-schema.json",
    // TODO: Move this out of test data and break down into individual solutions.
    solutionsRegistryPath: "%gpii-universal/testData/solutions",
    // TODO: Move this out of test data to a suitable location.
    genericPreferenceTermsPath: "%gpii-universal/testData/ontologies/flat.json5",
    events: {
        createAllSchemas: null
    },
    listeners: {
        "onCreate.createAllSchemas": {
            funcName: "fluid.promise.fireTransformEvent",
            args:     ["{that}.events.createAllSchemas"]
        },
        "createAllSchemas.generateSettingsSchema": {
            priority: "first",
            funcName: "gpii.solutionsRegistry.schemaGenerator.generateSettingsSchema",
            args:     ["{that}"]
        }
        // TODO: Generate prefs safe schema from the settings schema.
    }
});

gpii.solutionsRegistry.schemaGenerator();
