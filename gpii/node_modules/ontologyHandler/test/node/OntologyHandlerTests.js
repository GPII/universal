/*
Ontology Handler Tests

Copyright 2014 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, __dirname */

(function () {

    "use strict";

    // This loads universal.
    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii"),
        jqUnit = fluid.require("jqUnit"),
        kettle = fluid.registerNamespace("kettle");

    fluid.require("kettle/test/utils/js/KettleTestUtils", require);

    require("ontologyHandler");

    fluid.defaults("gpii.ontologyHandler.tests", {
        gradeNames: ["fluid.test.testEnvironment", "autoInit"],
        components: {
            tester: {
                type: "gpii.ontologyHandler.tests.testCaseHolder"
            }
        }
    });

    var getTransformSpecTests = {
        specs: {
            "A-B": {
                "a1": "b1",
                "a2": "b2"
            },
            "C-B": {
                "c1": "b1",
                "c2": "b2"
            },
            "B-D": {
                "b1": "d1",
                "b2": "d2"
            }
        },
        tests: [
            {
                from: "B",
                to: "D",
                expect: {
                    "b1": "d1",
                    "b2": "d2"
                }
            }, {
                from: "B",
                to: "A",
                expect: {
                    transform: [
                        {
                            type: "fluid.transforms.value",
                            inputPath: "a1",
                            outputPath: "b1"
                        }, {
                            type: "fluid.transforms.value",
                            inputPath: "a2",
                            outputPath: "b2"
                        }
                    ]
                }
            }
        ]
    };

    gpii.ontologyHandler.tests.getTransformSpec = function () {
        fluid.each(getTransformSpecTests.tests, function (test) {
            var res = gpii.ontologyHandler.getTransformSpec(getTransformSpecTests.specs,
                   test.from, test.to);
            jqUnit.assertDeepEq("Testing getTransformSpec from " + test.from + " to " + test.to,
                test.expect, res);
        });
    };

    var rawPrefsToOntologyTests = [
        {
            description: "Basic transform, no inversion",
            rawPrefs: {
                capitals: {
                    A: "I am the a-man",
                    B: "I am the b-man"
                }
            },
            to: "miniscule",
            expect: {
                a: "I am the a-man",
                b: "I am the b-man"
            }
        }, {
            description: "Basic single transform with inversion",
            rawPrefs: {
                miniscule: {
                    a: "I am the a-man",
                    b: "I am the b-man"
                }
            },
            to: "capitals",
            expect: {
                A: "I am the a-man",
                B: "I am the b-man"
            }
        }, {
            description: "Transform, normal and with inversion",
            rawPrefs: {
                capitals: {
                    A: "I am the a-man"
                },
                names: {
                    bassman: "Bum da da dum BASS"
                }
            },
            to: "miniscule",
            expect: {
                a: "I am the a-man",
                b: "Bum da da dum BASS"
            }
        }, {
            description: "Some of the preferences already exist in the requested ontology",
            rawPrefs: {
                miniscule: {
                    a: "I am the a-man"
                },
                names: {
                    bassman: "Bum da da dum BASS"
                }
            },
            to: "miniscule",
            expect: {
                a: "I am the a-man",
                b: "Bum da da dum BASS"
            }
        }, {
            description: "no matching ontology transform specs",
            rawPrefs: {
                bogus: {
                    cats: "meow",
                    dogs: "wruf"
                }
            },
            to: "miniscule",
            expect: {}
        }
    ];

    gpii.ontologyHandler.tests.rawToOntology = function (ontologyHandler) {
        fluid.each(rawPrefsToOntologyTests, function (test) {
            var res = ontologyHandler.rawPrefsToOntology(test.rawPrefs, test.to);
            jqUnit.assertDeepEq("gpii.ontologyHandler.rawToOntology: " + test.description,
                test.expect, res);
        });
    };

    var prefsToOntologyTests = [
        {
            description: "Basic transform, no inversion",
            prefs: {
                A: "I am the a-man",
                B: "I am the b-man"
            },
            from: "capitals",
            to: "miniscule",
            expect: {
                a: "I am the a-man",
                b: "I am the b-man"
            }
        }, {
            description: "Basic single transform with inversion",
            prefs: {
                a: "I am the a-man",
                b: "I am the b-man"
            },
            from: "miniscule",
            to: "capitals",
            expect: {
                A: "I am the a-man",
                B: "I am the b-man"
            }
        }, {
            description: "no matching ontology transform specs",
            prefs: {
                cats: "meow",
                dogs: "wruf"
            },
            from: "bogus",
            to: "miniscule",
            expect: {}
        }, {
            description: "Same ontology requested",
            prefs: {
                a: "I am the a-man",
                b: "I am the b-man"
            },
            from: "miniscule",
            to: "miniscule",
            expect: {
                a: "I am the a-man",
                b: "I am the b-man"
            }
        }
    ];

    gpii.ontologyHandler.tests.prefsToOntology = function (ontologyHandler) {
        fluid.each(prefsToOntologyTests, function (test) {
            var res = ontologyHandler.prefsToOntology(test.prefs, test.from, test.to);
            jqUnit.assertDeepEq("gpii.ontologyHandler.prefsToOntology: " + test.description,
                test.expect, res);
        });
    };


    var addPrefsToRawPrefsTests = [
        {
            description: "Add prefs to an ontology matching the one in the raw preferences set",
            prefs: {
                A: "I am the a-man",
                B: "I am the b-man"
            },
            prefsView: "capitals",
            rawPrefs: {
                capitals: {
                    A: "Who am I?"
                }
            },
            expect: {
                capitals: {
                    A: "I am the a-man",
                    B: "I am the b-man"
                }
            }
        }, {
            description: "Containing preference transformable from existing ontology but saving in different view",
            prefs: {
                A: "I am the a-man"
            },
            prefsView: "capitals",
            rawPrefs: {
                miniscule: {
                    a: "Who am I?"
                }
            },
            expect: {
                capitals: {
                    A: "I am the a-man"
                }
            }
        }, {
            description: "Modifying part of another view and overwriting the same (existing) view",
            prefs: {
                A: "I am the a-man"
            },
            prefsView: "capitals",
            rawPrefs: { //this is actually theoretically an illegal raw prefs st
                miniscule: {
                    a: "Who am I?",
                    b: "I'm still here"
                },
                capitals: {
                    B: "I am a bee"
                }
            },
            expect: {
                capitals: {
                    A: "I am the a-man"
                },
                miniscule: {
                    b: "I'm still here"
                }
            }
        }, {
            description: "All other ontologies unaffected due to lack of transformation file",
            prefs: {
                A: "I am the a-man"
            },
            prefsView: "capitals",
            rawPrefs: { //this is actually theoretically an illegal raw prefs st
                bogus: {
                    cat: "I'm annoying"
                },
                capitals: {
                    B: "I am a bee"
                }
            },
            expect: {
                capitals: {
                    A: "I am the a-man"
                },
                bogus: {
                    cat: "I'm annoying"
                }
            }
        }, {
            description: "All other ontologies unaffected due to lack of specific setting transformation",
            prefs: {
                C: "you later"
            },
            prefsView: "capitals",
            rawPrefs: { //this is actually theoretically an illegal raw prefs st
                miniscule: {
                    d: "secret setting"
                },
                capitals: {
                    B: "I am a bee"
                }
            },
            expect: {
                capitals: {
                    C: "you later"
                },
                miniscule: {
                    d: "secret setting"
                }
            }
        }
    ];

    gpii.ontologyHandler.tests.addPrefsToRawPrefs = function (ontologyHandler) {
        fluid.each(addPrefsToRawPrefsTests, function (test) {
            var res = ontologyHandler.addPrefsToRawPrefs(test.prefs, test.prefsView, test.rawPrefs);
            jqUnit.assertDeepEq("gpii.ontologyHandler.addPrefsToRawPrefs: " + test.description,
                test.expect, res);
        });

    };

    fluid.defaults("gpii.ontologyHandler.tests.testCaseHolder", {
        gradeNames: ["fluid.test.testCaseHolder", "autoInit"],
        components: {
            "ontologyHandler": {
                type: "gpii.ontologyHandler",
                options: {
                    ontologySourceListDir: __dirname+"/data/ontologies/"
                }
            }
        },
        modules: [{
            name: "OntologyHandlerTests",
            tests: [{
                expect: 2,
                name: "gpii.ontologyHandler.tests.getTransformSpec tests",
                func: "gpii.ontologyHandler.tests.getTransformSpec"
            }, {
                expect: rawPrefsToOntologyTests.length,
                name: "gpii.ontologyHandler.rawToOntology tests",
                func: "gpii.ontologyHandler.tests.rawToOntology",
                args: [ "{ontologyHandler}" ]
            }, {
                expect: prefsToOntologyTests.length,
                name: "gpii.ontologyHandler.prefsToOntology tests",
                func: "gpii.ontologyHandler.tests.prefsToOntology",
                args: [ "{ontologyHandler}" ]
            }, {
                expect: addPrefsToRawPrefsTests.length,
                name: "gpii.ontologyHandler.addPrefsToRawPrefs tests",
                func: "gpii.ontologyHandler.tests.addPrefsToRawPrefs",
                args: [ "{ontologyHandler}" ]
            }]
        }]
    });

    if (kettle.tests.allTests) {
        module.exports = "gpii.ontologyHandler.tests";
    } else {
        fluid.test.runTests(["gpii.ontologyHandler.tests"]);
    }

}());
