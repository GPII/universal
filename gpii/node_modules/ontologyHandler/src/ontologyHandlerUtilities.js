/*!
GPII Ontology Server Utilities

Copyright 2012 OCAD University
Copyright 2014 Raising the floor - international

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/* global require */
"use strict";

var fluid = fluid || require("infusion"),
    gpii = fluid.registerNamespace("gpii"),
    $ = fluid.registerNamespace("jQuery");

fluid.registerNamespace("gpii.ontologyHandler.utils");
fluid.registerNamespace("gpii.ontologyHandler.transforms");

gpii.ontologyHandler.utils.filter = function (full, remove) {
    var modified = false;
    var ret = ($.isArray(full)) ? [] : {};
    for (var ind in full) {
        if (ind in remove) {
            if (fluid.isPrimitive(remove[ind]) || $.isArray(remove[ind])) {
                continue;
            } else {
                var res = gpii.ontologyHandler.utils.filter(full[ind], remove[ind]);
                if (res === undefined) {
                    continue;
                }

                ret[ind] = res;
                modified = true;
            }
        } else {
            ret[ind] = full[ind];
            modified = true;
        }
    }
    return modified ? ret : undefined;
};

gpii.ontologyHandler.utils.filterPrefs = function (fullSet, toRemove) {
    var cpy = fluid.copy(fullSet);
    var result = gpii.ontologyHandler.utils.filter(cpy, toRemove);
    console.log(JSON.stringify(result));
    return result;
};

//Transforms required for application specific settings
fluid.defaults("gpii.ontologyHandler.transforms.applicationISOToFlat", {
    gradeNames: "fluid.standardTransformFunction",
    invertConfiguration: "gpii.ontologyHandler.transforms.applicationISOToFlat.invert"
});

gpii.ontologyHandler.transforms.applicationISOToFlat = function (preferences, transformSpec, transform) {
    var value, key;
    fluid.each(preferences, function (data, appId) {
        value = [{ "value": data.parameters }];
        key = "http://registry\\.gpii\\.net/applications/" + fluid.pathUtil.escapeSegment(appId);
        fluid.model.transform.setValue(key, value, transform);
    });
};

gpii.ontologyHandler.transforms.applicationISOToFlat.invert = function (transformSpec) {
    var togo = fluid.copy(transformSpec);
    togo.inputPath = transformSpec.outputPath;
    togo.outputPath = transformSpec.inputPath;
    togo.type = "gpii.ontologyHandler.transforms.applicationFlatToISO";
    return togo;
};

fluid.defaults("gpii.ontologyHandler.transforms.applicationFlatToISO", {
    gradeNames: "fluid.standardTransformFunction"
});

gpii.ontologyHandler.transforms.applicationFlatToISO = function (preferences, transformSpec, transform) {
    var searchValue = "//registry.gpii.net/applications/";
    fluid.each(preferences, function (preference, uri) {
        var appIndex = uri.indexOf(searchValue),
            appId;
        if (appIndex < 0) {
            return;
        }
        appId = uri.substring(appIndex + searchValue.length);
        preference = {
            parameters: preference[0].value,
            id: appId
        };
        fluid.model.transform.setValue(fluid.model.composeSegments(transformSpec.outputPath,
            fluid.pathUtil.escapeSegment(appId)), preference, transform);
    });
};