/**
GPII Acceptance Testing

Copyright 2013 Raising the Floor International
Copyright 2013 OCAD University
Copyright 2014 Lucendo Development Ltd.

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

The research leading to these results has received funding from the European Union's
Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 289016.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii"),
    child_process = require("child_process");

// Component which manages execution and observation of an arbitrary process
// By default, will make 12 attempts spaced by 500ms to execute it with the expected output
fluid.defaults("gpii.test.acceptance.exec", {
    gradeNames: ["gpii.test.common.exec"],
    invokers: {
        exec: {
            funcName: "gpii.test.acceptance.exec.exec",
            args: ["{that}", "{arguments}.0", "{arguments}.1"]
        }
    },
    timeout: 500,
    maxTimeouts: 12
});

gpii.test.acceptance.exec.exec = function (that, processSpec, expected) {
    var command = processSpec.command,
        timeout = processSpec.timeout || that.options.timeout,
        maxTimeouts = processSpec.maxTimeouts || that.options.maxTimeouts;

    fluid.log("Executing: ", command);

    child_process.exec(command, function (err, stdout, stderr) {
        if (stderr) {
            fluid.log("stderr from command \"", command, "\": ", stderr);
        }
        if (stdout.trim() === expected) {
            that.events.onExecExit.fire(true, processSpec);
        } else {
            processSpec.count = processSpec.count || 0;

            if (processSpec.count >= maxTimeouts) {
                that.events.onExecExit.fire(false, processSpec);
                return;
            }

            processSpec.count++;
            setTimeout(function () {
                gpii.test.acceptance.exec.exec(that, processSpec, expected);
            }, timeout);
        }
    });
};

fluid.defaults("gpii.test.acceptance.testCaseHolder", {
    gradeNames: ["gpii.test.testCaseHolder"],
    components: {
        exec: {
            type: "gpii.test.acceptance.exec"
        }
    }
});
