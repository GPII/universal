/**
GPII Testing (full lifecycle of FlowManager)

Copyright 2013-2016 Raising the Floor International
Copyright 2013 OCAD University
Copyright 2014 Lucendo Development Ltd.

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

The research leading to these results has received funding from the European Union's
Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 289016.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = fluid || require("infusion"),
    jqUnit = jqUnit || fluid.require("node-jqunit", require, "jqUnit"),
    path = typeof(require) === "undefined" ? null : require("path"), // courtesy to allow use in browser-based tests
    kettle = fluid.registerNamespace("kettle"),
    gpii = fluid.registerNamespace("gpii");

// TODO: Move all of this file into a more specific namespace - "test" is too generic

// Given a promise-containing structure, return a promise yielding the structure with all promises replaced by their
// resolution, or else a rejection for the first to reject. The supplied structure will be modified.

// TODO: This algorithm will go into FluidPromises.js in the end
gpii.test.settleStructure = function (structure) {
    if (fluid.isPromise(structure)) {
        return structure;
    }
    var settleRec = {
        // This flag is an awkward consequence of our choice to allow synchronous promise resolution
        inSync: true, // Are we still in synchronous scanning - necessary to avoid double resolution on hitting unresolved === 0 on initial scan
        unresolved: 0,
        depth: 0,
        togo: fluid.promise(),
        structure: structure,
        resolve: function () {
            settleRec.togo.resolve(structure);
        }
    };
    gpii.test.settleStructureRecurse(structure, settleRec);
    settleRec.inSync = false;
    if (settleRec.unresolved === 0) { // Case of 0 asynchronous promises found
        settleRec.resolve();
    }
    return settleRec.togo;
};

gpii.test.settleStructureRecurse = function (structure, settleRec) {
    ++settleRec.depth;
    if (settleRec.depth > fluid.strategyRecursionBailout) {
        fluid.fail("Recursion exceeded for value " + JSON.stringify(structure) + " overall structure " + JSON.stringify(settleRec.structure, null, 2));
    }
    if (fluid.isPlainObject(structure)) {
        fluid.each(structure, function (value, key) {
            if (fluid.isPromise(value)) {
                gpii.test.settleStructurePush(settleRec, structure, value, key);
            } else {
                gpii.test.settleStructureRecurse(value, settleRec);
            }
        });
    }
    --settleRec.depth;
};

gpii.test.settleStructurePush = function (settleRec, holder, promise, key) {
    ++settleRec.unresolved;
    promise.then(function (value) {
        fluid.log("settleStructure received response " + fluid.prettyPrintJSON(value));
        holder[key] = value;
        --settleRec.unresolved;
        if (settleRec.unresolved === 0 && !settleRec.inSync) {
            settleRec.resolve();
        }
    }, function (err) {
        settleRec.togo.reject(kettle.upgradeError(err, " while resolving promise with key " + key));
    });
};

// END ALGORITHM gpii.test.settleStructure

// TODO: Move this utility into KettleTestUtils.http.js

/** Asserts that a successful response with a JSON payload body has been received, which will be tested using `jqUnit.assertLeftHand`
 *  In addition to the core fields listed KettleTestUtils.http.js HTTP response assertion functions, options contains:
 *    expected {Object} The expected response body as JSON, supplied as the `expected` argument to `jqUnit.assertLeftHand`
 */

gpii.test.assertJSONResponseSubset = function (options) {
    var data;
    try {
        data = kettle.JSON.parse(options.string);
    } catch (e) {
        throw kettle.upgradeError(e, "\nwhile parsing HTTP response as JSON");
    }
    jqUnit.assertLeftHand(options.message, options.expected, data);
    kettle.test.assertResponseStatusCode(options, 200);
};

/** Given a settingsHandler payload, return a promise which resolves to the current state of each
 * settingsHandler block within it. Called from `gpii.test.snapshotSettings`, `gpii.test.checkConfiguration` and `gpii.test.checkRestoredConfiguration`
 * @param {Object} settingsHandlers - A map of settings handler names to `settingsHandler` blocks as seen in the `settingsHandlers`
 * option of a `gpii.test.common.testCaseHolder`.
 * @param {NameResolver|Null} nameResolver - A `nameResolver` mapping global names onto alternatives for use in a testing context.
 * @return {Promise} A promise resolving to the fetched settings (a fatal error handler will be registered on reject).
 */

gpii.test.getSettings = function (settingsHandlers, nameResolver) {
    return gpii.test.operateSettings(settingsHandlers, nameResolver, "get");
};

/** As for `gpii.test.getSettings` but performing a `set` action for the settingsHandler payloads, and accepting an
 * `onSuccess` callback
 */

gpii.test.setSettings = function (settingsHandlers, nameResolver, onSuccess) {
    var promise = gpii.test.operateSettings(settingsHandlers, nameResolver, "set");
    promise.then(onSuccess);
    return promise;
};

/** Common utility forwarded to by `gpii.test.getSettings` and `gpii.test.setSettings`.
 * See documentation for all parameters other than:
 * @param {Array} settingsHandlers - An array of settings handlers.
 * @param {Object} nameResolver - The name resolver.
 * @param {String} method - Either `"get"` or `"set"` depending on whether the settingsHandler `get` or `set` action is to be invoked.
 * @return {Promise} A promise that will be resolved with the result or rejected on error.
 */
gpii.test.operateSettings = function (settingsHandlers, nameResolver, method) {
    var ret = {};
    fluid.each(settingsHandlers, function (handlerBlock, handlerID) {
        var resolvedName = nameResolver ? nameResolver.resolveName(handlerID, "settingsHandler") : handlerID;
        var response = gpii.settingsHandlers.dispatchSettingsHandler(resolvedName, handlerBlock, method);
        ret[handlerID] = response;
    });
    var togo = gpii.test.settleStructure(ret);
    togo.then(null, function (err) {
        fluid.fail("Error when operating settings handler: ", err);
    });
    return togo;
};

/*
 * Used for settings the initial settings of an application. This is among other used for tests
 * where an application needs to be running on user login
 */
gpii.test.setInitialSettingsState = function (settingsHandlers, nameResolver, onComplete) {
    var promise = gpii.test.setSettings(settingsHandlers, nameResolver);
    promise.then(onComplete);
};

/** Snapshot the state of all settingsHandlers by stashing them in a member named `orig` on the supplied settingsStore
 * @param {Object} settingsHandlers - A map of settings handler names to `settingsHandler` blocks as seen in the `settingsHandlers`
 * option of a `gpii.test.common.testCaseHolder`.
 * @param {Object} settingsStore - The `settingsStore` member of a `gpii.test.common.testCaseHolder`. This will have a snapshot of
 * the state of the supplied settingsHandlers stored in a member named `orig`.
 * @param {NameResolver|Null} nameResolver - A `nameResolver` mapping global names onto alternatives for use in a testing context.
 * @param {Function} onComplete - A callback to be notified when the state of all the supplied settingsHandlers have been read.
 */
gpii.test.snapshotSettings = function (settingsHandlers, settingsStore, nameResolver, onComplete) {
    var origPromise = gpii.test.getSettings(settingsHandlers, nameResolver);
    origPromise.then(function (origSettings) {
        // any settings already defined in settingsStore.org overwrites the ones read by snapshotter
        settingsStore.orig = fluid.extend(true, origSettings, settingsStore.orig);
        onComplete();
    });
};

gpii.test.loginRequestListen = function (data) {
    jqUnit.assertNotEquals("Successful login message returned " + data, -1,
        data.indexOf("was successfully logged in."));
};

gpii.test.extractSettingsBlocks = function (settingsHandlers) {
    return fluid.transform(settingsHandlers, gpii.settingsHandlers.extractSettingsBlocks);
};

gpii.test.checkConfiguration = function (settingsHandlers, nameResolver, onComplete, customMsg) {
    var configPromise = gpii.test.getSettings(settingsHandlers, nameResolver);
    configPromise.then(function (config) {
        var noOptions = gpii.test.extractSettingsBlocks(settingsHandlers);
        jqUnit.assertDeepEq(customMsg || "Checking that settings are set", noOptions, config);
        onComplete();
    });
};

gpii.test.logoutRequestListen = function (data) {
    jqUnit.assertNotEquals("Successful logout message returned " + data, -1,
        data.indexOf("was successfully logged out."));
};

gpii.test.checkRestoredConfiguration = function (settingsHandlers, settingsStore, nameResolver, onComplete) {
    var currentSettingsPromise = gpii.test.getSettings(settingsHandlers, nameResolver);
    currentSettingsPromise.then(function (currentSettings) {
        jqUnit.assertDeepEq("Checking that settings are properly reset", settingsStore.orig, currentSettings);
        onComplete();
    });
};

gpii.test.checkRestoredInitialState = function (initialSettings, nameResolver, onComplete) {
    if (initialSettings === undefined) {
        jqUnit.assertTrue("No initial settings defined, so not checking", true);
        onComplete();
        return;
    }
    var currentSettingsPromise = gpii.test.getSettings(initialSettings, nameResolver);
    currentSettingsPromise.then(function (currentSettings) {
        jqUnit.assertDeepEq("Checking that initital settings are also properly reset", gpii.test.extractSettingsBlocks(initialSettings), currentSettings);
        onComplete();
    });
};

gpii.test.common.receiveVariableResolver = function (testCaseHolder, variableResolver) {
    testCaseHolder.variableResolver = variableResolver;
};

/** The base testCaseHolder for the straightforward family of login/logout system test cases - for example
 * the very simple DevelopmentTests.js, integration tests and acceptance tests. These all operate the
 * stereotypical workflow of snapshotting the initial settings handler state, logging in a user,
 * checking that expected settings are set, logging out the user, and then verifying that the initial
 * state is restored.
 *
 * This takes its place in the standard IoC Testing Framework environment structure rooted at "kettle.test.serverEnvironment"
 * defined in kettle/lib/test/KettleTestUtils.js as the member named `test`. This structure is constructed via
 * kettle.test.bootstrapServer which is kicked off from the standard launcher gpii.test.runTests
 */

fluid.defaults("gpii.test.common.loginRequestComponent", { // named oddly to avoid name conflicts with component whose member name is `loginRequest`
    gradeNames: "kettle.test.request.http",
    path: "/user/%gpiiKey/login",
    termMap: {
        gpiiKey: "{testCaseHolder}.options.gpiiKey"
    }
});

fluid.defaults("gpii.test.common.logoutRequestComponent", {
    gradeNames: "kettle.test.request.http",
    path: "/user/%gpiiKey/logout",
    termMap: {
        gpiiKey: "{testCaseHolder}.options.gpiiKey"
    }
});

fluid.defaults("gpii.test.common.testCaseHolder", {
    gradeNames: ["kettle.test.testCaseHolder"],
    members: {
        // The "orig" member of this area will be written by gpii.test.snapshotSettings, and read back by gpii.test.checkRestoredConfiguration
        settingsStore: {}
    },
    mergePolicy: {
        "settingsHandlers": "noexpand",
        "initialState": "noexpand"
    },
    events: {
        onSnapshotComplete: null,
        onInitialStateSet: null,
        onInitialStateConfirmed: null,
        onCheckConfigurationComplete: null,
        onCheckRestoredConfigurationComplete: null,
        onCheckRestoredInitialStateComplete: null
    },
    distributeOptions: {
        "common.testCaseHolder.variableResolver": {
            record: {
                funcName: "gpii.test.common.receiveVariableResolver",
                args: ["{testCaseHolder}", "{arguments}.0"]
            },
            target: "{that lifecycleManager variableResolver}.options.listeners.onCreate"
        },
        "common.testCaseHolder.port": {
            record: "{configuration}.options.mainServerPort",
            target: "{that kettle.test.request}.options.port"
        }
    },
    components: {
        // The following configuration should be valid:
        // variableResolver: "{tests}.configuration.server.flowManager.lifecycleManager.variableResolver" but clearly stresses
        // ginger resolution in the framework too much.
        // In fact, a proper solution would allow us to directly write:
        // variableResolver: "{that lifecycleManager variableResolver}" without the listener hack above - this requires FLUID-5556
        loginRequest: {
            type: "gpii.test.common.loginRequestComponent"
        },
        logoutRequest: {
            type: "gpii.test.common.logoutRequestComponent"
        }
    }
});

/** mixin grades to hoist out the lifecycleManager, to a location where it can be
 * easily resolved by various test fixtures. This will become unnecessary after the FLUID-4892 rewrite of Infusion
 */
fluid.defaults("gpii.test.common.lifecycleManagerReceiver", {
    distributeOptions: {
        record: {
            funcName: "gpii.test.common.receiveComponent",
            args: ["{testCaseHolder}", "{arguments}.0", "lifecycleManager"]
        },
        target: "{that lifecycleManager}.options.listeners.onCreate"
    }
});

fluid.defaults("gpii.test.common.untrusted.lifecycleManagerReceiver", {
    distributeOptions: {
        record: {
            funcName: "gpii.test.common.receiveComponent",
            args: ["{testCaseHolder}", "{arguments}.0", "lifecycleManager"]
        },
        target: "{that localConfig lifecycleManager}.options.listeners.onCreate"
    }
});


gpii.test.common.receiveComponent = function (testCaseHolder, component, name) {
    if (!testCaseHolder[name]) {
        fluid.globalInstantiator.recordKnownComponent(testCaseHolder, component, name, false);
    }
};


/** Expand material in a `gpii.test.common.testCaseHolder` fixture's options using the variableResolver fished out of the real implementation,
 * and place it at a public member for the assertions to use
 * @param {Component} testCaseHolder - An instance of gpii.test.common.testCaseHolder component with some expandable material in its options.
 * @param {String|Array} members - One or more paths in the options to be expanded.
 * @return {Component} *side-effect* - expanded material is placed at top-level in the supplied `testCaseHolder` at the paths given in the `members` argument.
 */

gpii.test.expandSettings = function (testCaseHolder, members) {
    members = fluid.makeArray(members);
    fluid.each(members, function (val) {
        testCaseHolder[val] = testCaseHolder.variableResolver.resolve(testCaseHolder.options[val]);
    });
};

// TODO: remove these clumsy constants once https://issues.fluidproject.org/browse/FLUID-5903 is implemented
gpii.test.initialStateSequence = fluid.freezeRecursive([
    {
        func: "gpii.test.expandSettings",
        args: [ "{tests}", "initialState" ]
    }, {
        func: "gpii.test.setInitialSettingsState",
        args: [ "{tests}.initialState", "{nameResolver}", "{testCaseHolder}.events.onInitialStateSet.fire"]
    }, {
        event: "{testCaseHolder}.events.onInitialStateSet",
        listener: "fluid.identity"
    }, {
        func: "gpii.test.checkConfiguration",
        args: ["{tests}.initialState", "{nameResolver}", "{testCaseHolder}.events.onInitialStateConfirmed.fire", "Confirming initial state"]
    }, {
        event: "{testCaseHolder}.events.onInitialStateConfirmed",
        listener: "fluid.identity"
    }
]);

gpii.test.snapshotSequence = fluid.freezeRecursive([
    {
        func: "gpii.test.expandSettings",
        args: [ "{tests}", "settingsHandlers" ]
    }, {
        func: "gpii.test.snapshotSettings",
        args: ["{tests}.settingsHandlers", "{tests}.settingsStore", "{nameResolver}", "{testCaseHolder}.events.onSnapshotComplete.fire"]
    }, {
        event: "{testCaseHolder}.events.onSnapshotComplete",
        listener: "fluid.identity"
    }
]);

gpii.test.loginSequence = fluid.freezeRecursive([
    {
        func: "{loginRequest}.send"
    }, {
        event: "{loginRequest}.events.onComplete",
        listener: "gpii.test.loginRequestListen"
    }, {
        func: "gpii.test.checkConfiguration",
        args: ["{tests}.settingsHandlers", "{nameResolver}", "{testCaseHolder}.events.onCheckConfigurationComplete.fire"]
    }, {
        event: "{testCaseHolder}.events.onCheckConfigurationComplete",
        listener: "fluid.identity"
    }
]);

gpii.test.logoutSequence = fluid.freezeRecursive([
    {
        func: "{logoutRequest}.send"
    }, {
        event: "{logoutRequest}.events.onComplete",
        listener: "gpii.test.logoutRequestListen"
    }
]);

gpii.test.checkSequence = fluid.freezeRecursive([
    {
        func: "gpii.test.checkRestoredConfiguration",
        args: ["{tests}.settingsHandlers", "{tests}.settingsStore", "{nameResolver}", "{testCaseHolder}.events.onCheckRestoredConfigurationComplete.fire"]
    }, {
        event: "{testCaseHolder}.events.onCheckRestoredConfigurationComplete",
        listener: "fluid.identity"
    }, { // anything in the intial state should also be restored upon logout
        func: "gpii.test.checkRestoredInitialState",
        args: [ "{tests}.initialState", "{nameResolver}", "{testCaseHolder}.events.onCheckRestoredInitialStateComplete.fire"]
    }, {
        event: "{testCaseHolder}.events.onCheckRestoredInitialStateComplete",
        listener: "fluid.identity"
    }
]);

gpii.test.unshift = function (array, elements) {
    array.unshift.apply(array, elements);
};

gpii.test.push = function (array, elements) {
    array.push.apply(array, elements);
};


/* Build a test fixture for integration/acceptance tests operating the stereotypical workflow -
 * snapshot, login, expectConfigured, logout and expectRestored
 */
gpii.test.buildSingleTestFixture = function (testDef, rootGrades) {
    testDef.gradeNames = fluid.makeArray(testDef.gradeNames).concat(fluid.makeArray(rootGrades));

    testDef.expect = 5;
    testDef.sequence = fluid.makeArray(testDef.sequence);

    gpii.test.unshift(testDef.sequence, gpii.test.loginSequence);
    gpii.test.unshift(testDef.sequence, gpii.test.snapshotSequence);
    if (testDef.initialState) {
        gpii.test.unshift(testDef.sequence, gpii.test.initialStateSequence);
        testDef.expect++;
    }

    gpii.test.push(testDef.sequence, gpii.test.logoutSequence);

    gpii.test.push(testDef.sequence, gpii.test.checkSequence);

    return testDef;
};

/** Build a fixture set suitable for sending to kettle.test.bootstrapServer that includes a non-flat
 * array of sequences within the member `sequenceSegments` as well as a base record to be merged into each testDef
 * @param {Array} fixtures - An array of proto-testDefs, each members `name` and `expect` with the same semantic
 * as a standard testDefa, and a member `sequenceSegments` whose elements may themselves be arrays of sequences.
 * @param {Object} baseTestDef - A base test def record, holding members `configName`, `configPath` and other
 * members appropriate for this options structure.
 */
// TODO: Review that we shouldn't use gradeNames and unify with buildSingleTestFixture's "rootGrades" pattern
gpii.test.buildSegmentedFixtures = function (fixtures, baseTestDef) {
    return fluid.transform(fixtures, function (fixture) {
        var overlay = {
            name: fixture.name,
            expect: fixture.expect,
            sequence: fluid.flatten(fixture.sequenceSegments)
        };
        return fluid.extend(true, {}, baseTestDef, overlay);
    });
};


// Convert a record as returned by a "portable test" into a full testDefs structure as accepted by gpii.test.buildTests
// TODO better docs and explanation
gpii.test.recordToTestDefs = function (record) {
    var testDefs = fluid.copy(fluid.getGlobalValue(record.testDefs));
    fluid.each(testDefs, function (testDef) {
        testDef.config = {
            configName: testDef.configName || record.configName,
            configPath: testDef.configPath || record.configPath
        };
    });
    return testDefs;
};

gpii.test.runTests = function (record, rootGrades) {
    var testDefs = gpii.test.recordToTestDefs(record);
    var testDefs2 = gpii.test.buildTests(testDefs, rootGrades);
    return gpii.test.bootstrapServer(testDefs2);
};

// Add pouchDB infrastructure to each test definition so that the test sequence starts when the pouchDB is loaded and ready.
// This function is used for running tests that require the cloud based flow manager, which in turn needs the backend
// database.
gpii.test.bootstrapServer = function (testDefs) {
    kettle.test.bootstrapServer(fluid.transform(testDefs, function (testDef) {
        return gpii.test.pouch.addPouchFixturesToTestDef(testDef);
    }));
};

// Run from the base of every platform-specific acceptance/integration test fixture file as its per-file bootstrap.
// The long argument list is required in order to detect whether the file is being run as a top-level
// node executable - if it is, we default to running it as an integration test - otherwise, we just
// return its record.

gpii.test.bootstrap = function (record, rootGrades, foreignModule, foreignRequire) {
    if (foreignRequire.main === foreignModule) { // the file was executed directly from the command line - run integration tests immediately
        return gpii.test.runTests(record, rootGrades);
    } else { // otherwise just return its record for processing
        return record;
    }
};

gpii.test.buildTests = function (testDefs, rootGrades) {
    return fluid.transform(fluid.copy(testDefs), function (testDef) {
        return gpii.test.buildSingleTestFixture(testDef, rootGrades);
    });
};

/** Runs a suite of integration or acceptance tests as indexed by a platform-specific root
 * such as "index-windows.js".
 * @param {Array} files - The array of test fixture files, as returned by the index module.
 * @param {String} baseDir - The base directory holding the index module.
 * @param {Array} rootGrades - An array of grade names to be contributed to the component root
 * (currently testCaseHolder) of the fixtures. This controls the variety of test which is executed -
 * e.g. a mocked Windows environment integration test, or a full acceptance test (the default).
 */

gpii.test.runSuite = function (files, baseDir, rootGrades) {
    fluid.log("Running test suites:\n", JSON.stringify(files, null, 2));
    fluid.each(files, function (oneFile) {
        var filePath = path.resolve(baseDir, "platform", oneFile);
        var record = require(filePath);
        gpii.test.runTests(record, rootGrades);
    });
};

// simple utility to select a set of test suites to run based on presence of substrings in their names
// these are ANDed together - i.e. they must each appear in a selected suite's name
gpii.test.filterSuites = function (files, specs) {
    fluid.each(specs, function (spec) {
        files = fluid.remove_if(fluid.copy(files), function (file) {
            return file.indexOf(spec) === -1;
        });
    });

    return files;
};

gpii.test.filterSuitesByArgs = function (files, args) {
    return args.length === 2 ? files : gpii.test.filterSuites(files, args.slice(2));
};

gpii.test.runSuitesWithFiltering = function (files, baseDir, rootGrades) {
    var filtered = gpii.test.filterSuitesByArgs(files, process.argv);
    gpii.test.runSuite(filtered, baseDir, rootGrades);
};
