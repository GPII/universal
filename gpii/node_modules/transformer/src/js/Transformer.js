/*!
GPII Settings Transformer

Copyright 2012 OCAD University
Copyright 2012 Antranig Basman
Copyright 2013 Raising the Floor

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

"use strict";

var fluid = fluid || require("infusion"),
    $ = fluid.registerNamespace("jQuery"),
    gpii = fluid.registerNamespace("gpii");

(function () {

    fluid.defaults("gpii.transformer", {
        gradeNames: ["fluid.littleComponent", "autoInit"]
    });

    gpii.transformer.indexApplicationSettings = function (applications, appSpecific) {
        return $.extend(true, appSpecific, applications);
    };

    gpii.transformer.findAndIndexApplications = function (preferences, appSpecific) {
        if (fluid.isPrimitive(preferences)) {
            return;
        }

        if (preferences.applications) {
            gpii.transformer.indexApplicationSettings(preferences.applications, appSpecific);
            delete preferences.applications;
        }

        fluid.each(preferences, function (preference) {
            gpii.transformer.findAndIndexApplications(preference, appSpecific);
        });

        return appSpecific;
    };

    gpii.transformer.findApplicationSettings = function (preferences, appSpecific) {
        appSpecific = appSpecific || {};
        preferences = fluid.copy(preferences);
        return gpii.transformer.findAndIndexApplications(preferences, appSpecific);
    };

    gpii.transformer.preferencesToSettings = function (preferences, handler, specificPrefs) {
        var settings = {},
            rules = handler.capabilitiesTransformations;

        if (rules) {
            settings = fluid.model.transformWithRules(preferences, handler.capabilitiesTransformations);
        }

        if (!specificPrefs || !specificPrefs.parameters) {
            return settings;
        }
        var mergedSettings = $.extend(true, settings, specificPrefs.parameters);

        return mergedSettings;
    };

    gpii.transformer.transformSettingsHandlers = function (preferences, specificPrefs, solution, settingsHandlers) {
        fluid.each(settingsHandlers, function (handler) {
            delete handler.capabilities;
            var transformedSettings = gpii.transformer.preferencesToSettings(preferences, handler, specificPrefs);
            handler.settings = transformedSettings;
        });
    };

    gpii.transformer.finalInit = function (that) {

        that.transformSettings = function (settings) {
            var specificPrefsForAllSolutions = gpii.transformer.findApplicationSettings(settings.preferences);
            var transformedSolutions = fluid.copy(settings.solutions);

            fluid.each(transformedSolutions, function (solution) {
                var settingsHandlers = solution.settingsHandlers;
                var specificPrefs = specificPrefsForAllSolutions[solution.id];
                gpii.transformer.transformSettingsHandlers(settings.preferences, specificPrefs, solution, settingsHandlers);
            });

            return transformedSolutions;
        };
    };

    fluid.defaults("gpii.transformer.quantize", {
        gradeNames: "fluid.standardTransformFunction"
    });

    gpii.transformer.quantize = function (value, transformSpec, transform) {
        if (!transformSpec.ranges || !transformSpec.ranges.length) {
            fluid.fail("gpii.transformer.quantize should have a key called ranges containing an array defining ranges to quantize");
        }
        for (var i = 0; i < transformSpec.ranges.length; i++) {
            var rangeSpec = transformSpec.ranges[i];
            if (rangeSpec.upperBound === undefined || value <= rangeSpec.upperBound) {
                // note that we might return undefined if output evaluates to that on an expand
                return fluid.isPrimitive(rangeSpec.output) ? rangeSpec.output : transform.expand(rangeSpec.output);
            }
        }
    };
    
    fluid.defaults("gpii.transformer.booleanToNumber", {
        gradeNames: "fluid.standardTransformFunction"
    });
    
    gpii.transformer.booleanToNumber = function (value) {
        return value ? 1 : 0;
    };
    
}());
