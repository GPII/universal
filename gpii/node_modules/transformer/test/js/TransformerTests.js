/*!
GPII Settings Transformer Tests

Copyright 2012 OCAD University
Copyright 2013 Raising the Floor

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global jqUnit */

"use strict";

var fluid = fluid || require("infusion"),
    $ = fluid.registerNamespace("jQuery"),
    gpii = fluid.registerNamespace("gpii");

(function () {
    fluid.registerNamespace("gpii.tests.transformer");

    var makeExpectedTransformerOutput = function (solutionsSpec, settingsBlocks) {
        var settings = fluid.copy(solutionsSpec);
        settingsBlocks = $.makeArray(settingsBlocks);

        fluid.each(settingsBlocks, function (settingsBlock, idx) {
            settings[idx].settingsHandlers[0].settings = settingsBlock;
            delete settings[idx].settingsHandlers[0].capabilities;
        });

        return settings;
    };

    var gnomeMagnifierSolutionEntry = {
        "id": "org.gnome.desktop.a11y.magnifier",
        "settingsHandlers": [
            {
                "type": "gpii.gsettings.set",
                "options": {
                    "schema": "org.gnome.desktop.a11y.magnifier"
                },
                "capabilities": [
                    "display.screenEnhancement.screenMagnification.applications.org\\.gnome\\.desktop\\.a11y\\.magnifier.name"
                ],
                "capabilitiesTransformations": {
                    "mag-factor": {
                        "transform": {
                            "type": "fluid.transforms.linearScale",
                            "valuePath": "display.screenEnhancement.magnification",
                            "factor": 100
                        }
                    },
                    "show-cross-hairs": "display.screenEnhancement.-provisional-showCrosshairs",
                    "mouse-tracking": {
                        "transform": {
                            "type": "fluid.transforms.valueMapper",
                            "inputPath": "display.screenEnhancement.tracking",
                            "options": {
                                "mouse": {
                                    "outputValue": "centered"
                                }
                            }
                        }
                    }
                }
            }
        ]
    };

    var onlyGnomeMagnifierSolutionSpec = [
        gnomeMagnifierSolutionEntry
    ];

    var gnomeKeyboardSolutionEntry = {
        "name": "GNOME Shell Keyboard Settings",
        "id": "org.gnome.desktop.a11y.keyboard",
        "settingsHandlers": [
            {
                "type": "gpii.gsettings.set",
                "capabilities": [
                    "control.onscreenKeyboard.applications.org\\.gnome\\.desktop\\.a11y\\.keyboard.name",
                    "display.applications.org\\.gnome\\.desktop\\.a11y\\.keyboard.name"
                ],
                "capabilitiesTransformations": {
                    "stickykeys-enable": "control.keyboardEnhancement.stickyKeys"
                },
                "options": {
                    "schema": "org.gnome.desktop.a11y.keyboard"
                }
            }
        ]
    };

    var multipleSolutionSpec = [
        gnomeMagnifierSolutionEntry,
        gnomeKeyboardSolutionEntry
    ];

    var appSpecificPreferences = {
        "display": {
            "screenEnhancement": {
                "applications": {
                    "org.gnome.desktop.a11y.magnifier": {
                        "name": "GNOME Shell Magnifier",
                        "priority": 100,
                        "parameters": {
                            "show-cross-hairs": true
                        }
                    }
                }
            }
        }
    };

    var expectedAppSpecificSettings = makeExpectedTransformerOutput(onlyGnomeMagnifierSolutionSpec, {
        "show-cross-hairs": true
    });

    var genericPreferences = {
        "display": {
            "screenEnhancement": {
                "magnification": 2.0,
                "tracking": ["mouse"]
            }
        }
    };

    var expectedGenericSettings = makeExpectedTransformerOutput(onlyGnomeMagnifierSolutionSpec, {
        "mag-factor": 200,
        "mouse-tracking": "centered"
    });

    var genericAndAppSpecificTransformerPayload = {
        "preferences": {
            "display": {
                "screenEnhancement": {
                    "magnification": 2.0,
                    "tracking": ["mouse"],
                    "applications": {
                        "org.gnome.desktop.a11y.magnifier": {
                            "name": "GNOME Shell Magnifier",
                            "priority": 100,
                            "parameters": {
                                "show-cross-hairs": true
                            }
                        }
                    }
                }
            }
        },

        "solutions": onlyGnomeMagnifierSolutionSpec
    };

    var expectedGenericAndAppSpecificSettings = makeExpectedTransformerOutput(onlyGnomeMagnifierSolutionSpec, {
        "mag-factor": 200,
        "mouse-tracking": "centered",
        "show-cross-hairs": true
    });

    var noMagnificationPreferences = {
        "display": {
            "screenEnhancement": {
                "tracking": ["mouse"]
            }
        }
    };

    var expectedNoMagnificationSettings = makeExpectedTransformerOutput(onlyGnomeMagnifierSolutionSpec, {
        "mouse-tracking": "centered"
    });

    var multipleAppSpecificPreferencesTopLevelAndNested = {
        "applications": {
            "org.gnome.desktop.a11y.keyboard": {
                "name": "GNOME Shell Keyboard",
                "priority": 100,
                "parameters": {
                    "stickykeys-enable": true
                }
            }
        },

        "display": {
            "screenEnhancement": {
                "tracking": ["mouse"],
                "applications": {
                    "org.gnome.desktop.a11y.magnifier": {
                        "name": "GNOME Shell Magnifier",
                        "priority": 100,
                        "parameters": {
                            "show-cross-hairs": true
                        }
                    }
                }
            }
        }
    };

    var multipleNestedAppSpecificPreferences = {
        "display": {
            "applications": {
                "org.gnome.desktop.a11y.keyboard": {
                    "name": "GNOME Shell Keyboard",
                    "priority": 100,
                    "parameters": {
                        "stickykeys-enable": true
                    }
                }
            },
            "screenEnhancement": {
                "tracking": ["mouse"],
                "applications": {
                    "org.gnome.desktop.a11y.magnifier": {
                        "name": "GNOME Shell Magnifier",
                        "priority": 100,
                        "parameters": {
                            "show-cross-hairs": true
                        }
                    }
                }
            }
        }
    };
    var expectedMultipleAppSpecificSettings = makeExpectedTransformerOutput(multipleSolutionSpec, [
        {
            "mouse-tracking": "centered",
            "show-cross-hairs": true
        },
        {
            "stickykeys-enable": true
        }
    ]);

    var transformationConfigs = [
        {
            name: "only application specific preferences.",
            input: {
                "preferences": appSpecificPreferences,
                "solutions": onlyGnomeMagnifierSolutionSpec
            },

            expectedOutput: expectedAppSpecificSettings
        },
        {
            name: "only generic preferences.",
            input: {
                "preferences": genericPreferences,
                "solutions": onlyGnomeMagnifierSolutionSpec
            },

            expectedOutput: expectedGenericSettings
        },
        {
            name: "mix of generic and application-specific preferences.",
            input: genericAndAppSpecificTransformerPayload,
            expectedOutput: expectedGenericAndAppSpecificSettings
        },
        {
            name: "transform nonexistent path.",
            input: {
                preferences: noMagnificationPreferences,
                solutions: onlyGnomeMagnifierSolutionSpec
            },
            expectedOutput: expectedNoMagnificationSettings
        },
        {
            name: "multiple app-specific preferences; one at top-level, the other nested.",
            input: {
                preferences: multipleAppSpecificPreferencesTopLevelAndNested,
                solutions: multipleSolutionSpec
            },
            expectedOutput: expectedMultipleAppSpecificSettings
        },
        {
            name: "multiple app-specific preferences, both nested within the hierarchy.",
            input: {
                preferences: multipleNestedAppSpecificPreferences,
                solutions: multipleSolutionSpec
            },
            expectedOutput: expectedMultipleAppSpecificSettings
        }
    ];


    var testTransformation = function (input, expectedOutput) {
        var transformer = gpii.transformer();
        var actual = transformer.transformSettings(input);
        jqUnit.expect(1);
        jqUnit.assertDeepEq("The input preferences should be transformed into a valid application-specific settingsHandler block.",
            expectedOutput, actual);
    };

    var testTransformationConfig = function (config) {
        jqUnit.test("gpii.transformer.transformSettings(), " + config.name, function () {
            testTransformation(config.input, config.expectedOutput);
        });
    };

    gpii.tests.transformer.runTests = function () {
        jqUnit.module("Settings Transformer");

        jqUnit.test("gpii.transformer.findApplicationSettings()", function () {
            var expected = fluid.get(genericAndAppSpecificTransformerPayload, "preferences.display.screenEnhancement.applications");
            var actual = gpii.transformer.findApplicationSettings(genericAndAppSpecificTransformerPayload.preferences);
            jqUnit.assertDeepEq("", expected, actual);
        });

        for (var i = 0; i < transformationConfigs.length; i++) {
            var config = transformationConfigs[i];
            testTransformationConfig(config);
        }
    };

    /* --------------- gpii.transformer.quantize tests -------------------- */
    var quantizeTests = {
        name: "Basic quantize transformations",
        rules: {
            "foo": {
                "transform": {
                    "type": "gpii.transformer.quantize",
                    "inputPath": "someval",
                    "ranges": [
                        {
                            "upperBound": 380,
                            "output": 1
                        }, {
                            "upperBound": 450,
                            "output": 2
                        }, {
                            "upperBound": 600,
                            "output": {
                                "transform": {
                                    "type": "fluid.transforms.literalValue",
                                    "value": "DOGG",
                                    "outputPath": "bar"
                                }
                            }
                        }, {
                            "output": 3
                        }
                    ]
                }
            }
        },
        expects: {
            "low value check": {
                input: {
                    someval: 200
                },
                expected: {
                    foo: 1
                }
            },
            "on upper bound limit": {
                input: {
                    someval: 380
                },
                expected: {
                    foo: 1
                }
            },
            "interval check": {
                input: {
                    someval: 429
                },
                expected: {
                    foo: 2
                }
            },
            "upper default value": {
                input: {
                    someval: 1000
                },
                expected: {
                    foo: 3
                }
            },
            "expander in output": {
                input: {
                    someval: 500
                },
                expected: {
                    foo: {
                        bar: "DOGG"
                    }
                }
            }
        }
    };

    jqUnit.test("Quantize tests", function () {
        fluid.each(quantizeTests.expects, function (test, tname) {
            var transformed = fluid.model.transformWithRules(test.input, quantizeTests.rules);
            jqUnit.assertDeepEq(quantizeTests.name + " - " + tname, test.expected, transformed);
        });
    });
}());
