/*!
GPII Database Utilities

Copyright 2017 OCAD university

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = fluid || require("infusion"),
    gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.dbOperation");

/** Use `fluid.stringTemplate` method to replace terms within error.message with actual values.
 * @param {Object} error - An object that contains an element keyed by "message".
 * @param {Object} termMap - An object that contains the mapping between terms used within error.message and their actual values.
 * @return {Object} The input object "error" with terms in error.message being replaced by actual values.
*/
gpii.dbOperation.composeError = function (error, termMap) {
    var err = fluid.copy(error);
    err.message = fluid.stringTemplate(err.message, termMap);
    return err;
};

/**
 * Returns the current time in a human readable string that also naturally sort in chronological order.
 * See http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.43
 * @return {String} The current time in ISO string format.
 */
gpii.dbOperation.getCurrentTimestamp = function () {
    return new Date().toISOString();
};

/**
 * This function looks at an item to make sure it exists properly, useful for
 * looking at the results of a `{dataStore}.findById` or similar operation. If
 * the item exists as it should, a promise resolved with the item is
 * returned, otherwise a rejected promise is returned with the supplied `errorMessage`.
 *
 * The current criteria for validity is that the item is not undefined and has
 * the `type` that is supplied in the arguments.
 *
 * @param {Object} item - Item, mostly a return from another API or CouchDB call
 * that we are checking to make sure it's of the appropriate type.
 * @param {String} type - The `type` that the item should be of. This is to
 * follow the convention we have for CouchDB records where each record has a `type`
 * member.
 * @param {String} errorMessage - If this isn't the appropriate type, this message will be
 * included in the promise rejection payload.
 * @param {String} errorCode - If this isn't the appropriate type, this error code will be
 * included in the promise rejection payload.
 * @return {fluid.promise} Promise, when the item is valid, it resolves with the
 * original item. When the item is not valid, it rejects with an error payload including
 * the supplied `errorMessage`.
 */
gpii.dbOperation.verifyExists = function (item, type, errorMessage, errorCode) {
    var togo = fluid.promise();
    if (item && item.type === type) {
        togo.resolve(item);
    }
    else {
        togo.reject({
            isError: true,
            errorCode: errorCode,
            message: errorMessage
        });
    }
    return togo;
};
