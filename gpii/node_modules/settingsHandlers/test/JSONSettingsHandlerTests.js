/*
JSON Settings Handler Tests

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, __dirname*/

(function () {

    "use strict";

    // This loads universal.
    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii"),
        jqUnit = fluid.require("jqUnit"),
        fs = require("fs");

    require("settingsHandlers");

    var testTempFilePaths = [
        __dirname + "/data/JSONSettingsHandler/test1_tmp.json",
        __dirname + "/data/JSONSettingsHandler/test2_tmp.json"
    ];

    var deleteTestFiles = function () {
        fluid.each(testTempFilePaths, function (filePath) {
            if (fs.existsSync(filePath)) {
                fs.unlinkSync(filePath);
            }
        });
    };

    jqUnit.module("JSONSettingsHandler Tests", {
        teardown: deleteTestFiles
    });

    var tests = {
        basicTest: {
            defaultFile: __dirname +
                "/data/JSONSettingsHandler/test1_default.json",
            tmpFile: testTempFilePaths[0],
            expectedFile: __dirname +
                "/data/JSONSettingsHandler/test1_expectedOutput.json",
            set: {
                payload: {
                    "net.opendirective.maavis": [{
                        options: {
                            "path": testTempFilePaths[0]
                        },
                        settings: {
                            "theme": "bw",
                            "userType": "scan",
                            "name": "Test"
                        }
                    }]
                },
                expectedResult: {
                    "net.opendirective.maavis": [{
                        options: {
                            "path": testTempFilePaths[0]
                        },
                        settings: {
                            "userType": { newValue: "scan", oldValue: "touch" },
                            "theme": { newValue: "bw", oldValue: "colour" },
                            "name": { newValue: "Test", oldValue: "Maavis" }
                        }
                    }]
                }
            },
            get: {
                payload: {
                    "net.opendirective.maavis": [{
                        options: {
                            "path": __dirname +
                                "/data/JSONSettingsHandler/test1_default.json"
                        },
                        settings: {
                            "theme": null,
                            "userType": null,
                            "name": null
                        }
                    }]
                },
                expectedResult: {
                    "net.opendirective.maavis": [{
                        settings: {
                            "userType": "touch",
                            "theme": "colour",
                            "name": "Maavis"
                        }
                    }]
                }
            }
        },
        complexTest: {
            defaultFile: __dirname +
                "/data/JSONSettingsHandler/test2_default.json",
            tmpFile: testTempFilePaths[1],
            expectedFile: __dirname +
                "/data/JSONSettingsHandler/test2_expectedOutput.json",
            set: {
                payload: {
                    "org.gnome.orca": [{
                        options: {
                            "path": testTempFilePaths[1]
                        },
                        settings: {
                            "profiles.default.profile.0": "undefault",
                            "profiles.default.voices.default.rate": 666,
                            "profiles.default.voices.foo\\.bar.boo": "far out, man!!"
                        }
                    }]
                },
                expectedResult: {
                    "org.gnome.orca": [{
                        options: {
                            "path": testTempFilePaths[1]
                        },
                        settings: {
                            "profiles.default.profile.0": {
                                newValue: "undefault",
                                oldValue: "Default"
                            },
                            "profiles.default.voices.default.rate": {
                                newValue: 666,
                                oldValue: 50
                            },
                            "profiles.default.voices.foo\\.bar.boo": {
                                newValue: "far out, man!!",
                                oldValue: "far"
                            }
                        }
                    }]
                }
            },
            get: {
                payload: {
                    "org.gnome.orca": [{
                        options: {
                            "path": __dirname +
                                "/data/JSONSettingsHandler/test2_default.json"
                        },
                        settings: {
                            "profiles.default.profile.0": null,
                            "profiles.default.voices.default.rate": null,
                            "profiles.default.voices.foo\\.bar.boo": null
                        }
                    }]
                },
                expectedResult: {
                    "org.gnome.orca": [{
                        settings: {
                            "profiles.default.profile.0": "Default",
                            "profiles.default.voices.default.rate": 50,
                            "profiles.default.voices.foo\\.bar.boo": "far"
                        }
                    }]
                }
            }
        }
    };

    var setTester = function (name, test) {
        //read original JSON and copy to a file we can mess up:
        var origJSON = fs.readFileSync(test.defaultFile, "utf-8");
        fs.writeFileSync(test.tmpFile, origJSON, "utf-8");
        //test return payload
        var returnPayload = gpii.settingsHandlers.JSONSettingsHandler.set(
            test.set.payload);
        jqUnit.assertDeepEq("Checking return payload for " + name +
            " JSON file: ", test.set.expectedResult, returnPayload);

        //next check that the written JSON file is as expected:
        var savedJSON = JSON.parse(fs.readFileSync(test.tmpFile, "utf-8"));
        var expectedJSON = JSON.parse(fs.readFileSync(test.expectedFile,
            "utf-8"));
        jqUnit.assertDeepEq("checking JSON file for " + name + ": ",
            expectedJSON, savedJSON);
    };

    jqUnit.test("JSONHandler.set", function () {
        fluid.each(tests, function (v, k) {
            setTester(k, v);
        });
    });

    var getTester = function (name, test) {
        var returnPayload = gpii.settingsHandlers.JSONSettingsHandler.get(
            test.get.payload);
        jqUnit.assertDeepEq("Checking return payload for " + name +
            " JSON file: ", test.get.expectedResult, returnPayload);
    };

    jqUnit.test("JSONHandler.get", function () {
        fluid.each(tests, function (v, k) {
            getTester(k, v);
        });
    });
}());
