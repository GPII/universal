/*
JSON Settings Handler Tests

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, __dirname, setTimeout*/

(function () {

    "use strict";

    // This loads universal.
    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii"),
        jqUnit = fluid.require("jqUnit"),
        fs = require("fs");

    require("testFramework");
    require("settingsHandlers");

    var JSONHandlerTester = gpii.tests.testEnvironment();

    jqUnit.module("JSONSettingsHandler Tests");

    var tests = {
        basicTest: {
            defaultFile: __dirname + "/data/JSONSettingsHandler/test1_default.json",
            tmpFile: __dirname + "/data/JSONSettingsHandler/test1_tmp.json",
            expectedFile: __dirname + "/data/JSONSettingsHandler/test1_expectedOutput.json",
            payload: {
                "net.opendirective.maavis": [{ 
                    options: {
                        "path": __dirname + "/data/JSONSettingsHandler/test1_tmp.json"
                    },
                    settings: {
                        "theme": "bw",
                        "userType": "scan",
                        "name": "Test"
                    }
                }]
            }, 
            expectedResult: {
                "net.opendirective.maavis": [{
                    options: {
                        "path": __dirname + "/data/JSONSettingsHandler/test1_tmp.json"
                    },
                    settings: {
                        "userType": { newValue: "scan", oldValue: "touch" },
                        "theme": { newValue: "bw", oldValue: "colour" },
                        "name": { newValue: "Test", oldValue: "Maavis" }
                    }
                }]
            }
        },
        complexTest: {
            defaultFile: __dirname + "/data/JSONSettingsHandler/test2_default.json",
            tmpFile: __dirname + "/data/JSONSettingsHandler/test2_tmp.json",
            expectedFile: __dirname + "/data/JSONSettingsHandler/test2_expectedOutput.json",
            payload: {
                "org.gnome.orca": [{ 
                    options: {
                        "path": __dirname + "/data/JSONSettingsHandler/test2_tmp.json"
                    },
                    settings: {
                        "profiles.default.profile.0": "undefault",
                        "profiles.default.voices.default.rate": 666,
                        "profiles.default.voices.foo\\.bar.boo": "far out, man!!"
                    }
                }]
            }, 
            expectedResult: {
                "org.gnome.orca": [{
                    options: {
                        "path": __dirname + "/data/JSONSettingsHandler/test2_tmp.json"
                    },
                    settings: {
                        "profiles.default.profile.0": { newValue: "undefault", oldValue: "Default" },
                        "profiles.default.voices.default.rate": { newValue: 666, oldValue: 50 },
                        "profiles.default.voices.foo\\.bar.boo": { newValue: "far out, man!!", oldValue: "far" }
                    }
                }]
            }
        }
    };

    var tester = function (name, test) {
            //read original JSON and copy to a file we can mess up:
            var origJSON = fs.readFileSync(test.defaultFile, "utf-8");
            fs.writeFileSync(test.tmpFile, origJSON, "utf-8");
            //test return payload
            var returnPayload = gpii.settingsHandlers.JSONSettingsHandler.set(test.payload);
            jqUnit.assertDeepEq("Checking return payload for "+name+" JSON file: ", test.expectedResult, returnPayload);
            
            //next check that the written JSON file is as expected:
            var savedJSON = JSON.parse(fs.readFileSync(test.tmpFile, "utf-8"));
            var expectedJSON = JSON.parse(fs.readFileSync(test.expectedFile, "utf-8"));
            jqUnit.assertDeepEq("checking JSON file for "+name+": ", expectedJSON, savedJSON);

    };

    JSONHandlerTester.test("JSONHandler.set", function () {
        fluid.each(tests, function (v, k) {
            tester(k, v);
        });
    });
}());