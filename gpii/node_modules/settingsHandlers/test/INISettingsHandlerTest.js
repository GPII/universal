/*
INI Settings Handler Tests

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, __dirname, setTimeout*/

(function () {

    "use strict";

    // This loads universal.
    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii"),
        jqUnit = fluid.require("jqUnit"),
        fs = require("fs");

    require("testFramework");
    require("settingsHandlers");

    var INIHandlerTester = gpii.tests.testEnvironment();

    var tests = {
        basicTest: {
            defaultFile: __dirname + "/data/INISettingsHandler/test1_default.ini",
            tmpFile: __dirname + "/data/INISettingsHandler/test1_tmp.ini",
            expectedFile: __dirname + "/data/INISettingsHandler/test1_expectedOutput.ini",
            payload: {
                "nvda.screenReader": [{ 
                    options: {
                        "path": __dirname + "/data/INISettingsHandler/test1_tmp.ini"
                    },
                    settings: {
                        "general.askToExit": false,
                        "general.showWelcomeDialogAtStartup": false,
                        "speech.symbolLevel": 90
                    }
                }]
            }, 
            expectedResult: {
                "nvda.screenReader": [{
                    options: {
                        "path": __dirname + "/data/INISettingsHandler/test1_tmp.ini"
                    },
                    settings: {
                        "general.askToExit": { newValue: false, oldValue: "True" },
                        "general.showWelcomeDialogAtStartup": { newValue: false, oldValue: "True" },
                        "speech.symbolLevel": { newValue: 90, oldValue: "100" }
                    }
                }]
            }
        },
        complexTest: {
            defaultFile: __dirname + "/data/INISettingsHandler/test2_default.ini",
            tmpFile: __dirname + "/data/INISettingsHandler/test2_tmp.ini",
            expectedFile: __dirname + "/data/INISettingsHandler/test2_expectedOutput.ini",
            payload: {
                "nvda.screenReader": [{ 
                    options: {
                        "path": __dirname + "/data/INISettingsHandler/test2_tmp.ini",
                        "allowNumberSignComments": true,
                        "allowSubSections": true
                    },
                    settings: {
                        "speech.symbolLevel": 90,
                        "speech.espeak.rate": 40,
                        "speech.espeak.pitch": 30,
                        "speech.espeak2.newEntry": 30
                    }
                }]
            }, 
            expectedResult: {
                "nvda.screenReader": [{
                    options: {
                        "path": __dirname + "/data/INISettingsHandler/test2_tmp.ini",
                        "allowNumberSignComments": true,
                        "allowSubSections": true
                    },
                    settings: {
                        "speech.symbolLevel": { newValue: 90, oldValue: "100" },
                        "speech.espeak.rate": { newValue: 40, oldValue: "30" },
                        "speech.espeak.pitch": { newValue: 30, oldValue: "40" },
                        "speech.espeak2.newEntry": { newValue: 30, oldValue: undefined }
                    }
                }]
            }
        }
    };

    // avoid issue with windows using \r\n and unix using \n
    var unixLinebreak = function (str) {
        return str.replace(/\r\n/g, "\n");
    };

    var tester = function (name, test) {
            // read original INI and copy to a file we can mess up:
            var origINI = fs.readFileSync(test.defaultFile, "utf-8");
            fs.writeFileSync(test.tmpFile, origINI, "utf-8");
            // test return payload
            var returnPayload = gpii.settingsHandlers.INISettingsHandler.set(test.payload);
            jqUnit.assertDeepEq("Checking return payload for "+name+" INI file: ", test.expectedResult, returnPayload);
            
            // next check that the written INI file is as expected:
            var savedINI = fs.readFileSync(test.tmpFile, "utf-8");
            savedINI = unixLinebreak(savedINI);
            var expectedINI = fs.readFileSync(test.expectedFile, "utf-8");
            expectedINI = unixLinebreak(expectedINI);
            jqUnit.assertEquals("checking INI file for "+name+": ", expectedINI, savedINI);

    };

    INIHandlerTester.test("INIHandler.set", function () {
        jqUnit.module("INI Settings Handler tests");
        fluid.each(tests, function (v, k) {
            tester(k, v);
        });
    });
}());