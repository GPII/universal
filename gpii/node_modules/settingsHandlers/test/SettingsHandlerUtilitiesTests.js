/*!
Settings Handler Utilities Tests

Copyright 2012 Raising the Floor - International
Copyright 2013 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

"use strict";

(function () {
    // TODO: Rewrite all these tests into browser-style jqUnit tests, leaving just
    // a stub tester here to test filesystem integration

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii"),
        jqUnit = fluid.require("jqUnit"),
        kettle = fluid.registerNamespace("kettle");

    fluid.registerNamespace("gpii.tests");

    fluid.require("kettle/test/utils/js/KettleTestUtils", require);

    require("settingsHandlers");

    gpii.tests.settingsHandlersSetSettings = function () {
        // check simple json structure
        var result = gpii.settingsHandlers.setSettings(
            {settings: { "key": "val1" }}, { "key": "val2"});
        jqUnit.assertDeepEq("Simple setting",
            { key: { oldValue: "val2", newValue: "val1" } }, result.settings);

        // complex json structure
        var json = {
            firstentry: {
                lvl2: {
                    key1: "vala",
                    key2: "valb"
                }
            },
            nextentry: {
                key3: "valc"
            }
        };
        var settings = {
            "firstentry.lvl2.key1": "newValue",
            "nextentry.key3": "otherNewValue"
        };
        var exp = {
            "firstentry.lvl2.key1": { oldValue: "vala", newValue: "newValue" },
            "nextentry.key3": { oldValue: "valc", newValue: "otherNewValue" }
        };
        result = gpii.settingsHandlers.setSettings({settings: settings}, json);
        jqUnit.assertDeepEq("Multiple and nested settings", exp,
            result.settings);

         // check setSettings for unset values
        json = {
            somekey: {
                somekey2: {
                    key1: "vala"
                }
            }
        };
        settings = {
            "newkey1.newkey2": "someval"
        };
        exp = { "newkey1.newkey2": { oldValue: undefined, newValue: "someval" }};
        result = gpii.settingsHandlers.setSettings({settings: settings}, json);
        jqUnit.assertDeepEq("Non existing settings (multilevel)", exp,
            result.settings);
    };

    fluid.defaults("gpii.tests.settingsHandlerUtilities", {
        gradeNames: ["fluid.test.testEnvironment", "autoInit"],
        components: {
            tester: {
                type: "gpii.tests.settingsHandlerUtilitiesTester"
            }
        }
    });

    fluid.defaults("gpii.tests.settingsHandlerUtilitiesTester", {
        gradeNames: ["fluid.test.testCaseHolder", "autoInit"],
        modules: [{
            name: "settingsHandlers.setSettings",
            tests: [{
                expect: 3,
                name: "JSONHandler.set",
                func: "gpii.tests.settingsHandlersSetSettings"
            }]
        }]
    });

    if (kettle.tests.allTests) {
        module.exports = "gpii.tests.settingsHandlerUtilities";
    } else {
        fluid.test.runTests(["gpii.tests.settingsHandlerUtilities"]);
    }
}());
