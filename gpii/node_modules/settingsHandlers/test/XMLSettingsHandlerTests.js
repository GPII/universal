/*!
XML Settings Handler Tests

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, __dirname, setTimeout*/

(function () {
    // TODO: Rewrite all these tests into browser-style jqUnit tests, leaving just
    // a stub tester here to test filesystem integration

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii"),
        jqUnit = fluid.require("jqUnit"),
        fs = require("fs");

    require("settingsHandlers");

    var testTempFilePaths = [
        __dirname + "/data/XMLSettingsHandler/tmp1.xml",
        __dirname + "/data/XMLSettingsHandler/tmp2.xml"
    ];

    var deleteTestFiles = function () {
        fluid.each(testTempFilePaths, function (filePath) {
            if (fs.existsSync(filePath)) {
                fs.unlinkSync(filePath);
            }
        });
    };

    jqUnit.module("XMLSettingsHandler Tests", {
        teardown: deleteTestFiles
    });

    jqUnit.test("XMLHandler.applySettings", function () {
        //check simple json structure
        var result = gpii.settingsHandlers.XMLHandler.applySettings({ "key": "val1" }, { "key": "val2"});
        jqUnit.assertDeepEq("Simple setting", { key: { oldValue: 'val2', newValue: 'val1' } }, result);

        //complex json structure
        var json = {
            firstentry: {
                lvl2: {
                    key1: "vala",
                    key2: "valb"
                }
            },
            nextentry: {
                key3: "valc"
            }
        };
        var settings = {
            "firstentry.lvl2.key1": "newValue",
            "nextentry.key3": "otherNewValue"
        };
        var exp = {
            "firstentry.lvl2.key1": { oldValue: "vala", newValue: "newValue" },
            "nextentry.key3": { oldValue: "valc", newValue: "otherNewValue" }
        };
        result = gpii.settingsHandlers.XMLHandler.applySettings(settings, json);
        jqUnit.assertDeepEq("Multiple and nested settings", exp, result);

         //check applySettings for unset values
         json = {
            somekey: {
                somekey2: {
                    key1: "vala"
                }
            }
        };
        settings = {
            "newkey1.newkey2": "someval"
        };
        exp = { 'newkey1.newkey2': { oldValue: undefined, newValue: 'someval' }};
        result = gpii.settingsHandlers.XMLHandler.applySettings(settings, json);
        jqUnit.assertDeepEq("Non existing settings (multilevel)", exp, result);
    });

    // TODO: Improve naming.
    var payload2Options = {
        "filename": testTempFilePaths[1],
        "encoding": "utf-8",
        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "rules": {
            "testing.simpleArray.settings": {
                "expander": {
                    type: "fluid.model.transform.arrayToObject",
                    inputPath: "testing.simpleArray.settings",
                    key: "unique"
                }
            },
            "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting": {
                "expander": {
                    type: "fluid.model.transform.arrayToObject",
                    inputPath: "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting",
                    key: "name"
                }
            },
            "testing": "testing"
        }
    };

    var xmlHandlerXMLtoJSONSpec = [{
        xml: '<?xml version="1.0"?><testing><hello>world</hello><hello.to>another world</hello.to><with-params foo="bar" /><double><hello1 iam="here"/><hello2 iam="alsohere"><and>me as well</and></hello2></double><simpleArray><settings unique="ind1">hello indexed world</settings><settings unique="ind2">hello other indexed world</settings><settings unique="ind3">hello third indexed world</settings></simpleArray><Sociable.Launcher.Properties.Settings><setting name="GameResources" serializeAs="String"><value>C:\\Sociable\\Games\\Resources</value></setting><setting name="Resources" serializeAs="String" ><value>C:\\Sociable\\Games\\Resources\\Launcher</value></setting><setting name="AutoLogin" serializeAs="String"><value>0</value></setting></Sociable.Launcher.Properties.Settings></testing>',
        tests: [{
            expected: {
                testing: {
                    hello: {
                        $t: "world"
                    },
                    "hello.to": {
                        $t: "another world"
                    },
                    "with-params": {
                        foo: "bar"
                    },
                    "double": {
                        hello1: {
                            iam: "here"
                        },
                        hello2: {
                            iam: "alsohere",
                            and: {
                                $t: "me as well"
                            }
                        }
                    },
                    simpleArray: {
                        settings: [{
                            unique: "ind1",
                            $t: "hello indexed world"
                        }, {
                            unique: "ind2",
                            $t: "hello other indexed world"
                        }, {
                            unique: "ind3",
                            $t: "hello third indexed world"
                        }]
                    },
                    "Sociable.Launcher.Properties.Settings": {
                        setting: [{
                            name: "GameResources",
                            serializeAs: "String",
                            value: {
                                $t: "C:\\Sociable\\Games\\Resources"
                            }
                        }, {
                            name: "Resources",
                            serializeAs: "String",
                            value: {
                                $t: "C:\\Sociable\\Games\\Resources\\Launcher"
                            }
                        }, {
                            name: "AutoLogin",
                            serializeAs: "String",
                            value: {
                                $t: "0"
                            }
                        }]
                    }
                }
            }
        }, {
            expected: {
                testing: {
                    hello: {
                        $t: "world"
                    },
                    "hello.to": {
                        $t: "another world"
                    },
                    "with-params": {
                        foo: "bar"
                    },
                    "double": {
                        hello1: {
                            iam: "here"
                        },
                        hello2: {
                            iam: "alsohere",
                            and: {
                                $t: "me as well"
                            }
                        }
                    },
                    simpleArray: {
                        settings: {
                            ind1: {
                                $t: "hello indexed world"
                            },
                            ind2: {
                                $t: "hello other indexed world"
                            },
                            ind3: {
                                $t: "hello third indexed world"
                            }
                        }
                    },
                    "Sociable.Launcher.Properties.Settings": {
                        setting: {
                            GameResources: {
                                serializeAs: "String",
                                value: {
                                    $t: "C:\\Sociable\\Games\\Resources"
                                }
                            },
                            Resources: {
                                serializeAs: "String",
                                value: {
                                    $t: "C:\\Sociable\\Games\\Resources\\Launcher"
                                }
                            },
                            AutoLogin: {
                                serializeAs: "String",
                                value: {
                                    $t: "0"
                                }
                            }
                        }
                    }
                }
            },
            options: {
                rules: payload2Options.rules
            }
        }]
    }];

    function testXMLHandlerXMLtoJSON(spec) {
        fluid.each(spec.tests, function (test) {
            var actual = gpii.settingsHandlers.XMLHandler.XMLtoJSON(spec.xml, test.options);
            jqUnit.assertDeepEq("XMLHandler.XMLtoJSON correctly converts xml to json", test.expected, actual);
        });
    }
    jqUnit.test("XMLHandler.XMLtoJSON", function () {
        fluid.each(xmlHandlerXMLtoJSONSpec, testXMLHandlerXMLtoJSON);
    });

    var xmlHandlerJSONtoXMLSpec = [{
        tests: [{
            name: "no rules test",
            xml: '<?xml version="1.0" encoding="utf-8"?>\r\n<testing>\r\n  <hello>world</hello>\r\n  <hello.to>another world</hello.to>\r\n  <with-params foo="bar"/>\r\n  <double>\r\n    <hello1 iam="here"/>\r\n    <hello2 iam="alsohere">\r\n      <and>me as well</and>\r\n    </hello2>\r\n  </double>\r\n  <simpleArray>\r\n    <settings unique="ind1">hello indexed world</settings>\r\n    <settings unique="ind2">hello other indexed world</settings>\r\n    <settings unique="ind3">hello third indexed world</settings>\r\n  </simpleArray>\r\n  <Sociable.Launcher.Properties.Settings>\r\n    <setting serializeAs="String" name="GameResources">\r\n      <value>C:\\Sociable\\Games\\Resources</value>\r\n    </setting>\r\n    <setting serializeAs="String" name="Resources">\r\n      <value>C:\\Sociable\\Games\\Resources\\Launcher</value>\r\n    </setting>\r\n    <setting serializeAs="String" name="AutoLogin">\r\n      <value>0</value>\r\n    </setting>\r\n  </Sociable.Launcher.Properties.Settings>\r\n</testing>\r\n',
            json: {
                testing: {
                    hello: {
                        $t: "world"
                    },
                    "hello.to": {
                        $t: "another world"
                    },
                    "with-params": {
                        foo: "bar"
                    },
                    "double": {
                        hello1: {
                            iam: "here"
                        },
                        hello2: {
                            iam: "alsohere",
                            and: {
                                $t: "me as well"
                            }
                        }
                    },
                    simpleArray: {
                        settings: [{
                            unique: "ind1",
                            $t: "hello indexed world"
                        }, {
                            unique: "ind2",
                            $t: "hello other indexed world"
                        }, {
                            unique: "ind3",
                            $t: "hello third indexed world"
                        }]
                    },
                    "Sociable.Launcher.Properties.Settings": {
                        setting: [{
                            serializeAs: "String",
                            name: "GameResources",
                            value: {
                                $t: "C:\\Sociable\\Games\\Resources"
                            }
                        }, {
                            serializeAs: "String",
                            name: "Resources",
                            value: {
                                $t: "C:\\Sociable\\Games\\Resources\\Launcher"
                            }
                        }, {
                            serializeAs: "String",
                            name: "AutoLogin",
                            value: {
                                $t: "0"
                            }
                        }]
                    }
                }
            },
            options: {
                "xml-tag": '<?xml version="1.0" encoding="utf-8"?>'
            }
        }, {
            name: "with rules test",
            xml: '<?xml version="1.0" encoding="utf-8"?>\r\n<testing>\r\n  <hello>world</hello>\r\n  <hello.to>another world</hello.to>\r\n  <with-params foo="bar"/>\r\n  <double>\r\n    <hello1 iam="here"/>\r\n    <hello2 iam="alsohere">\r\n      <and>me as well</and>\r\n    </hello2>\r\n  </double>\r\n  <simpleArray>\r\n    <settings unique="ind1">hello indexed world</settings>\r\n    <settings unique="ind2">hello other indexed world</settings>\r\n    <settings unique="ind3">hello third indexed world</settings>\r\n  </simpleArray>\r\n  <Sociable.Launcher.Properties.Settings>\r\n    <setting name="GameResources" serializeAs="String">\r\n      <value>C:\\Sociable\\Games\\Resources</value>\r\n    </setting>\r\n    <setting name="Resources" serializeAs="String">\r\n      <value>C:\\Sociable\\Games\\Resources\\Launcher</value>\r\n    </setting>\r\n    <setting name="AutoLogin" serializeAs="String">\r\n      <value>0</value>\r\n    </setting>\r\n  </Sociable.Launcher.Properties.Settings>\r\n</testing>\r\n',
            json: {
                testing: {
                    hello: {
                        $t: "world"
                    },
                    "hello.to": {
                        $t: "another world"
                    },
                    "with-params": {
                        foo: "bar"
                    },
                    "double": {
                        hello1: {
                            iam: "here"
                        },
                        hello2: {
                            iam: "alsohere",
                            and: {
                                $t: "me as well"
                            }
                        }
                    },
                    simpleArray: {
                        settings: {
                            ind1: {
                                $t: "hello indexed world"
                            },
                            ind2: {
                                $t: "hello other indexed world"
                            },
                            ind3: {
                                $t: "hello third indexed world"
                            }
                        }
                    },
                    "Sociable.Launcher.Properties.Settings": {
                        setting: {
                            GameResources: {
                                serializeAs: "String",
                                value: {
                                    $t: "C:\\Sociable\\Games\\Resources"
                                }
                            },
                            Resources: {
                                serializeAs: "String",
                                value: {
                                    $t: "C:\\Sociable\\Games\\Resources\\Launcher"
                                }
                            },
                            AutoLogin: {
                                serializeAs: "String",
                                value: {
                                    $t: "0"
                                }
                            }
                        }
                    }
                }
            },
            options: {
                rules: payload2Options.rules,
                "xml-tag": '<?xml version="1.0" encoding="utf-8"?>'
            }
        }]
    }];

    function testXMLHandlerJSONtoXML(spec) {
        fluid.each(spec.tests, function (test) {
            var actual = gpii.settingsHandlers.XMLHandler.JSONtoXML(test.json, test.options);
            jqUnit.assertEquals("XMLHandler.JSONtoXML correctly converts json to xml (" + test.name + ")", test.xml, actual);
        });
    }
    jqUnit.test("XMLHandler.JSONtoXML", function () {
        fluid.each(xmlHandlerJSONtoXMLSpec, testXMLHandlerJSONtoXML);
    });

    jqUnit.test("XMLHandler.formatXml", function () {
        var xml = '<?xml version="1.0"?><testing><hello>world</hello><hello.to>another world</hello.to><with-params foo="bar"/><double><hello1 iam="here"/><hello2 iam="alsohere"><and>me as well</and></hello2></double><simpleArray><settings unique="ind1">hello indexed world</settings><settings unique="ind2">hello other indexed world</settings><settings unique="ind3">hello third indexed world</settings></simpleArray><Sociable.Launcher.Properties.Settings><setting name="GameResources" serializeAs="String"><value>C:\\Sociable\\Games\\Resources</value></setting><setting name="Resources" serializeAs="String"><value>C:\\Sociable\\Games\\Resources\\Launcher</value></setting><setting name="AutoLogin" serializeAs="String"><value>0</value></setting></Sociable.Launcher.Properties.Settings></testing>';
        var expected = '<?xml version="1.0"?>\r\n<testing>\r\n  <hello>world</hello>\r\n  <hello.to>another world</hello.to>\r\n  <with-params foo="bar"/>\r\n  <double>\r\n    <hello1 iam="here"/>\r\n    <hello2 iam="alsohere">\r\n      <and>me as well</and>\r\n    </hello2>\r\n  </double>\r\n  <simpleArray>\r\n    <settings unique="ind1">hello indexed world</settings>\r\n    <settings unique="ind2">hello other indexed world</settings>\r\n    <settings unique="ind3">hello third indexed world</settings>\r\n  </simpleArray>\r\n  <Sociable.Launcher.Properties.Settings>\r\n    <setting name="GameResources" serializeAs="String">\r\n      <value>C:\\Sociable\\Games\\Resources</value>\r\n    </setting>\r\n    <setting name="Resources" serializeAs="String">\r\n      <value>C:\\Sociable\\Games\\Resources\\Launcher</value>\r\n    </setting>\r\n    <setting name="AutoLogin" serializeAs="String">\r\n      <value>0</value>\r\n    </setting>\r\n  </Sociable.Launcher.Properties.Settings>\r\n</testing>\r\n'
        var formatted = gpii.settingsHandlers.XMLHandler.formatXml(xml);
        jqUnit.assertEquals("XMLHandler.formatXml correctly formats xml", expected, formatted);
    });

    var testXMLHandlerSetOperation = function (testSpec) {
        //read original XML and copy to a file we can mess up:
        var origXML = fs.readFileSync(testSpec.originalFilePath, "utf-8");
        fs.writeFileSync(testSpec.outputFilePath, origXML, "utf-8");
        //test return payload
        var returnPayload = gpii.settingsHandlers.XMLHandler.set(testSpec.payload);
        jqUnit.assertDeepEq(testSpec.name + ": Checking return payload for simple XML file: ", testSpec.expectedResult, returnPayload);

        //next check that the written XML file is as expected:
        var savedXML = fs.readFileSync(testSpec.outputFilePath, "utf-8");
        var expectedXML = fs.readFileSync(testSpec.expectedFilePath, "utf-8");
        jqUnit.assertEquals(testSpec.name + ": checking XML file: ", expectedXML, savedXML);
    };

    var xmlHandlerSetOperationTestSpecs = [
        {
            name: "Payload 1", // TODO: Give these tests meaningful names!
            originalFilePath: __dirname+"/data/XMLSettingsHandler/test1.xml",
            outputFilePath: testTempFilePaths[0],
            expectedFilePath: __dirname+"/data/XMLSettingsHandler/expected_output1.xml",

            payload: {
                "com.texthelp.readwritegold": [{
                    settings: {
                        "ApplicationSettings.IsEnterprise.$t": true,
                        "ApplicationSettings.SpeechInput.LanguageId.$t": 1
                    },
                    options: {
                        "filename": testTempFilePaths[0],
                        "encoding": "utf-8",
                        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                        "rules": {
                            "ApplicationSettings": "ApplicationSettings"
                        }
                    }
                }]
            },

            expectedResult: {
                'com.texthelp.readwritegold': [{
                    settings: {
                        'ApplicationSettings.IsEnterprise.$t': { oldValue: 'false', newValue: true },
                        'ApplicationSettings.SpeechInput.LanguageId.$t': { oldValue: '0', newValue: 1 }
                    },
                    options: {
                        "filename": testTempFilePaths[0],
                        "encoding": "utf-8",
                        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                        "rules": {
                            "ApplicationSettings": "ApplicationSettings"
                        }
                    }
                }]
            }
        },

        {
            name: "Payload 2", // TODO: Meaningful name!
            originalFilePath: __dirname+"/data/XMLSettingsHandler/test2.xml",
            outputFilePath: testTempFilePaths[1],
            expectedFilePath: __dirname+"/data/XMLSettingsHandler/expected_output2.xml",

            payload: {
                "setreq": [
                    {
                        settings: {
                            "testing.hello.$t": "space",
                            "testing.hello\\.to.$t": "another space",
                            "testing.new-variable.here": "KAPAW",
                            "testing.with-params.foo": "oof",
                            "testing.double.hello2.iam": "bond, james bond",
                            "testing.double.hello2.and.$t": "bond, james bond, jr",
                            "testing.simpleArray.settings.ind2.$t":"hello other indexed space",
                            "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.serializeAs": "New Value",
                            "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.value.$t": "10000"
                        },
                        options: payload2Options
                    }
                ]
            },

            expectedResult: {
                "setreq": [
                    {
                        settings: {
                            "testing.hello.$t": { oldValue: "world", newValue: "space" },
                            "testing.hello\\.to.$t": { oldValue: "another world", newValue: "another space" },
                            "testing.new-variable.here": { oldValue: undefined, newValue: "KAPAW" },
                            "testing.with-params.foo": { oldValue: "bar", newValue: "oof" },
                            "testing.double.hello2.iam": { oldValue: "alsohere", newValue: "bond, james bond" },
                            "testing.double.hello2.and.$t": { oldValue: "me as well", newValue: "bond, james bond, jr" },
                            "testing.simpleArray.settings.ind2.$t": { oldValue: "hello other indexed world", newValue: "hello other indexed space" },
                            "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.serializeAs": { oldValue: "String", newValue: "New Value" },
                            "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.value.$t": { oldValue: "0", newValue: "10000" }
                        },
                        options: payload2Options
                    }
                ]
            }
        }
    ];

    jqUnit.test("XMLHandler.set", function () {
        fluid.each(xmlHandlerSetOperationTestSpecs, testXMLHandlerSetOperation);
    });
}());