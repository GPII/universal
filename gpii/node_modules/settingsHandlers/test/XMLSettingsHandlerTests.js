/*!
XML Settings Handler Tests

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/ 

/*global require, __dirname, setTimeout,console */

(function () {
    // This loads universal.
     var fluid = require("infusion"),
         gpii = fluid.registerNamespace("gpii"),
         jqUnit = fluid.require("jqUnit"),
         fs = require("fs");

    require("testFramework");
    require("settingsHandlers");

    var XMLHandlerTester = gpii.tests.testEnvironment();


     XMLHandlerTester.asyncTest("Test Transformations with special pivot elements and escapes", function() {
        setTimeout(function() {
            var input = {
                "escaped.key": { 
                    "foo": [ {
                        "pivot.escaped": "pivot1",
                        "othervar1": "otherval1"            
                    }, {
                        "pivot.escaped": "pivot2",
                        "othervar2": "otherval2"            
                    }]
                }
            };
            var knownArrays = ["root.escaped\\.key.foo.pivot\\.escaped"];
            var expected = {
                "escaped.key": {
                    "foo": {
                        "pivot1": {
                            "othervar1": "otherval1"
                        },
                        "pivot2": {
                            "othervar2": "otherval2"
                        }
                    }
                }
            };
            var output = gpii.settingsHandlers.XMLHandler.transformArrays(fluid.copy(input), []);
            //without telling the system that the array key is the element "pivot"
            jqUnit.assertDeepEq("Without known arrays supplied - expect no change: ", input, output.root);
            jqUnit.assertDeepEq("Simple array paths correctly saved ", [], output.pathArray);
            //telling the syste there it's keyd by the pivot element:
            
            output = gpii.settingsHandlers.XMLHandler.transformArrays(fluid.copy(input), knownArrays);
            jqUnit.assertDeepEq("With known arrays supplied, expect transformation: ", expected, output.root);
            jqUnit.assertDeepEq("Array path should remain the same: ", knownArrays, output.pathArray);
            //reverting:
            var reverted = gpii.settingsHandlers.XMLHandler.revertArrays( { root: expected }, knownArrays);

            jqUnit.assertDeepEq("With known arrays supplied, expect transformation: ", input, reverted.root);
            jqUnit.assertDeepEq("Array path should remain the same: ", knownArrays, output.pathArray);
            
            jqUnit.start();
        }, 10);
    });

    XMLHandlerTester.asyncTest("Test transformations work as expected", function() {
        setTimeout(function() {
            var nochange = { 
                "var": [ {
                    "unknownPivot": "name1",
                    "othervar1": "otherval1"            
                }, {
                    "unknownPivot": "name2",
                    "othervar2": "otherval2"            
                }]
            };

            var input = [ {
                "name": "name1",
                "othervar1": "otherval1"            
            }, {
                "name": "name2",
                "othervar2": "otherval2"            
            }];
            var expected = {
                "name1": {
                    "othervar1": "otherval1"
                },
                "name2": {
                    "othervar2": "otherval2"
                }
            };

            var input2 = { 
                "deepObj": {
                    "key-here": "Hello world",
                    "array-key": input
                }
            };
            var expected2 = { 
                "deepObj": {
                    "key-here": "Hello world",                
                    "array-key": expected
                }
            };

            var input3 = 
            { 
                "outer": [
                {
                    "name": "outer1",
                    "outer1foo": "outer1bar"
                },
                {
                    "name": "outer2",
                    "outer2foo": "outer2bar"
                },
                {
                    "name": "outerSpecial",
                    "outerSpecialVar": 
                    [ {
                        "name": "inner1",
                        "inner1foo": "inner1bar"            
                    },
                    {
                        "name": "inner2",
                        "inner2foo": "inner2bar"            
                    }
                    ],
                    "outerSpecialOther": "outerSpecialVal"
                }]
            };
            var expected3 = { 
                "outer": {
                    "outer1": { 
                        "outer1foo": "outer1bar"
                    },
                    "outer2": { 
                        "outer2foo": "outer2bar"
                    },
                    "outerSpecial": { 
                        "outerSpecialVar": {
                            "inner1": {
                                "inner1foo": "inner1bar"
                            },
                            "inner2": {
                                "inner2foo": "inner2bar"
                            }  
                        },
                        "outerSpecialOther": "outerSpecialVal"
                    }
                }
            };
            var output0 = gpii.settingsHandlers.XMLHandler.transformArrays(fluid.copy(nochange), []);
            jqUnit.assertDeepEq("No array transformation: ", nochange, output0.root);

            var output = gpii.settingsHandlers.XMLHandler.transformArrays(fluid.copy(input), []);
            jqUnit.assertDeepEq("Simple array transformation: ", expected, output.root);
            jqUnit.assertDeepEq("Simple array paths correctly saved ", ["root.name"], output.pathArray);
            var reverted = gpii.settingsHandlers.XMLHandler.revertArrays( { root: fluid.copy(expected) }, fluid.copy(output.pathArray));
            jqUnit.assertDeepEq("Simple array transform back: ", input, reverted.root);

            var output2 = gpii.settingsHandlers.XMLHandler.transformArrays(fluid.copy(input2), []);
            jqUnit.assertDeepEq("Deep array transformation: ", expected2, output2.root);
            jqUnit.assertDeepEq("Deep array paths correctly saved ", ["root.deepObj.array-key.name"], output2.pathArray);
            var reverted2 = gpii.settingsHandlers.XMLHandler.revertArrays( { root: fluid.copy(expected2) }, fluid.copy(output2.pathArray));
            jqUnit.assertDeepEq("Deep array transform back: ", input2, reverted2.root);

            var output3 = gpii.settingsHandlers.XMLHandler.transformArrays(fluid.copy(input3), []);
            jqUnit.assertDeepEq("Nested array transformation: ", expected3, output3.root);
            jqUnit.assertDeepEq("Nested array paths correctly saved ", ["root.outer.name", "root.outer.outerSpecial.outerSpecialVar.name"], output3.pathArray);
            var reverted3 = gpii.settingsHandlers.XMLHandler.revertArrays( { root: fluid.copy(expected3) }, fluid.copy(output3.pathArray));
            jqUnit.assertDeepEq("Nested array transform back: ", input3, reverted3.root);  

            var output4 = gpii.settingsHandlers.XMLHandler.transformArrays(fluid.copy(input3), [ "invalid.path" ]);
            jqUnit.assertDeepEq("Nested array transformation with invalid knownArrays: ", expected3, output4.root);
            jqUnit.assertDeepEq("Nested array paths correctly saved (with invalid knownArrays) ", ["invalid.path", "root.outer.name", "root.outer.outerSpecial.outerSpecialVar.name"], output4.pathArray);
            jqUnit.start();
        }, 10);
    });

    XMLHandlerTester.asyncTest("XMLHandler.applySettings", function () {
        setTimeout(function() {
            //check simple json structure
            var result = gpii.settingsHandlers.XMLHandler.applySettings({ "key": "val1" }, { "key": "val2"});
            jqUnit.assertDeepEq("Simple setting", { key: { oldValue: 'val2', newValue: 'val1' } }, result);

            //complex json structure
            var json = {
                firstentry: {
                    lvl2: {
                        key1: "vala",
                        key2: "valb"
                    }
                },
                nextentry: {
                    key3: "valc"
                }
            };
            var settings = {
                "firstentry.lvl2.key1": "newValue",
                "nextentry.key3": "otherNewValue"
            };
            var exp = {
                "firstentry.lvl2.key1": { oldValue: "vala", newValue: "newValue" },
                "nextentry.key3": { oldValue: "valc", newValue: "otherNewValue" }
            };
            result = gpii.settingsHandlers.XMLHandler.applySettings(settings, json);
            jqUnit.assertDeepEq("Multiple and nested settings", exp, result);

            //check applySettings for unset values
            json = {
                somekey: {
                    somekey2: {
                        key1: "vala"
                    }
                }
            };
            settings = {
                "newkey1.newkey2": "someval"
            };
            exp = { 'newkey1.newkey2': { oldValue: undefined, newValue: 'someval' }};
            result = gpii.settingsHandlers.XMLHandler.applySettings(settings, json);
            jqUnit.assertDeepEq("Non existing settings (multilevel)", exp, result);
            jqUnit.start();
        }, 10);
    });

    var get1 = {
        request: {
            "getreq": [
                {
                    settings: {
                        "testing.hello.$t": null,
                        "testing.hello\\.to.$t": null,
                        "testing.with-params.foo": null
                    },
                    options: {
                        "filename": __dirname+"/data/XMLSettingsHandler/test1.xml",
                        "encoding": "utf-8",
                        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
                    }
                }
            ]
        },
        expected: {
            "getreq": [
                {
                    settings: {
                        "testing.hello.$t": "world",
                        "testing.hello\\.to.$t": "another world",
                        "testing.with-params.foo": "bar"
                    },
                    options: {
                        "filename": __dirname+"/data/XMLSettingsHandler/test1.xml",
                        "encoding": "utf-8",
                        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                        "pathArray": [ "root.testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.name" ],
                        "knownArrays": [ ]
                    }
                }
            ] 
        }
    };

    var get2 = {
        request: {
            "getreq": [
                {
                    settings: {
                        "testing.double": null
                    },
                    options: {
                        "filename": __dirname+"/data/XMLSettingsHandler/test1.xml",
                        "encoding": "utf-8",
                        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
                    }
                }
            ]
        },
        expected: {
            "getreq": [
                {
                    settings: {
                        "testing.double.hello1.iam": "here",
                        "testing.double.hello2.iam": "alsohere",
                        "testing.double.hello2.and.$t": "me as well"
                    },
                    options: {
                        "filename": __dirname+"/data/XMLSettingsHandler/test1.xml",
                        "encoding": "utf-8",
                        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                        "knownArrays": [ ],
                        "pathArray": [ "root.testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.name" ]
                    }
                }
            ] 
        }
    };

    var get3 = {
        request: {
            "getreq": [
                {
                    settings: {
                        "testing.simpleArray": null,
                        "testing.Sociable\\.Launcher\\.Properties\\.Settings": null
                    },
                    options: {
                        "filename": __dirname+"/data/XMLSettingsHandler/test1.xml",
                        "encoding": "utf-8",
                        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                        "knownArrays": [ "root.testing.simpleArray.settings.unique" ]
                    }
                }
            ]
        },
        expected: {
            "getreq": [
                {
                    settings: {
                        "testing.simpleArray.settings.ind1.$t":"hello indexed world",
                        "testing.simpleArray.settings.ind2.$t":"hello other indexed world",
                        "testing.simpleArray.settings.ind3.$t":"hello third indexed world",
                        "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.GameResources.serializeAs": "String",
                        "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.GameResources.value.$t": "C:\\Sociable\\Games\\Resources",
                        "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.Resources.serializeAs": "String",
                        "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.Resources.value.$t": "C:\\Sociable\\Games\\Resources\\Launcher",
                        "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.serializeAs": "String",
                        "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.value.$t": "0"
                    },
                    options: {
                        "filename": __dirname+"/data/XMLSettingsHandler/test1.xml",
                        "encoding": "utf-8",
                        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                        "knownArrays": [ "root.testing.simpleArray.settings.unique" ],
                        "pathArray": [ "root.testing.simpleArray.settings.unique", "root.testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.name" ]
                    }
                }
            ] 
        }
    };

    XMLHandlerTester.asyncTest("XMLHandler.get", function () {
        setTimeout(function() {
            var returnPayload = gpii.settingsHandlers.XMLHandler.get(get1.request);
            jqUnit.assertDeepEq("simple request with value:null ", get1.expected, returnPayload);

            var returnPayload2 = gpii.settingsHandlers.XMLHandler.get(get2.request);
            jqUnit.assertDeepEq("deep request with value:null ", get2.expected, returnPayload2);

            var returnPayload3 = gpii.settingsHandlers.XMLHandler.get(get3.request);
            jqUnit.assertDeepEq("deep request with transformations: ", get3.expected, returnPayload3);
            jqUnit.start();
        }, 10);
    });

    XMLHandlerTester.asyncTest("XMLHandler.set", function () {
        setTimeout(function() {
            var payload = {
                "com.texthelp.readwritegold": [{
                    settings: {
                        "ApplicationSettings.IsEnterprise.$t": true,
                        "ApplicationSettings.SpeechInput.LanguageId.$t": 1
                    },
                    options: {
                        "filename": __dirname+"/data/XMLSettingsHandler/input1.xml",
                        "encoding": "utf-8",
                        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
                    }
                }]
            };
            var expectedResult = {
                'com.texthelp.readwritegold': [{
                    settings: {
                        'ApplicationSettings.IsEnterprise.$t': { oldValue: 'false', newValue: true },
                        'ApplicationSettings.SpeechInput.LanguageId.$t': { oldValue: '0', newValue: 1 }
                    },
                    options: {
                        "filename": __dirname+"/data/XMLSettingsHandler/input1.xml",
                        "encoding": "utf-8",
                        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                        "pathArray": []
                    }
                }]

            };
            //read original XML and copy to a file we can mess up:
            var origXML = fs.readFileSync(__dirname+"/data/XMLSettingsHandler/data1.xml", "utf-8");
            fs.writeFileSync(__dirname+"/data/XMLSettingsHandler/input1.xml", origXML, "utf-8");
            //test return payload
            var returnPayload = gpii.settingsHandlers.XMLHandler.set(payload);
            // console.log(JSON.stringify(expectedResult)+"\n===="+JSON.stringify(returnPayload))
            jqUnit.assertDeepEq("Checking return payload for simple XML file: ", expectedResult, returnPayload);

            //next check that the written XML file is as expected:
            var savedXML = fs.readFileSync(__dirname+"/data/XMLSettingsHandler/input1.xml", "utf-8");
            var expectedXML = fs.readFileSync(__dirname+"/data/XMLSettingsHandler/expected_output1.xml", "utf-8");
            jqUnit.assertEquals("checking XML file: ", expectedXML, savedXML);

            //Test with array transformations and escaped paths:
            var payload2 = {
                "setreq": [                {
                    settings: {
                        "testing.hello.$t": "space",
                        "testing.hello\\.to.$t": "another space",
                        "testing.new-variable.here": "KAPAW",
                        "testing.with-params.foo": "oof",
                        "testing.double.hello2.iam": "bond, james bond",
                        "testing.double.hello2.and.$t": "bond, james bond, jr",
                        "testing.simpleArray.settings.ind2.$t":"hello other indexed space",
                        "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.serializeAs": "New Value",
                        "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.value.$t": "10000"
                    },
                    options: {
                        "filename": __dirname+"/data/XMLSettingsHandler/tmp1.xml",
                        "encoding": "utf-8",
                        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                        "knownArrays": [ "root.testing.simpleArray.settings.unique" ]
                    }
                }]
            };
            var expected2 = {
                "setreq": [                {
                    settings: {
                        "testing.hello.$t": { oldValue: "world", newValue: "space" },
                        "testing.hello\\.to.$t": { oldValue: "another world", newValue: "another space" },
                        "testing.new-variable.here": { oldValue: undefined, newValue: "KAPAW" },
                        "testing.with-params.foo": { oldValue: "bar", newValue: "oof" },
                        "testing.double.hello2.iam": { oldValue: "alsohere", newValue: "bond, james bond" },
                        "testing.double.hello2.and.$t": { oldValue: "me as well", newValue: "bond, james bond, jr" },
                        "testing.simpleArray.settings.ind2.$t": { oldValue: "hello other indexed world", newValue: "hello other indexed space" },
                        "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.serializeAs": { oldValue: "String", newValue: "New Value" },
                        "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.value.$t": { oldValue: "0", newValue: "10000" }
                    },
                    options: {
                        "filename": __dirname+"/data/XMLSettingsHandler/tmp1.xml",
                        "encoding": "utf-8",
                        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                        "knownArrays": [ "root.testing.simpleArray.settings.unique" ],
                        "pathArray": [ "root.testing.simpleArray.settings.unique", "root.testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.name" ]
                    }
                }]
            };
            var xml2 = fs.readFileSync(__dirname+"/data/XMLSettingsHandler/test1.xml", "utf-8");
            //create new file we can mess up:
            fs.writeFileSync(__dirname+"/data/XMLSettingsHandler/tmp1.xml", xml2, "utf-8");

            //test return payload
            var returnPayload2 = gpii.settingsHandlers.XMLHandler.set(payload2);
            jqUnit.assertDeepEq("Checking return payload for complex XML file: ", expected2, returnPayload2);
            console.log()
            //next check that the written XML file is as expected:
            var savedXML = fs.readFileSync(__dirname+"/data/XMLSettingsHandler/tmp1.xml", "utf-8");
            var expectedXML = fs.readFileSync(__dirname+"/data/XMLSettingsHandler/expected_test1.xml", "utf-8");
            //ignore whitespaces when comparing strings
            jqUnit.assertEquals("checking XML file: ", expectedXML.replace(/\s+/g, ''), savedXML.replace(/\s+/g, ''));

            jqUnit.start();
        }, 10);
    });
}());