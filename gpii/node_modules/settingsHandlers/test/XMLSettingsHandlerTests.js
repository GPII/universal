/*
 * XML Settings Handler Tests
 *
 * Copyright 2012 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

    // TODO: Rewrite all these tests into browser-style jqUnit tests, leaving just
    // a stub tester here to test filesystem integration

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii"),
    jqUnit = fluid.registerNamespace("jqUnit"),
    kettle = require("kettle"),
    fs = require("fs");

fluid.registerNamespace("gpii.tests");

kettle.loadTestingSupport();

require("settingsHandlers");

var testTempFilePaths = [
    __dirname + "/data/XMLSettingsHandler/tmp1.xml",
    __dirname + "/data/XMLSettingsHandler/tmp2.xml"
];

var deleteTestFiles = function () {
    fluid.each(testTempFilePaths, function (filePath) {
        if (fs.existsSync(filePath)) {
            fs.unlinkSync(filePath);
        }
    });
};

// TODO: Improve naming.
var payload2Options = {
    "filename": testTempFilePaths[1],
    "encoding": "utf-8",
    "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
    "rules": {
        "testing.simpleArray.settings": {
            "transform": {
                type: "fluid.transforms.indexArrayByKey",
                inputPath: "testing.simpleArray.settings",
                key: "unique"
            }
        },
        "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting": {
            "transform": {
                type: "fluid.transforms.indexArrayByKey",
                inputPath: "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting",
                key: "name"
            }
        },
        "testing": "testing"
    }
};

var xmlHandlerXMLtoJSONSpec = [{
    xml: "<?xml version=\"1.0\"?><testing><hello>world</hello><hello.to>another world</hello.to><with-params foo=\"bar\" /><double><hello1 iam=\"here\"/><hello2 iam=\"alsohere\"><and>me as well</and></hello2></double><simpleArray><settings unique=\"ind1\">hello indexed world</settings><settings unique=\"ind2\">hello other indexed world</settings><settings unique=\"ind3\">hello third indexed world</settings></simpleArray><Sociable.Launcher.Properties.Settings><setting name=\"GameResources\" serializeAs=\"String\"><value>C:\\Sociable\\Games\\Resources</value></setting><setting name=\"Resources\" serializeAs=\"String\" ><value>C:\\Sociable\\Games\\Resources\\Launcher</value></setting><setting name=\"AutoLogin\" serializeAs=\"String\"><value>0</value></setting></Sociable.Launcher.Properties.Settings></testing>",
    tests: [{
        expected: {
            testing: {
                hello: {
                    $t: "world"
                },
                "hello.to": {
                    $t: "another world"
                },
                "with-params": {
                    foo: "bar"
                },
                "double": {
                    hello1: {
                        iam: "here"
                    },
                    hello2: {
                        iam: "alsohere",
                        and: {
                            $t: "me as well"
                        }
                    }
                },
                simpleArray: {
                    settings: [{
                        unique: "ind1",
                        $t: "hello indexed world"
                    }, {
                        unique: "ind2",
                        $t: "hello other indexed world"
                    }, {
                        unique: "ind3",
                        $t: "hello third indexed world"
                    }]
                },
                "Sociable.Launcher.Properties.Settings": {
                    setting: [{
                        name: "GameResources",
                        serializeAs: "String",
                        value: {
                            $t: "C:\\Sociable\\Games\\Resources"
                        }
                    }, {
                        name: "Resources",
                        serializeAs: "String",
                        value: {
                            $t: "C:\\Sociable\\Games\\Resources\\Launcher"
                        }
                    }, {
                        name: "AutoLogin",
                        serializeAs: "String",
                        value: {
                            $t: "0"
                        }
                    }]
                }
            }
        }
    }, {
        expected: {
            testing: {
                hello: {
                    $t: "world"
                },
                "hello.to": {
                    $t: "another world"
                },
                "with-params": {
                    foo: "bar"
                },
                "double": {
                    hello1: {
                        iam: "here"
                    },
                    hello2: {
                        iam: "alsohere",
                        and: {
                            $t: "me as well"
                        }
                    }
                },
                simpleArray: {
                    settings: {
                        ind1: {
                            $t: "hello indexed world"
                        },
                        ind2: {
                            $t: "hello other indexed world"
                        },
                        ind3: {
                            $t: "hello third indexed world"
                        }
                    }
                },
                "Sociable.Launcher.Properties.Settings": {
                    setting: {
                        GameResources: {
                            serializeAs: "String",
                            value: {
                                $t: "C:\\Sociable\\Games\\Resources"
                            }
                        },
                        Resources: {
                            serializeAs: "String",
                            value: {
                                $t: "C:\\Sociable\\Games\\Resources\\Launcher"
                            }
                        },
                        AutoLogin: {
                            serializeAs: "String",
                            value: {
                                $t: "0"
                            }
                        }
                    }
                }
            }
        },
        options: {
            rules: payload2Options.rules
        }
    }]
}];

function testXMLHandlerXMLtoJSON(spec) {
    fluid.each(spec.tests, function (test) {
        var actual = gpii.settingsHandlers.XMLHandler.parser.parse(spec.xml, test.options);
        jqUnit.assertDeepEq("XMLHandler.parser.parse correctly converts xml to json", test.expected, actual);
    });
}

var xmlHandlerJSONtoXMLSpec = [{
    tests: [{
        name: "no rules test",
        xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<testing>\r\n  <hello>world</hello>\r\n  <hello.to>another world</hello.to>\r\n  <with-params foo=\"bar\"/>\r\n  <double>\r\n    <hello1 iam=\"here\"/>\r\n    <hello2 iam=\"alsohere\">\r\n      <and>me as well</and>\r\n    </hello2>\r\n  </double>\r\n  <simpleArray>\r\n    <settings unique=\"ind1\">hello indexed world</settings>\r\n    <settings unique=\"ind2\">hello other indexed world</settings>\r\n    <settings unique=\"ind3\">hello third indexed world</settings>\r\n  </simpleArray>\r\n  <Sociable.Launcher.Properties.Settings>\r\n    <setting serializeAs=\"String\" name=\"GameResources\">\r\n      <value>C:\\Sociable\\Games\\Resources</value>\r\n    </setting>\r\n    <setting serializeAs=\"String\" name=\"Resources\">\r\n      <value>C:\\Sociable\\Games\\Resources\\Launcher</value>\r\n    </setting>\r\n    <setting serializeAs=\"String\" name=\"AutoLogin\">\r\n      <value>0</value>\r\n    </setting>\r\n  </Sociable.Launcher.Properties.Settings>\r\n</testing>\r\n",
        json: {
            testing: {
                hello: {
                    $t: "world"
                },
                "hello.to": {
                    $t: "another world"
                },
                "with-params": {
                    foo: "bar"
                },
                "double": {
                    hello1: {
                        iam: "here"
                    },
                    hello2: {
                        iam: "alsohere",
                        and: {
                            $t: "me as well"
                        }
                    }
                },
                simpleArray: {
                    settings: [{
                        unique: "ind1",
                        $t: "hello indexed world"
                    }, {
                        unique: "ind2",
                        $t: "hello other indexed world"
                    }, {
                        unique: "ind3",
                        $t: "hello third indexed world"
                    }]
                },
                "Sociable.Launcher.Properties.Settings": {
                    setting: [{
                        serializeAs: "String",
                        name: "GameResources",
                        value: {
                            $t: "C:\\Sociable\\Games\\Resources"
                        }
                    }, {
                        serializeAs: "String",
                        name: "Resources",
                        value: {
                            $t: "C:\\Sociable\\Games\\Resources\\Launcher"
                        }
                    }, {
                        serializeAs: "String",
                        name: "AutoLogin",
                        value: {
                            $t: "0"
                        }
                    }]
                }
            }
        },
        options: {
            "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
        }
    }, {
        name: "with rules test",
        xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<testing>\r\n  <hello>world</hello>\r\n  <hello.to>another world</hello.to>\r\n  <with-params foo=\"bar\"/>\r\n  <double>\r\n    <hello1 iam=\"here\"/>\r\n    <hello2 iam=\"alsohere\">\r\n      <and>me as well</and>\r\n    </hello2>\r\n  </double>\r\n  <simpleArray>\r\n    <settings unique=\"ind1\">hello indexed world</settings>\r\n    <settings unique=\"ind2\">hello other indexed world</settings>\r\n    <settings unique=\"ind3\">hello third indexed world</settings>\r\n  </simpleArray>\r\n  <Sociable.Launcher.Properties.Settings>\r\n    <setting name=\"GameResources\" serializeAs=\"String\">\r\n      <value>C:\\Sociable\\Games\\Resources</value>\r\n    </setting>\r\n    <setting name=\"Resources\" serializeAs=\"String\">\r\n      <value>C:\\Sociable\\Games\\Resources\\Launcher</value>\r\n    </setting>\r\n    <setting name=\"AutoLogin\" serializeAs=\"String\">\r\n      <value>0</value>\r\n    </setting>\r\n  </Sociable.Launcher.Properties.Settings>\r\n</testing>\r\n",
        json: {
            testing: {
                hello: {
                    $t: "world"
                },
                "hello.to": {
                    $t: "another world"
                },
                "with-params": {
                    foo: "bar"
                },
                "double": {
                    hello1: {
                        iam: "here"
                    },
                    hello2: {
                        iam: "alsohere",
                        and: {
                            $t: "me as well"
                        }
                    }
                },
                simpleArray: {
                    settings: {
                        ind1: {
                            $t: "hello indexed world"
                        },
                        ind2: {
                            $t: "hello other indexed world"
                        },
                        ind3: {
                            $t: "hello third indexed world"
                        }
                    }
                },
                "Sociable.Launcher.Properties.Settings": {
                    setting: {
                        GameResources: {
                            serializeAs: "String",
                            value: {
                                $t: "C:\\Sociable\\Games\\Resources"
                            }
                        },
                        Resources: {
                            serializeAs: "String",
                            value: {
                                $t: "C:\\Sociable\\Games\\Resources\\Launcher"
                            }
                        },
                        AutoLogin: {
                            serializeAs: "String",
                            value: {
                                $t: "0"
                            }
                        }
                    }
                }
            }
        },
        options: {
            rules: payload2Options.rules,
            "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
        }
    }]
}];

function testXMLHandlerJSONtoXML(spec) {
    fluid.each(spec.tests, function (test) {
        var actual = gpii.settingsHandlers.XMLHandler.parser.stringify(test.json, test.options);
        jqUnit.assertEquals("XMLHandler.parser.stringify correctly converts json to xml (" + test.name + ")", test.xml, actual);
    });
}

var xmlHandlerOperationTestSpecs = [
    {
        name: "Payload 1", // TODO: Give these tests meaningful names!
        originalFilePath: __dirname + "/data/XMLSettingsHandler/test1.xml",
        outputFilePath: testTempFilePaths[0],
        expectedFilePath: __dirname + "/data/XMLSettingsHandler/expected_output1.xml",
        set: {
            payload: {
                "com.texthelp.readwritegold": [{
                    settings: {
                        "ApplicationSettings.IsEnterprise.$t": true,
                        "ApplicationSettings.SpeechInput.LanguageId.$t": 1
                    },
                    options: {
                        "filename": testTempFilePaths[0],
                        "encoding": "utf-8",
                        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                        "rules": {
                            "ApplicationSettings": "ApplicationSettings"
                        }
                    }
                }]
            },
            expectedResult: {
                "com.texthelp.readwritegold": [{
                    settings: {
                        "ApplicationSettings.IsEnterprise.$t": { oldValue: "false", newValue: true },
                        "ApplicationSettings.SpeechInput.LanguageId.$t": { oldValue: "0", newValue: 1 }
                    },
                    options: {
                        "filename": testTempFilePaths[0],
                        "encoding": "utf-8",
                        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                        "rules": {
                            "ApplicationSettings": "ApplicationSettings"
                        }
                    }
                }]
            }
        },
        get: {
            payload: {
                "com.texthelp.readwritegold": [{
                    settings: {
                        "ApplicationSettings.IsEnterprise.$t": null,
                        "ApplicationSettings.SpeechInput.LanguageId.$t": null
                    },
                    options: {
                        "filename": testTempFilePaths[0],
                        "encoding": "utf-8",
                        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                        "rules": {
                            "ApplicationSettings": "ApplicationSettings"
                        }
                    }
                }]
            },
            expectedResult: {
                "com.texthelp.readwritegold": [{
                    settings: {
                        "ApplicationSettings.IsEnterprise.$t": "false",
                        "ApplicationSettings.SpeechInput.LanguageId.$t": "0"
                    }
                }]
            }
        }
    },
    {
        name: "Payload 2", // TODO: Meaningful name!
        originalFilePath: __dirname + "/data/XMLSettingsHandler/test2.xml",
        outputFilePath: testTempFilePaths[1],
        expectedFilePath: __dirname + "/data/XMLSettingsHandler/expected_output2.xml",
        set: {
            payload: {
                "setreq": [
                    {
                        settings: {
                            "testing.hello.$t": "space",
                            "testing.hello\\.to.$t": "another space",
                            "testing.new-variable.here": "KAPAW",
                            "testing.with-params.foo": "oof",
                            "testing.double.hello2.iam": "bond, james bond",
                            "testing.double.hello2.and.$t": "bond, james bond, jr",
                            "testing.simpleArray.settings.ind2.$t": "hello other indexed space",
                            "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.serializeAs": "New Value",
                            "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.value.$t": "10000"
                        },
                        options: payload2Options
                    }
                ]
            },

            expectedResult: {
                "setreq": [
                    {
                        settings: {
                            "testing.hello.$t": { oldValue: "world", newValue: "space" },
                            "testing.hello\\.to.$t": { oldValue: "another world", newValue: "another space" },
                            "testing.new-variable.here": { oldValue: undefined, newValue: "KAPAW" },
                            "testing.with-params.foo": { oldValue: "bar", newValue: "oof" },
                            "testing.double.hello2.iam": { oldValue: "alsohere", newValue: "bond, james bond" },
                            "testing.double.hello2.and.$t": { oldValue: "me as well", newValue: "bond, james bond, jr" },
                            "testing.simpleArray.settings.ind2.$t": { oldValue: "hello other indexed world", newValue: "hello other indexed space" },
                            "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.serializeAs": { oldValue: "String", newValue: "New Value" },
                            "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.value.$t": { oldValue: "0", newValue: "10000" }
                        },
                        options: payload2Options
                    }
                ]
            }
        },
        get: {
            payload: {
                "setreq": [
                    {
                        settings: {
                            "testing.hello.$t": null,
                            "testing.hello\\.to.$t": null,
                            "testing.new-variable.here": null,
                            "testing.with-params.foo": null,
                            "testing.double.hello2.iam": null,
                            "testing.double.hello2.and.$t": null,
                            "testing.simpleArray.settings.ind2.$t": null,
                            "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.serializeAs": null,
                            "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.value.$t": null
                        },
                        options: payload2Options
                    }
                ]
            },

            expectedResult: {
                "setreq": [
                    {
                        settings: {
                            "testing.hello.$t": "world",
                            "testing.hello\\.to.$t": "another world",
                            "testing.new-variable.here": undefined,
                            "testing.with-params.foo": "bar",
                            "testing.double.hello2.iam": "alsohere",
                            "testing.double.hello2.and.$t": "me as well",
                            "testing.simpleArray.settings.ind2.$t": "hello other indexed world",
                            "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.serializeAs": "String",
                            "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.value.$t": "0"
                        }
                    }
                ]
            }
        }
    }
];

var testXMLHandlerGetOperation = function (testSpec) {
    // read original XML and copy to file from options:
    var origXML = fs.readFileSync(testSpec.originalFilePath, "utf-8");
    fs.writeFileSync(testSpec.outputFilePath, origXML, "utf-8");
    var returnPayload = gpii.settingsHandlers.XMLHandler.get(testSpec.get.payload);
    jqUnit.assertDeepEq(testSpec.name + ": Checking return payload", testSpec.get.expectedResult, returnPayload);
};

var testXMLHandlerSetOperation = function (testSpec) {
    // read original XML and copy to a file we can mess up:
    var origXML = fs.readFileSync(testSpec.originalFilePath, "utf-8");
    fs.writeFileSync(testSpec.outputFilePath, origXML, "utf-8");
    // test return payload
    var returnPayload = gpii.settingsHandlers.XMLHandler.set(testSpec.set.payload);
    jqUnit.assertDeepEq(testSpec.name + ": Checking return payload for simple XML file: ", testSpec.set.expectedResult, returnPayload);

    // next check that the written XML file is as expected:
    var savedXML = fs.readFileSync(testSpec.outputFilePath, "utf-8");
    var expectedXML = fs.readFileSync(testSpec.expectedFilePath, "utf-8");
    jqUnit.assertEquals(testSpec.name + ": checking XML file: ", expectedXML, savedXML);
};

gpii.tests.XMLHandlerSet = function () {
    fluid.each(xmlHandlerOperationTestSpecs, testXMLHandlerSetOperation);
};

gpii.tests.XMLHandlerGet = function () {
    fluid.each(xmlHandlerOperationTestSpecs, testXMLHandlerGetOperation);
};

gpii.tests.XMLHandlerParserParse = function () {
    fluid.each(xmlHandlerXMLtoJSONSpec, testXMLHandlerXMLtoJSON);
};

gpii.tests.XMLHandlerParserStringify = function () {
    fluid.each(xmlHandlerJSONtoXMLSpec, testXMLHandlerJSONtoXML);
};

gpii.tests.XMLHandlerFormatXml = function () {
    var xml = "<?xml version=\"1.0\"?><testing><hello>world</hello><hello.to>another world</hello.to><with-params foo=\"bar\"/><double><hello1 iam=\"here\"/><hello2 iam=\"alsohere\"><and>me as well</and></hello2></double><simpleArray><settings unique=\"ind1\">hello indexed world</settings><settings unique=\"ind2\">hello other indexed world</settings><settings unique=\"ind3\">hello third indexed world</settings></simpleArray><Sociable.Launcher.Properties.Settings><setting name=\"GameResources\" serializeAs=\"String\"><value>C:\\Sociable\\Games\\Resources</value></setting><setting name=\"Resources\" serializeAs=\"String\"><value>C:\\Sociable\\Games\\Resources\\Launcher</value></setting><setting name=\"AutoLogin\" serializeAs=\"String\"><value>0</value></setting></Sociable.Launcher.Properties.Settings></testing>";
    var expected = "<?xml version=\"1.0\"?>\r\n<testing>\r\n  <hello>world</hello>\r\n  <hello.to>another world</hello.to>\r\n  <with-params foo=\"bar\"/>\r\n  <double>\r\n    <hello1 iam=\"here\"/>\r\n    <hello2 iam=\"alsohere\">\r\n      <and>me as well</and>\r\n    </hello2>\r\n  </double>\r\n  <simpleArray>\r\n    <settings unique=\"ind1\">hello indexed world</settings>\r\n    <settings unique=\"ind2\">hello other indexed world</settings>\r\n    <settings unique=\"ind3\">hello third indexed world</settings>\r\n  </simpleArray>\r\n  <Sociable.Launcher.Properties.Settings>\r\n    <setting name=\"GameResources\" serializeAs=\"String\">\r\n      <value>C:\\Sociable\\Games\\Resources</value>\r\n    </setting>\r\n    <setting name=\"Resources\" serializeAs=\"String\">\r\n      <value>C:\\Sociable\\Games\\Resources\\Launcher</value>\r\n    </setting>\r\n    <setting name=\"AutoLogin\" serializeAs=\"String\">\r\n      <value>0</value>\r\n    </setting>\r\n  </Sociable.Launcher.Properties.Settings>\r\n</testing>\r\n";
    var formatted = gpii.settingsHandlers.XMLHandler.formatXml(xml);
    jqUnit.assertEquals("XMLHandler.formatXml correctly formats xml", expected, formatted);
};

fluid.defaults("gpii.tests.XMLSettingsHandler", {
    gradeNames: ["fluid.test.testEnvironment"],
    components: {
        tester: {
            type: "gpii.tests.XMLSettingsHandlerTester"
        }
    }
});

fluid.defaults("gpii.tests.XMLSettingsHandlerTester", {
    gradeNames: ["fluid.test.testCaseHolder"],
    listeners: {
        onDestroy: deleteTestFiles
    },
    modules: [{
        name: "XMLSettingsHandler",
        tests: [{
            expect: 4,
            name: "XMLHandler.set",
            func: "gpii.tests.XMLHandlerSet"
        }, {
            expect: 2,
            name: "XMLHandler.get",
            func: "gpii.tests.XMLHandlerGet"
        }, {
            expect: 2,
            name: "XMLHandler.parser.parse",
            func: "gpii.tests.XMLHandlerParserParse"
        }, {
            expect: 2,
            name: "XMLHandler.parser.stringify",
            func: "gpii.tests.XMLHandlerParserStringify"
        }, {
            expect: 1,
            name: "XMLHandler.FormatXml",
            func: "gpii.tests.XMLHandlerFormatXml"
        }]
    }]
});

module.exports = kettle.test.bootstrap("gpii.tests.XMLSettingsHandler");
