/*!
XML Settings Handler Tests

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, __dirname, setTimeout*/

(function () {
    // TODO: Rewrite all these tests into browser-style jqUnit tests, leaving just
    // a stub tester here to test filesystem integration
  
    var fluid = require("infusion"),
         gpii = fluid.registerNamespace("gpii"),
         jqUnit = fluid.require("jqUnit"),
         fs = require("fs");

    require("testFramework");
    require("settingsHandlers");

    var testTempFilePaths = [
        __dirname + "/data/XMLSettingsHandler/tmp1.xml",
        __dirname + "/data/XMLSettingsHandler/tmp2.xml"
    ];
    
    var deleteTestFiles = function () {
        fluid.each(testTempFilePaths, function (filePath) {
            fs.unlink(filePath);
        });
    };
    
    var XMLHandlerTester = gpii.tests.testEnvironment();
    XMLHandlerTester.module("XMLSettingsHandler Tests", {
        teardown: deleteTestFiles
    });
    
    var basicArrayTest = {
        raw: {
            a: {
                c: [ 
                { name: "c1", val: "vc1" },
                { name: "c2", val: "vc2" }
                ]
            }
        }, 
        rules: {
            "a.c": {
                "expander": {
                    type: "gpii.settingsHandlers.XMLHandler.arrayToObject",
                    inputPath: "a.c",
                    options: {
                        key: "name"
                    }
                }
            }
        },
        expected: {                
            a: {
                c: {
                    c1: { val: "vc1" },
                    c2: { val: "vc2" }
                } 
            }
        },
        invertedRules: {
            expander: [ 
            {
                type: "gpii.settingsHandlers.XMLHandler.objectToArray",
                inputPath: "a.c",
                outputPath: "a.c",
                options: {
                    key: "name"
                }
            }
            ]
        }        
    };
    var complexArrayTest = {
        raw: {
            b: {
                b1: "hello",
                b2: "hello"
            },
            a: {
                "dotted.key": [ 
                { "uni.que": "u.q1", val: { first: "vc1.1", second: "vc1.2" }},
                { "uni.que": "u.q2", val: { first: "vc2.1", second: "vc2.2" }}
                ]
            }
        }, 
        rules: {
            b: "b",
            "c.dotted\\.key": {
                "expander": {
                    type: "gpii.settingsHandlers.XMLHandler.arrayToObject",
                    inputPath: "a.dotted\\.key",
                    options: {
                        key: "uni.que"
                    }
                }
            }
        },
        expected: {
            b: {
                b1: "hello",
                b2: "hello"
            },
            c: {
                "dotted.key": {
                    "u.q1": { val: { first: "vc1.1", second: "vc1.2" } },
                    "u.q2": { val: { first: "vc2.1", second: "vc2.2" } }
                } 
            }
        },
        invertedRules: {
            expander: [ 
            { 
                type: 'fluid.model.transform.value',
                inputPath: 'b',
                outputPath: 'b' 
            },{
                type: "gpii.settingsHandlers.XMLHandler.objectToArray",
                inputPath: "c.dotted\\.key",
                outputPath: "a.dotted\\.key",
                options: {
                    key: "uni.que"
                }
            }
            ]
        }
    };

    var nestedArrayTest = {
        raw: {
            outer: [
            { 
                outerpivot: "outerkey1",
                outervar:  [
                {
                    innerpivot: "innerkey1.1",
                    innervar: "innerval1.1.1",
                    innervarx: "innerval1.1.2"
                },
                {
                    innerpivot: "innerkey1.2",
                    innervar: "innerval1.2.1"
                }]
            }, {
                outerpivot: "outerkey2",
                outervar: [
                {
                    innerpivot: "innerkey2.1",
                    innervar: "innerval2.1.1",
                    innervarx: "innerval2.1.2"
                },
                {
                    innerpivot: "innerkey2.2",
                    innervar: "innerval2.2.1"
                }]
            }
            ]
        }, 
        rules: {
            "outer": {
                "expander": {
                    type: "gpii.settingsHandlers.XMLHandler.arrayToObject",
                    inputPath: "outer",
                    options: {
                        key: "outerpivot",
                        innerValue: [
                        {
                            "outervar": {
                                "expander": {
                                    type: "gpii.settingsHandlers.XMLHandler.arrayToObject",
                                    inputPath: "outervar",
                                    options: {
                                        key: "innerpivot"
                                    }
                                }
                            }
                        }
                        ]
                    }
                }
            }
        },
        expected: {
            "outer": {
                "outerkey1": {
                    "outervar": {
                        "innerkey1.1": {
                            "innervar": "innerval1.1.1",
                            "innervarx": "innerval1.1.2"
                        },
                        "innerkey1.2": {
                            "innervar": "innerval1.2.1"
                        }
                    }
                },
                "outerkey2": {
                    "outervar": {
                        "innerkey2.1": {
                            "innervar": "innerval2.1.1",
                            "innervarx": "innerval2.1.2"
                        },
                        "innerkey2.2": {
                            "innervar": "innerval2.2.1"
                        }
                    }
                }
            }
        },
        invertedRules: {
            "expander": [{
                type: "gpii.settingsHandlers.XMLHandler.objectToArray",
                inputPath: "outer",
                outputPath: "outer",
                options: {
                    key: "outerpivot",
                    innerValue: [{
                        expander: [{
                            type: "gpii.settingsHandlers.XMLHandler.objectToArray",
                            inputPath: "outervar",
                            outputPath: "outervar",
                            options: {
                                key: "innerpivot"
                            }
                        }]
                    }]
                }
            }]
        }
    };

    var multiNestedArrayTest = {
        raw: {
            outer: [
            { 
                outerpivot: "outerkey1",
                outervar:  {
                    arr1: [
                    {
                        innerpivot1: "arr1.1",
                        innervar: "arr1.1.1"
                    },
                    {
                        innerpivot1: "arr1.2",
                        innervar: "arr1.2.1"
                    }],
                    arr2: [
                    {
                        innerpivot2: "arr2.1",
                        innervar: "arr2.1.1"
                    },
                    {
                        innerpivot2: "arr2.2",
                        innervar: "arr2.2.1"
                    }]
                }
            }
            ]
        }, 
        rules: {
            "outer": {
                "expander": {
                    type: "gpii.settingsHandlers.XMLHandler.arrayToObject",
                    inputPath: "outer",
                    options: {
                        key: "outerpivot",
                        innerValue: [
                        {
                            "outervar.arr1": {
                                "expander": {
                                    type: "gpii.settingsHandlers.XMLHandler.arrayToObject",
                                    inputPath: "outervar.arr1",
                                    options: {
                                        key: "innerpivot1"
                                    }
                                }
                            }
                        }, 
                        {
                            "outervar.arr2": {
                                "expander": {
                                    type: "gpii.settingsHandlers.XMLHandler.arrayToObject",
                                    inputPath: "outervar.arr2",
                                    options: {
                                        key: "innerpivot2"
                                    }
                                }
                            }
                        }
                        ]
                    }
                }
            }
        },
        expected: {
            "outer": {
                "outerkey1": {
                    "outervar": {
                        "arr1": {
                            "arr1.1": { "innervar": "arr1.1.1" },
                            "arr1.2": { "innervar": "arr1.2.1" }
                        },
                        "arr2": {
                            "arr2.1": { "innervar": "arr2.1.1" },
                            "arr2.2": { "innervar": "arr2.2.1" }
                        }
                    }
                }
            }
        },
        invertedRules: {
            "expander": [{
                type: "gpii.settingsHandlers.XMLHandler.objectToArray",
                inputPath: "outer",
                outputPath: "outer",
                options: {
                    key: "outerpivot",
                    innerValue: [{
                        expander: [{
                            type: "gpii.settingsHandlers.XMLHandler.objectToArray",
                            inputPath: "outervar.arr1",
                            outputPath: "outervar.arr1",
                            options: {
                                key: "innerpivot1"
                            }
                        }]
                    }, {
                        expander: [{
                            type: "gpii.settingsHandlers.XMLHandler.objectToArray",
                            inputPath: "outervar.arr2",
                            outputPath: "outervar.arr2",
                            options: {
                                key: "innerpivot2"
                            }
                        }]
                    }]
                }
            }]
        }
    };
            
    var arrayTest = function (json, description) {
        var transformed = fluid.model.transformWithRules(json.raw, json.rules);
        jqUnit.assertDeepEq(description+" array->object transformation", json.expected, transformed);
        var inverseRules = fluid.model.transform.invertConfiguration(json.rules);
        jqUnit.assertDeepEq(description+" inverted rules", json.invertedRules, inverseRules);
        var inverseTransformed = fluid.model.transformWithRules(json.expected, json.invertedRules);
        jqUnit.assertDeepEq(description+" object->array transformation", json.raw, inverseTransformed);
    };

    var testMaterial = {
        "Basic Array transformations": {
            material: basicArrayTest,
            description: "Basic Array"
        },
        "More Complex Array transformations": {
            material: complexArrayTest,
            description: "Complex Array"
        },
        "Nested Array transformations": {
            material: nestedArrayTest,
            description: "Nested Array"
        },
        "Multiple Nested Array transformations": {
            material: multiNestedArrayTest,
            description: "Multiple Nested Array"
        }
    };

    fluid.each(testMaterial, function (test, name) {
        XMLHandlerTester.test(name, function () {
            arrayTest(test.material, test.description);
        });
    });

    XMLHandlerTester.test("XMLHandler.applySettings", function () {
        //check simple json structure
        var result = gpii.settingsHandlers.XMLHandler.applySettings({ "key": "val1" }, { "key": "val2"});
        jqUnit.assertDeepEq("Simple setting", { key: { oldValue: 'val2', newValue: 'val1' } }, result);

        //complex json structure
        var json = {
            firstentry: {
                lvl2: {
                    key1: "vala",
                    key2: "valb"
                }
            },
            nextentry: {
                key3: "valc"
            }
        };
        var settings = {
            "firstentry.lvl2.key1": "newValue",
            "nextentry.key3": "otherNewValue"
        };
        var exp = {
            "firstentry.lvl2.key1": { oldValue: "vala", newValue: "newValue" },
            "nextentry.key3": { oldValue: "valc", newValue: "otherNewValue" }
        };
        result = gpii.settingsHandlers.XMLHandler.applySettings(settings, json);
        jqUnit.assertDeepEq("Multiple and nested settings", exp, result);

         //check applySettings for unset values
         json = {
            somekey: {
                somekey2: {
                    key1: "vala"
                }
            }
        };
        settings = {
            "newkey1.newkey2": "someval"
        };
        exp = { 'newkey1.newkey2': { oldValue: undefined, newValue: 'someval' }};
        result = gpii.settingsHandlers.XMLHandler.applySettings(settings, json);
        jqUnit.assertDeepEq("Non existing settings (multilevel)", exp, result);
    });

    // TODO: Improve naming.
    var payload2Options = {
        "filename": testTempFilePaths[1],
        "encoding": "utf-8",
        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "rules": {
            "testing.simpleArray.settings": {
                "expander": {
                    type: "gpii.settingsHandlers.XMLHandler.arrayToObject",
                    inputPath: "testing.simpleArray.settings",
                    options: {
                        key: "unique"
                    }
                }
            },
            "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting": {
                "expander": {
                    type: "gpii.settingsHandlers.XMLHandler.arrayToObject",
                    inputPath: "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting",
                    options: {
                        key: "name"
                    }
                }
            },
            "testing": "testing"
        }
    };

    var xmlHandlerXMLtoJSONSpec = [{
        xml: '<?xml version="1.0"?><testing><hello>world</hello><hello.to>another world</hello.to><with-params foo="bar" /><double><hello1 iam="here"/><hello2 iam="alsohere"><and>me as well</and></hello2></double><simpleArray><settings unique="ind1">hello indexed world</settings><settings unique="ind2">hello other indexed world</settings><settings unique="ind3">hello third indexed world</settings></simpleArray><Sociable.Launcher.Properties.Settings><setting name="GameResources" serializeAs="String"><value>C:\\Sociable\\Games\\Resources</value></setting><setting name="Resources" serializeAs="String"><value>C:\\Sociable\\Games\\Resources\\Launcher</value></setting><setting name="AutoLogin" serializeAs="String"><value>0</value></setting></Sociable.Launcher.Properties.Settings></testing>',
        tests: [{
            expected: {
                testing: {
                    hello: {
                        $t: "world"
                    },
                    "hello.to": {
                        $t: "another world"
                    },
                    "with-params": {
                        foo: "bar"
                    },
                    "double": {
                        hello1: {
                            iam: "here"
                        },
                        hello2: {
                            iam: "alsohere",
                            and: {
                                $t: "me as well"
                            }
                        }
                    },
                    simpleArray: {
                        settings: [{
                            unique: "ind1",
                            $t: "hello indexed world"
                        }, {
                            unique: "ind2",
                            $t: "hello other indexed world"
                        }, {
                            unique: "ind3",
                            $t: "hello third indexed world"
                        }]
                    },
                    "Sociable.Launcher.Properties.Settings": {
                        setting: [{
                            name: "GameResources",
                            serializeAs: "String",
                            value: {
                                $t: "C:\\Sociable\\Games\\Resources"
                            }
                        }, {
                            name: "Resources",
                            serializeAs: "String",
                            value: {
                                $t: "C:\\Sociable\\Games\\Resources\\Launcher"
                            }
                        }, {
                            name: "AutoLogin",
                            serializeAs: "String",
                            value: {
                                $t: "0"
                            }
                        }]
                    }
                }
            }
        }, {
            expected: {
                testing: {
                    hello: {
                        $t: "world"
                    },
                    "hello.to": {
                        $t: "another world"
                    },
                    "with-params": {
                        foo: "bar"
                    },
                    "double": {
                        hello1: {
                            iam: "here"
                        },
                        hello2: {
                            iam: "alsohere",
                            and: {
                                $t: "me as well"
                            }
                        }
                    },
                    simpleArray: {
                        settings: {
                            ind1: {
                                $t: "hello indexed world"
                            },
                            ind2: {
                                $t: "hello other indexed world"
                            },
                            ind3: {
                                $t: "hello third indexed world"
                            }
                        }
                    },
                    "Sociable.Launcher.Properties.Settings": {
                        setting: {
                            GameResources: {
                                serializeAs: "String",
                                value: {
                                    $t: "C:\\Sociable\\Games\\Resources"
                                }
                            },
                            Resources: {
                                serializeAs: "String",
                                value: {
                                    $t: "C:\\Sociable\\Games\\Resources\\Launcher"
                                }
                            },
                            AutoLogin: {
                                serializeAs: "String",
                                value: {
                                    $t: "0"
                                }
                            }
                        }
                    }
                }
            },
            options: {
                rules: payload2Options.rules
            }
        }]
    }];

    function testXMLHandlerXMLtoJSON(spec) {
        fluid.each(spec.tests, function (test) {
            var actual = gpii.settingsHandlers.XMLHandler.XMLtoJSON(spec.xml, test.options);
            jqUnit.assertDeepEq("XMLHandler.XMLtoJSON correctly converts xml to json", test.expected, actual);
        });
    }
    XMLHandlerTester.test("XMLHandler.XMLtoJSON", function () {
        fluid.each(xmlHandlerXMLtoJSONSpec, testXMLHandlerXMLtoJSON);
    });

    var xmlHandlerJSONtoXMLSpec = [{
        xml: '<?xml version="1.0" encoding="utf-8"?>\r\n<testing>\r\n  <hello>world</hello>\r\n  <hello.to>another world</hello.to>\r\n  <with-params foo="bar"/>\r\n  <double>\r\n    <hello1 iam="here"/>\r\n    <hello2 iam="alsohere">\r\n      <and>me as well</and>\r\n    </hello2>\r\n  </double>\r\n  <simpleArray>\r\n    <settings unique="ind1">hello indexed world</settings>\r\n    <settings unique="ind2">hello other indexed world</settings>\r\n    <settings unique="ind3">hello third indexed world</settings>\r\n  </simpleArray>\r\n  <Sociable.Launcher.Properties.Settings>\r\n    <setting serializeAs="String" name="GameResources">\r\n      <value>C:\\Sociable\\Games\\Resources</value>\r\n    </setting>\r\n    <setting serializeAs="String" name="Resources">\r\n      <value>C:\\Sociable\\Games\\Resources\\Launcher</value>\r\n    </setting>\r\n    <setting serializeAs="String" name="AutoLogin">\r\n      <value>0</value>\r\n    </setting>\r\n  </Sociable.Launcher.Properties.Settings>\r\n</testing>\r\n',
        tests: [{
            json: {
                testing: {
                    hello: {
                        $t: "world"
                    },
                    "hello.to": {
                        $t: "another world"
                    },
                    "with-params": {
                        foo: "bar"
                    },
                    "double": {
                        hello1: {
                            iam: "here"
                        },
                        hello2: {
                            iam: "alsohere",
                            and: {
                                $t: "me as well"
                            }
                        }
                    },
                    simpleArray: {
                        settings: [{
                            unique: "ind1",
                            $t: "hello indexed world"
                        }, {
                            unique: "ind2",
                            $t: "hello other indexed world"
                        }, {
                            unique: "ind3",
                            $t: "hello third indexed world"
                        }]
                    },
                    "Sociable.Launcher.Properties.Settings": {
                        setting: [{
                            serializeAs: "String",
                            name: "GameResources",
                            value: {
                                $t: "C:\\Sociable\\Games\\Resources"
                            }
                        }, {
                            serializeAs: "String",
                            name: "Resources",
                            value: {
                                $t: "C:\\Sociable\\Games\\Resources\\Launcher"
                            }
                        }, {
                            serializeAs: "String",
                            name: "AutoLogin",
                            value: {
                                $t: "0"
                            }
                        }]
                    }
                }
            },
            options: {
                "xml-tag": '<?xml version="1.0" encoding="utf-8"?>'
            }
        }, {
            json: {
                testing: {
                    hello: {
                        $t: "world"
                    },
                    "hello.to": {
                        $t: "another world"
                    },
                    "with-params": {
                        foo: "bar"
                    },
                    "double": {
                        hello1: {
                            iam: "here"
                        },
                        hello2: {
                            iam: "alsohere",
                            and: {
                                $t: "me as well"
                            }
                        }
                    },
                    simpleArray: {
                        settings: {
                            ind1: {
                                $t: "hello indexed world"
                            },
                            ind2: {
                                $t: "hello other indexed world"
                            },
                            ind3: {
                                $t: "hello third indexed world"
                            }
                        }
                    },
                    "Sociable.Launcher.Properties.Settings": {
                        setting: {
                            GameResources: {
                                serializeAs: "String",
                                value: {
                                    $t: "C:\\Sociable\\Games\\Resources"
                                }
                            },
                            Resources: {
                                serializeAs: "String",
                                value: {
                                    $t: "C:\\Sociable\\Games\\Resources\\Launcher"
                                }
                            },
                            AutoLogin: {
                                serializeAs: "String",
                                value: {
                                    $t: "0"
                                }
                            }
                        }
                    }
                }
            },
            options: {
                rules: payload2Options.rules,
                "xml-tag": '<?xml version="1.0" encoding="utf-8"?>'
            }
        }]
    }];

    function testXMLHandlerJSONtoXML(spec) {
        fluid.each(spec.tests, function (test) {
            var actual = gpii.settingsHandlers.XMLHandler.JSONtoXML(test.json, test.options);
            jqUnit.assertEquals("XMLHandler.JSONtoXML correctly converts json to xml", spec.xml, actual);
        });
    }
    XMLHandlerTester.test("XMLHandler.JSONtoXML", function () {
        fluid.each(xmlHandlerJSONtoXMLSpec, testXMLHandlerJSONtoXML);
    });

    XMLHandlerTester.test("XMLHandler.formatXml", function () {
        var xml = '<?xml version="1.0"?><testing><hello>world</hello><hello.to>another world</hello.to><with-params foo="bar"/><double><hello1 iam="here"/><hello2 iam="alsohere"><and>me as well</and></hello2></double><simpleArray><settings unique="ind1">hello indexed world</settings><settings unique="ind2">hello other indexed world</settings><settings unique="ind3">hello third indexed world</settings></simpleArray><Sociable.Launcher.Properties.Settings><setting name="GameResources" serializeAs="String"><value>C:\\Sociable\\Games\\Resources</value></setting><setting name="Resources" serializeAs="String"><value>C:\\Sociable\\Games\\Resources\\Launcher</value></setting><setting name="AutoLogin" serializeAs="String"><value>0</value></setting></Sociable.Launcher.Properties.Settings></testing>';
        var expected = '<?xml version="1.0"?>\r\n<testing>\r\n  <hello>world</hello>\r\n  <hello.to>another world</hello.to>\r\n  <with-params foo="bar"/>\r\n  <double>\r\n    <hello1 iam="here"/>\r\n    <hello2 iam="alsohere">\r\n      <and>me as well</and>\r\n    </hello2>\r\n  </double>\r\n  <simpleArray>\r\n    <settings unique="ind1">hello indexed world</settings>\r\n    <settings unique="ind2">hello other indexed world</settings>\r\n    <settings unique="ind3">hello third indexed world</settings>\r\n  </simpleArray>\r\n  <Sociable.Launcher.Properties.Settings>\r\n    <setting name="GameResources" serializeAs="String">\r\n      <value>C:\\Sociable\\Games\\Resources</value>\r\n    </setting>\r\n    <setting name="Resources" serializeAs="String">\r\n      <value>C:\\Sociable\\Games\\Resources\\Launcher</value>\r\n    </setting>\r\n    <setting name="AutoLogin" serializeAs="String">\r\n      <value>0</value>\r\n    </setting>\r\n  </Sociable.Launcher.Properties.Settings>\r\n</testing>\r\n'
        var formatted = gpii.settingsHandlers.XMLHandler.formatXml(xml);
        jqUnit.assertEquals("XMLHandler.formatXml correctly formats xml", expected, formatted);
    });

    var testXMLHandlerSetOperation = function (testSpec) {
        //read original XML and copy to a file we can mess up:
        var origXML = fs.readFileSync(testSpec.originalFilePath, "utf-8");
        fs.writeFileSync(testSpec.outputFilePath, origXML, "utf-8");
        //test return payload
        var returnPayload = gpii.settingsHandlers.XMLHandler.set(testSpec.payload);
        jqUnit.assertDeepEq(testSpec.name + ": Checking return payload for simple XML file: ", testSpec.expectedResult, returnPayload);

        //next check that the written XML file is as expected:
        var savedXML = fs.readFileSync(testSpec.outputFilePath, "utf-8");
        var expectedXML = fs.readFileSync(testSpec.expectedFilePath, "utf-8");
        jqUnit.assertEquals(testSpec.name + ": checking XML file: ", expectedXML, savedXML);
    };
    
    var xmlHandlerSetOperationTestSpecs = [
        {
            name: "Payload 1", // TODO: Give these tests meaningful names!
            originalFilePath: __dirname+"/data/XMLSettingsHandler/test1.xml",
            outputFilePath: testTempFilePaths[0],
            expectedFilePath: __dirname+"/data/XMLSettingsHandler/expected_output1.xml",
            
            payload: {
                "com.texthelp.readwritegold": [{
                    settings: {
                        "ApplicationSettings.IsEnterprise.$t": true,
                        "ApplicationSettings.SpeechInput.LanguageId.$t": 1
                    },
                    options: {
                        "filename": testTempFilePaths[0],
                        "encoding": "utf-8",
                        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                        "rules": {
                            "ApplicationSettings": "ApplicationSettings"
                        }
                    }
                }]
            },
            
            expectedResult: {
                'com.texthelp.readwritegold': [{
                    settings: {
                        'ApplicationSettings.IsEnterprise.$t': { oldValue: 'false', newValue: true },
                        'ApplicationSettings.SpeechInput.LanguageId.$t': { oldValue: '0', newValue: 1 }
                    },
                    options: {
                        "filename": testTempFilePaths[0],
                        "encoding": "utf-8",
                        "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                        "rules": {
                            "ApplicationSettings": "ApplicationSettings"
                        }
                    }
                }]
            }
        },
        
        {
            name: "Payload 2", // TODO: Meaningful name!
            originalFilePath: __dirname+"/data/XMLSettingsHandler/test2.xml",
            outputFilePath: testTempFilePaths[1],
            expectedFilePath: __dirname+"/data/XMLSettingsHandler/expected_output2.xml",
            
            payload: {
                "setreq": [
                    {
                        settings: {
                            "testing.hello.$t": "space",
                            "testing.hello\\.to.$t": "another space",
                            "testing.new-variable.here": "KAPAW",
                            "testing.with-params.foo": "oof",
                            "testing.double.hello2.iam": "bond, james bond",
                            "testing.double.hello2.and.$t": "bond, james bond, jr",
                            "testing.simpleArray.settings.ind2.$t":"hello other indexed space",
                            "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.serializeAs": "New Value",
                            "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.value.$t": "10000"
                        },
                        options: payload2Options
                    }
                ]
            },
            
            expectedResult: {
                "setreq": [
                    {
                        settings: {
                            "testing.hello.$t": { oldValue: "world", newValue: "space" },
                            "testing.hello\\.to.$t": { oldValue: "another world", newValue: "another space" },
                            "testing.new-variable.here": { oldValue: undefined, newValue: "KAPAW" },
                            "testing.with-params.foo": { oldValue: "bar", newValue: "oof" },
                            "testing.double.hello2.iam": { oldValue: "alsohere", newValue: "bond, james bond" },
                            "testing.double.hello2.and.$t": { oldValue: "me as well", newValue: "bond, james bond, jr" },
                            "testing.simpleArray.settings.ind2.$t": { oldValue: "hello other indexed world", newValue: "hello other indexed space" },
                            "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.serializeAs": { oldValue: "String", newValue: "New Value" },
                            "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.value.$t": { oldValue: "0", newValue: "10000" }
                        },
                        options: payload2Options
                    }
                ]
            }
        }
    ];
    
    XMLHandlerTester.test("XMLHandler.set", function () {
        fluid.each(xmlHandlerSetOperationTestSpecs, testXMLHandlerSetOperation);
    });
}());