/*!
XML Settings Handler Tests

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/ 

/*global require, __dirname*/

(function () {
    // This loads universal.
     var fluid = require("infusion"),
         gpii = fluid.registerNamespace("gpii"),
         jqUnit = fluid.require("jqUnit"),
         fs = require("fs"),
         xm = require('xml-mapping');

    require("testFramework");
    require("settingsHandlers");

    var XMLHandlerTester = gpii.tests.testEnvironment();

    //When fluid.get'ing, allow escaped strings
    var getParser = {
        parser: {
            parse: fluid.pathUtil.parseEL,
            compose: fluid.pathUtil.composePath
        },
        strategies: [fluid.model.defaultFetchStrategy]
    };

 
    XMLHandlerTester.test("Test that transformations work as expected", function() {
        var input = 
        [ {
            "name": "name1",
            "othervar1": "otherval1"            
        },
        {
            "name": "name2",
            "othervar2": "otherval2"            
        }
        ];

        var expected = {
            "name1": {
                "othervar1": "otherval1"
            },
            "name2": {
                "othervar2": "otherval2"
            }
        };
        var input2 = 
        { 
            "deepObj": {
                "key-here": "Hello world",
                "array-key": [ {
                    "name": "name1",
                    "othervar1": "otherval1"            
                },
                {
                    "name": "name2",
                    "othervar2": "otherval2"            
                }
                ]
            }
        };

        var expected2 = { 
            "deepObj": {
                "key-here": "Hello world",                
                "array-key": {
                    "name1": {
                        "othervar1": "otherval1"
                    },
                    "name2": {
                        "othervar2": "otherval2"
                    }
                }
            }
        };
        var input3 = 
        { 
            "outer": [
            {
                "name": "outer1",
                "outer1foo": "outer1bar"
            },
            {
                "name": "outer2",
                "outer2foo": "outer2bar"
            },
            {
                "name": "outerSpecial",
                "outerSpecialVar": 
                [ {
                    "name": "inner1",
                    "inner1foo": "inner1bar"            
                },
                {
                    "name": "inner2",
                    "inner2foo": "inner2bar"            
                }
                ]
            }]
        };

        var expected3 = { 
            "outer": {
                "outer1": { 
                    "outer1foo": "outer1bar"
                },
                "outer2": { 
                    "outer2foo": "outer2bar"
                },
                "outerSpecial": { 
                    "outerSpecialVar": {
                        "inner1": {
                            "inner1foo": "inner1bar"
                        },
                        "inner2": {
                            "inner2foo": "inner2bar"
                        }  
                    }
                }
            }
        };
        console.log("Hello world!");
        var output = gpii.settingsHandlers.XMLHandler.transform(input, "var1");
        //jqUnit.assertDeepEq("No transformations: ")
        jqUnit.assertDeepEq("Simple array transformation: ", expected, output);
        var output2 = gpii.settingsHandlers.XMLHandler.transform(input2, "var2");
        jqUnit.assertDeepEq("Simple array transformation: ", expected2, output2);
        var output3 = gpii.settingsHandlers.XMLHandler.transform(input3, "var3");
        jqUnit.assertDeepEq("Simple array transformation: ", expected3, output3);

    });

       XMLHandlerTester.test("Multiple XML declarations with the same name varying on parameter (test1.xml)", function () {
        var json = gpii.settingsHandlers.XMLHandler.readXMLFile(__dirname+"/data/XMLSettingsHandler/test1.xml");
        //check that we read the file as expected:
        //these are mostly used for examples in documentation:
        jqUnit.assertEquals("Referring to value of basic XML statement: ", "world", fluid.get(json, "testing.hello.$t", getParser));
        jqUnit.assertEquals("Escaped reference to value of basic XML statement: ", "another world", fluid.get(json, "testing.hello\\.to.$t", getParser));
        jqUnit.assertEquals("Reference XML statements with parameters: ", "bar", fluid.get(json, "testing.with-params.foo", getParser));
        // jqUnit.assertEquals("Referencing array with unknown index: ", "banana", fluid.get(json, "testing.Sociable\\.Launcher\\.Properties\\.Settings.0", getParser));
        // var xml = xm.toxml(json);
        // console.log("XML: "+xml);
        //check whether we can modify values:

    });


    XMLHandlerTester.test("XMLHandler.applySettings", function () {
        //check simple json structure
        var result = gpii.settingsHandlers.XMLHandler.applySettings({ "key": "val1" }, { "key": "val2"});
        jqUnit.assertDeepEq("Simple setting", { key: { oldValue: 'val2', newValue: 'val1' } }, result);

        //complex json structure
        var json = {
            firstentry: {
                lvl2: {
                    key1: "vala",
                    key2: "valb"
                }
            },
            nextentry: {
                key3: "valc"
            }
        };
        var settings = {
            "firstentry.lvl2.key1": "newValue",
            "nextentry.key3": "otherNewValue"
        };
        var exp = {
            "firstentry.lvl2.key1": { oldValue: "vala", newValue: "newValue" },
            "nextentry.key3": { oldValue: "valc", newValue: "otherNewValue" }
        };
        result = gpii.settingsHandlers.XMLHandler.applySettings(settings, json);
        jqUnit.assertDeepEq("Multiple and nested settings", exp, result);

        //check applySettings for unset values
        json = {
            somekey: {
                somekey2: {
                    key1: "vala"
                }
            }
        };
        settings = {
            "newkey1.newkey2": "someval"
        };
        exp = { 'newkey1.newkey2': { oldValue: undefined, newValue: 'someval' }};
        result = gpii.settingsHandlers.XMLHandler.applySettings(settings, json);
        jqUnit.assertDeepEq("Non existing settings (multilevel)", exp, result);
    });

    XMLHandlerTester.test("XMLHandler.set", function () {
        var payload = {
            "com.texthelp.readwritegold": [{
                settings: {
                    "ApplicationSettings.IsEnterprise.$t": true,
                    "ApplicationSettings.SpeechInput.LanguageId.$t": 1
                },
                options: {
                    "filename": __dirname+"/data/XMLSettingsHandler/input1.xml",
                    "encoding": "utf-8",
                    "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
                }
            }]
        };
        var expectedResult = {
            'com.texthelp.readwritegold': [{
                settings: {
                    'ApplicationSettings.IsEnterprise.$t': { oldValue: 'false', newValue: true },
                    'ApplicationSettings.SpeechInput.LanguageId.$t': { oldValue: '0', newValue: 1 }
                },
                options: {
                    "filename": __dirname+"/data/XMLSettingsHandler/input1.xml",
                    "encoding": "utf-8",
                    "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
                }
            }]

        };
        //read original XML and copy to a file we can mess up:
        var origXML = fs.readFileSync(__dirname+"/data/XMLSettingsHandler/data1.xml", "utf-8");
        fs.writeFileSync(__dirname+"/data/XMLSettingsHandler/input1.xml", origXML, "utf-8");
        //test return payload
        var returnPayload = gpii.settingsHandlers.XMLHandler.set(payload);
        jqUnit.assertDeepEq("Checking return payload for simple XML file: ", expectedResult, returnPayload);
        
        //next check that the written XML file is as expected:
        var savedXML = fs.readFileSync(__dirname+"/data/XMLSettingsHandler/input1.xml", "utf-8");
        var expectedXML = fs.readFileSync(__dirname+"/data/XMLSettingsHandler/expected_output1.xml", "utf-8");
        jqUnit.assertEquals("checking XML file: ", expectedXML, savedXML);
    });
}());