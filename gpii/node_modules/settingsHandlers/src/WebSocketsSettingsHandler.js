/*!
  GPII Web Sockets Settings Handler

  Copyright 2014, 2015 Emergya
  Copyright 2015 Raising the Floor - International
  Copyright 2020 OCAD University

  Licensed under the New BSD license. You may not use this file except in
  compliance with this License.

  You may obtain a copy of the License at
  https://github.com/gpii/universal/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    $ = fluid.registerNamespace("jQuery"),
    gpii = fluid.registerNamespace("gpii");

// For debugging -- see gpii.settingsHandlers.webSockets.settingsChanged()
// below.
// var util = require("util");

fluid.defaults("gpii.settingsHandlers.webSockets.component", {
    gradeNames: ["fluid.modelComponent"],
    changeApplierOptions: {
        resolverGetConfig: fluid.model.escapedGetConfig,
        resolverSetConfig: fluid.model.escapedSetConfig
    },
    members: {
        clients: {}
    },
    model: {
        settings: {}
    },
    modelListeners: {
        "settings.*": {
            funcName: "gpii.settingsHandlers.webSockets.settingsChanged",
            args: "{change}"
        }
    },
    invokers: {
        addClient: {
            funcName: "gpii.settingsHandlers.webSockets.addClient",
            args: ["{that}", "{arguments}.0", "{arguments}.1"]
        },
        removeClient: {
            funcName: "gpii.settingsHandlers.webSockets.removeClient",
            args: ["{that}", "{arguments}.0"]
        },
        getSettingsForId: {
            funcName: "gpii.settingsHandlers.webSockets.getSettingsForId",
            args: ["{that}", "{arguments}.0"]
        },
        getImpl: {
            funcName: "gpii.settingsHandlers.webSockets.getImpl",
            args: ["{arguments}.0", "{that}"]
        },
        setImpl: {
            funcName: "gpii.settingsHandlers.webSockets.setImpl",
            args: ["{arguments}.0", "{that}"]
        }
    }
});

///////////////// Clients /////////////////////

/**
 * Add a client, a web sockets message handler, to the set of clients that this
 * settings handler services.  This also:
 * - adds a listener to the client so thatit relays "changeSettings" message
 *   payloads to this settings handler.
 * - sends a reply back to the client containing the current settings value for
 *   that client's solution.
 * @param {Component} that - An instance of gpii.settingsHandlers.webSockets.component.
 * @param {String} solutionId - The solution that the client handles.
 * @param {Component} client - The client request handler to add.
 */
gpii.settingsHandlers.webSockets.addClient = function (that, solutionId, client) {
    client.events.onReceiveMessage.addListener(gpii.flowManager.browserChannel.receiveChangeSettingsMsg);
    var initialSettings = fluid.get(that.model.settings, [solutionId]);
    var currentValue = fluid.get(that.clients, [solutionId, client.id]);
    if (!currentValue) {
        fluid.set(that.clients, [solutionId, client.id], client);
        client.sendTypedMessage("connectionSucceeded", initialSettings);
        client.events.onDestroy.addListener(function () {
            that.removeClient(client);
        });
    }
};

/**
 * Remove a client, a web sockets message handler, from the set of clients that
 * this settings handler services.
 * @param {Component} that - An instance of gpii.settingsHandlers.webSockets.component.
 * @param {Component} client - The client request handler to remove.
 */
gpii.settingsHandlers.webSockets.removeClient = function (that, client) {
    for (var solutionId in that.clients) {
        client.events.onReceiveMessage.removeListener(gpii.flowManager.browserChannel.receiveChangeSettingsMsg);
        delete that.clients[solutionId][client.id];
        if ($.isEmptyObject(that.clients[solutionId])) {
            delete that.clients[solutionId];
        }
    }
};

///////////////// Settings /////////////////////

/**
 * For debugging: log changes to settings.
 * @param {Object} change - The modified setting.
 */
gpii.settingsHandlers.webSockets.settingsChanged = function (/*change*/) {
    // Function retained for debugging purposes
    // Warning:  the 'change' argument can be a circular JSON structure;
    // Using util.inspect() instead of JSON.stringify()
    // console.log("A change in settings has been registered: " + util.inspect(change));
};

/**
 * Get the current settings associated with the given solution persisted by this
 * settings handler.
 * @param {Component} that - An instance of gpii.settingsHandlers.webSockets.component.
 * @param {String} solutionId - The solution whose setting are sought.
 * @return {Object} - The current values of the settings for the solution.
 */
gpii.settingsHandlers.webSockets.getSettingsForId = function (that, solutionId) {
    return fluid.get(that.model.settings, [solutionId]);
};

/**
 * Get the current value of specified settings associated with the given
 * solution.
 * @param {Object} payload - The solution and its setting whose current values
 *                           are to be retrieved.
 * @param {String} payload.options.path - The relevant solution.
 * @param {Object} payload.settings - The settings whose current values are
 *                                    sought.
 * @param {Component} that - An instance of gpii.settingsHandlers.webSockets.component.
 * @return {Object} - the current values of the settings passed in.
 */
gpii.settingsHandlers.webSockets.getImpl = function (payload, that) {
    var path = payload.options.path;
    var results = fluid.transform(payload.settings, function (value, key) {
        var currentValue = fluid.get(that.model.settings, [path, key]);
        return currentValue;
    });
    return results;
};

/**
 * Modify the persistent settings based on the values passed in, and notify
 * relevant clients of the changes.  In this regard, the client that requested
 * the settings is sent an acknowledgement using a "changeSettingsReceived"
 * message type.  The other clients are sent a "onSettingsChanged" message.
 * @param {Object} payload - Information about which settings to modify.
 * @param {Object} payload.settings - The new values of the settings.
 * @param {String} payload.options.path - Solution id whose settings are to change.
 * @param {String} payload.options.source - The client requesting the changes.
 * @param {Component} that - An instance of gpii.settingsHandlers.webSockets.component.
 * @return {Object} - a set of old value, new value pairs showing the changes
 *                    for each setting.
 */
gpii.settingsHandlers.webSockets.setImpl = function (payload, that) {
    var path = payload.options.path;
    var results = fluid.transform(payload.settings, function (value, key) {
        var oldValue = fluid.get(that.model.settings, [path, key]);
        var type;

        if (oldValue === undefined) {
            type = "ADD";
        } else if (value === undefined) {
            type = "DELETE";
        } else {
            type = null;
        }

        that.applier.change(["settings", path, key], value, type);

        var newValue = fluid.get(that.model.settings, [path, key]);

        return {
            oldValue: oldValue,
            newValue: newValue
        };
    });

    if ($.isEmptyObject(that.model.settings[path])) {
        delete that.model.settings[path];
    }

    gpii.settingsHandlers.webSockets.notifySettings(payload.options, that);
    return results;
};

/**
 * Notify relevant clients about changes to their solution's settings with
 * either a "onSettingsChanged" or "changeSettingsReceived" message type.  The
 * client that requested the changes is sent the "changeSettingsReceived"
 * response.  All others are notified of the changes ("onSettingsChanged").
 * @param {Object} clientOptions - Information about which solutions and clients
 *                                 to notify.
 * @param {String} clientOptions.path - The relevant solution id.
 * @param {Component} clientOptions.source - The client who requested the
 *                                           changes.
 * @param {Component} that - An instance of gpii.settingsHandlers.webSockets.component.
 *                           managing clients and their solution's settings.
 */
gpii.settingsHandlers.webSockets.notifySettings = function (clientOptions, that) {
    var solutionId = clientOptions.path;
    if (solutionId in that.clients) {
        var newSettings = gpii.settingsHandlers.webSockets.getSettingsForId(that, solutionId);
        for (var clientId in that.clients[solutionId]) {
            var client = that.clients[solutionId][clientId];
            if (client === clientOptions.source) {
                client.sendTypedMessage("changeSettingsReceived", newSettings);
            } else {
                client.sendTypedMessage("onSettingsChanged", newSettings);
            }
        }
    }
};

/////////// Top-level driver methods for SettingsHandler ///////////////

/**
 * Retrieve a solution's settings based on the given information.
 * @param {Object} payload - The solution's settings to retreive.
 * @param {String} payload.options.path - Solution identifier.
 * @param {Object} payload.settings - The settings whose current values are
 *                                    sought.
 * @return {Promise} - A promise whose value, when resolved, is the settings.
 */
gpii.settingsHandlers.webSockets.get = function (payload) {
    var instance = gpii.settingsHandlers.webSockets.instance; // this is placed there by FlowManager's mountInstance
    return gpii.settingsHandlers.invokeSettingsHandler(instance.getImpl, payload);
};

/**
 * Modify a solution's settings based on the given information.
 * @param {Object} payload - Array of solutions, their clients and settings to
 *                           modify.
 * @param {Component} payload.solutionId[i] - The client requesting the change.
 * @param {Object} payload.solutionId[i].settings - The new values for the settings.
 * @param {String} payload.solutionId[i].options.path - Solution identifier.
 * @param {Component} payload.solutionId[i].options.source - The client requesting the change.
 * @return {Promise} - A promise whose value, when resolved, is the modified settings.
 */
gpii.settingsHandlers.webSockets.set = function (payload) {
    var instance = gpii.settingsHandlers.webSockets.instance; // this is placed there by FlowManager's mountInstance
    return gpii.settingsHandlers.invokeSettingsHandler(instance.setImpl, payload);
};
