/*!
  GPII Web Sockets Settings Handler

  Copyright 2014, 2015 Emergya

  Licensed under the New BSD license. You may not use this file except in
  compliance with this License.

  You may obtain a copy of the License at
  https://github.com/gpii/universal/LICENSE.txt
*/

/* global require */

"use strict";

var fluid = require("infusion"),
$ = fluid.registerNamespace("jQuery"),
gpii = fluid.registerNamespace("gpii");

fluid.defaults("gpii.settingsHandlers.webSocketsComponent", {
    gradeNames: ["fluid.modelRelayComponent", "autoInit"],
    changeApplierOptions: {
        resolverGetConfig: fluid.model.escapedGetConfig,
        resolverSetConfig: fluid.model.escapedSetConfig
    },
    members: {
        clients: {}
    },
    model: {
        settings: {}
    },
    modelListeners: {
        "settings.*": {
            funcName: "gpii.settingsHandlers.webSocketsComponent.settingsChanged",
            args: "{change}"
        }
    },
    invokers: {
        addClient: {
            funcName: "gpii.settingsHandlers.webSocketsComponent.addClient",
            args: ["{that}", "{arguments}.0", "{arguments}.1"]
        },
        removeClient: {
            funcName: "gpii.settingsHandlers.webSocketsComponent.removeClient",
            args: ["{that}", "{arguments}.0"]
        },
        getSettingsForId: {
            funcName: "gpii.settingsHandlers.webSocketsComponent.getSettingsForId",
            args: ["{that}", "{arguments}.0"]
        },
        get: {
            funcName: "gpii.settingsHandlers.webSocketsComponent.get",
            args: ["{arguments}.0", "{that}"]
        },
        getImpl: {
            funcName: "gpii.settingsHandlers.webSocketsComponent.getImpl",
            args: ["{arguments}.0", "{that}"]
        },
        set: {
            funcName: "gpii.settingsHandlers.webSocketsComponent.set",
            args: ["{arguments}.0", "{that}"]
        },
        setImpl: {
            funcName: "gpii.settingsHandlers.webSocketsComponent.setImpl",
            args: ["{arguments}.0", "{that}"]
        }
    }
});

///////////////// Clients /////////////////////

gpii.settingsHandlers.webSocketsComponent.addClient = function (that, solutionId, client) {
    var initialSettings = fluid.get(that.model.settings, [solutionId]);
    var currentValue = fluid.get(that.clients, [solutionId, client.id]);
    if (!currentValue) {
        fluid.set(that.clients, [solutionId, client.id], client);
        client.emit("connectionSucceeded", initialSettings);
        client.on("disconnect", function () {
            that.removeClient(client);
        });
    }

};

gpii.settingsHandlers.webSocketsComponent.removeClient = function (that, client) {
    for (var solutionId in that.clients) {
        delete that.clients[solutionId][client.id];
        if ($.isEmptyObject(that.clients[solutionId])) {
            delete that.clients[solutionId];
        }
    }
};

///////////////// Settings /////////////////////

gpii.settingsHandlers.webSocketsComponent.settingsChanged = function (/*change*/) {
    //console.log("A change in settings has been registered: " + JSON.stringify(change));
};

gpii.settingsHandlers.webSocketsComponent.getSettingsForId = function (that, solutionId) {
    return fluid.get(that.model.settings, [solutionId]);
};

gpii.settingsHandlers.webSocketsComponent.getImpl = function (payload, that) {
    var path = payload.options.path;
    var results = fluid.transform(payload.settings, function (value, key) {
        var currentValue = fluid.get(that.model.settings, [path, key]);
        return currentValue;
    });

    return results;
};

gpii.settingsHandlers.webSocketsComponent.get = function (payload, that) {
    return gpii.settingsHandlers.invokeSettingsHandler(that.getImpl, payload);
};

gpii.settingsHandlers.webSocketsComponent.setImpl = function (payload, that) {
    var path = payload.options.path;
    var results = fluid.transform(payload.settings, function (value, key) {
        var oldValue = fluid.get(that.model.settings, [path, key]);
        var type;

        if (oldValue === undefined) {
            type = "ADD";
        } else if (value === undefined) {
            type = "DELETE";
        } else {
            type = null;
        }

        that.applier.change(["settings", path, key], value, type);

        var newValue = fluid.get(that.model.settings, [path, key]);

        return {
            oldValue: oldValue,
            newValue: newValue
        };
    });

    if ($.isEmptyObject(that.model.settings[path])) {
        delete that.model.settings[path];
    }

    gpii.settingsHandlers.webSocketsComponent.notifySettings(path, that);
    return results;
};

gpii.settingsHandlers.webSocketsComponent.set = function (payload, that) {
    return gpii.settingsHandlers.invokeSettingsHandler(that.setImpl, payload);
};

gpii.settingsHandlers.webSocketsComponent.notifySettings = function (id, that) {
    if (id in that.clients) {
        var newSettings = gpii.settingsHandlers.webSocketsComponent.getSettingsForId(that, id);
        for (var client in that.clients[id]) {
            that.clients[id][client].emit("onBrowserSettingsChanged", newSettings);
        }
    }
};

