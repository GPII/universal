/*!
  GPII JSON Settings Handler

  Copyright 2012 OpenDirective and Raising the Floor - International

  Licensed under the New BSD license. You may not use this file except in
  compliance with this License.

  You may obtain a copy of the License at
  https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        fs = require("fs"),
        $ = fluid.registerNamespace("jQuery"),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.settingsHandlers.JSONSettingsHandler");

    gpii.settingsHandlers.JSONSettingsHandler.set = function (profile) {
        var returnObj = fluid.copy(profile);
        return fluid.transform(returnObj, function (solution) {
            return fluid.transform(solution, function(solutionEntry) {
                var options = solutionEntry.options;
                var userRequestedSettings = solutionEntry.settings;
                var defaultSettings,
                    newSettingsResponse,
                    settingKey,
                    oldValue,
                    newValue;

                if (options && options.path) {
                    // load the default settings
                    defaultSettings = require(options.path);
                    newSettingsResponse = {};
                    // record differences between required and default settings
                    // so that they default settings can be restored
                    for (settingKey in userRequestedSettings) {
                        oldValue = defaultSettings[settingKey];
                        newValue = userRequestedSettings[settingKey];
                        newSettingsResponse[settingKey] = {
                            "oldValue": oldValue,
                            "newValue": newValue
                        };
                    }
                    fluid.log("Settings explicitly configured in GPII profile:", fluid.prettyPrintJSON(newSettingsResponse));
                    // merge the required settings and default settings
                    // this means required settings overwrite default settings
                    $.extend(true, defaultSettings,  userRequestedSettings);
                    solutionEntry.settings = defaultSettings;
                    
                    // Write the new settings to a file for the application to read
                    fs.writeFileSync(options.path, JSON.stringify(defaultSettings));
                }
                return solutionEntry;
            });  
        });
    };

}());