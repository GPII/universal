/*!
  GPII JSON Settings Handler

  Copyright 2012 OpenDirective and Raising the Floor - International

  Licensed under the New BSD license. You may not use this file except in
  compliance with this License.

  You may obtain a copy of the License at
  https://github.com/gpii/universal/LICENSE.txt
*/

/*global require*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        fs = require("fs"),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.settingsHandlers.JSONSettingsHandler");

    // Function for looping through the payload sent to get/set calls. Looping
    // is done by fluid.transform calls, and at the level of each solution
    // entry, the 'modifier' function passed as parameter is called to allow
    // editing of the solutionEntry based on the current settings (both passed
    // as parameters to the modifier function)
    var transformPayload = function (payload, modifier) {
        var returnObj = fluid.copy(payload);
        return fluid.transform(returnObj, function (solution) {
            return fluid.transform(solution, function(solutionEntry) {
                var options = solutionEntry.options;

                if (options && options.path) {
                    //read JSON file
                    var content = fs.readFileSync(options.path);
                    var currentSettings = JSON.parse(content);
                    //modification of the entry
                    return modifier(solutionEntry, currentSettings);
                }
                return solutionEntry;
            });
        });
    };

    gpii.settingsHandlers.JSONSettingsHandler.get = function (payload) {
        return transformPayload(payload, function (solutionEntry, currentSettings) {
            var newSettingsResponse = {};
            var userRequestedSettings = solutionEntry.settings;

            fluid.each(userRequestedSettings, function (settingVal, settingKey) {
                var value = fluid.get(currentSettings, settingKey,
                    fluid.model.escapedGetConfig);
                newSettingsResponse[settingKey] = value;
            });

            return {
                options: solutionEntry.options,
                settings: newSettingsResponse
            };
        });
    };

    gpii.settingsHandlers.JSONSettingsHandler.set = function (payload) {
        var oldValue;
        return transformPayload(payload, function (solutionEntry, currentSettings) {
            var newSettingsResponse = {};
            var userRequestedSettings = solutionEntry.settings;
            var options = solutionEntry.options;

            // record differences between required and default settings
            // so that they default settings can be restored
            fluid.each(userRequestedSettings, function (settingVal, settingKey) {
                oldValue = fluid.get(currentSettings, settingKey,
                    fluid.model.escapedGetConfig);
                fluid.set(currentSettings, settingKey, settingVal,
                    fluid.model.escapedSetConfig);
                newSettingsResponse[settingKey] = {
                    "oldValue": oldValue,
                    "newValue": settingVal
                };
            });
            fluid.log("Settings explicitly configured in GPII profile:",
                fluid.prettyPrintJSON(newSettingsResponse));
            solutionEntry.settings = currentSettings;

            // Write the new settings to a file for the application to read
            fs.writeFileSync(options.path,
                fluid.prettyPrintJSON(currentSettings));
            return { options: options, settings: newSettingsResponse };
        });
    };
}());