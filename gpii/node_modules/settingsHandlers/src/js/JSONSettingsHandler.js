/*!
  GPII JSON Settings Handler

  Copyright 2012 OpenDirective and Raising the Floor - International

  Licensed under the New BSD license. You may not use this file except in
  compliance with this License.

  You may obtain a copy of the License at
  https://github.com/gpii/universal/LICENSE.txt
*/

/*global require*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        fs = require("fs"),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.settingsHandlers.JSONSettingsHandler");

    // TODO: When FLUID-4852 is fixed, remove these definitions
    var getParser = {
        parser: {
            parse: fluid.pathUtil.parseEL,
            compose: fluid.pathUtil.composePath
        },
        strategies: [fluid.model.defaultFetchStrategy]
    };

    var setParser = {
        parser: {
            parse: fluid.pathUtil.parseEL,
            compose: fluid.pathUtil.composePath
        },
        strategies: [fluid.model.defaultFetchStrategy, fluid.model.defaultCreatorStrategy]
    };

    gpii.settingsHandlers.JSONSettingsHandler.set = function (profile) {
        var returnObj = fluid.copy(profile);
        return fluid.transform(returnObj, function (solution) {
            return fluid.transform(solution, function(solutionEntry) {
                var options = solutionEntry.options;
                var userRequestedSettings = solutionEntry.settings;
                var defaultSettings,
                    newSettingsResponse,
                    oldValue;
                    
                if (options && options.path) {
                    //we cant simply use require as that'll break if the file doesn't end on .json
                    var content = fs.readFileSync(options.path);
                    defaultSettings = JSON.parse(content); 
                    newSettingsResponse = {};
                    // record differences between required and default settings
                    // so that they default settings can be restored
                    fluid.each(userRequestedSettings, function (settingVal, settingKey) {
                        oldValue = fluid.get(defaultSettings, settingKey, getParser);
                        fluid.set(defaultSettings, settingKey, settingVal, setParser);
                        newSettingsResponse[settingKey] = {
                            "oldValue": oldValue,
                            "newValue": settingVal
                        };
                    });
                    fluid.log("Settings explicitly configured in GPII profile:", fluid.prettyPrintJSON(newSettingsResponse));
                    solutionEntry.settings = defaultSettings;
                    
                    // Write the new settings to a file for the application to read
                    fs.writeFileSync(options.path, fluid.prettyPrintJSON(defaultSettings));
                    return { options: options, settings: newSettingsResponse };
                }
                return solutionEntry;
            });  
        });
    };
}());