/*!
GPII XML Settings Handler

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require */
(function () {
    var fluid = require("infusion"),
        fs = require("fs"),
        xm = require('xml-mapping'),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.settingsHandlers.XMLHandler");


    //http://stackoverflow.com/questions/376373/pretty-printing-xml-with-javascript
    var formatXml = function (xml) {
        var formatted = '';
        var reg = /(>)(<)(\/*)/g;
        xml = xml.replace(reg, '$1\r\n$2$3');
        var pad = 0;
        fluid.each(xml.split('\r\n'), function(node, index) {
            var indent = 0;
            if (node.match( /.+<\/\w[^>]*>$/ )) {
                indent = 0;
            } else if (node.match( /^<\/\w/ )) {
                if (pad !== 0) {
                    pad -= 1;
                }
            } else if (node.match( /^<\w[^>]*[^\/]>.*$/ )) {
                indent = 1;
            } else {
                indent = 0;
            }

            var padding = '';
            for (var i = 0; i < pad; i++) {
                padding += '  ';
            }

            formatted += padding + node + '\r\n';
            pad += indent;
        });
        return formatted;
    };

    var validateArray = function (arr, pivot) {
        if (!fluid.isArrayable(arr)) return false;

        console.log("Validating Array: "+JSON.stringify(arr));
        //for each array entry check that object with key pivot exists
        for (var i=0; i<arr.length; ++i) {
            //console.log("checking for name: "+JSON.stringify(val[i]));
            if (!arr[i][pivot]) {
                return false;
            }
        };
        return true;
    };

    var fixArray = function (arr, pivot) {        
        var newArr = {};

        for (var i=0; i<arr.length; ++i) {
            //use the value of the pivot element as key and use the remaining content as value
            newArr[arr[i][pivot]] = fluid.remove_if(arr[i], function (v,k) { return k == pivot; });
        };
        //console.log("new value: "+JSON.stringify(newArr));
        return newArr;
    };

    var pathFinder = function (list) {
        var path = "";
        var transformedPaths = [];
        //console.log("called with "+JSON.stringify(list)+ "(path: "+path+")");
        var pathFinderImpl = function (list, path) {
            return fluid.transform(list, function (v, k) {
                var newPath = (path == "" ? k : path+"."+k);
                //console.log("transform called with "+JSON.stringify(v)+" and path: "+path);
                if (fluid.isPrimitive(v)) {
                    return v;
                } else if (fluid.isArrayable(v) && validateArray(v, "name")) {
                    transformedPaths.push(newPath);
                    console.log("XML Settings handler transforming path: "+newPath);
                    return pathFinderImpl(fixArray(v, "name"), newPath)
                }
                return pathFinderImpl(v, newPath);
            });
        };
        console.log("pathArray: "+JSON.stringify(transformedPaths));
        return { pathArray: transformedPaths, root: pathFinderImpl(list, path).root};
    };

    gpii.settingsHandlers.XMLHandler.transform = function (input, pivot) {
        var tmp = pathFinder({root: input});
        console.log("Full log: "+JSON.stringify(tmp));
        console.log("Returning: "+JSON.stringify(tmp.root)+" with paths: "+JSON.stringify(tmp.pathArray));
        return tmp;

    };

    //Gets a settings array and a json-ified version of the XML,
    //sets each the relevant settings and returns the settings object with 
    //{oldValue: XXXX, newValue: YYYY} as values
    gpii.settingsHandlers.XMLHandler.applySettings = function (settings, obj) {
        var returnPayload = {};
        //edit each of the settings
        fluid.each(settings, function(value, el) {
            //store the previous value
            var prev = fluid.get(obj, el);
            //set the new value
            fluid.set(obj, el, value);
            //create entry in the return payload
            returnPayload[el] = { oldValue: prev, newValue: value };
        });
        return returnPayload;                
    };

    gpii.settingsHandlers.XMLHandler.readXMLFile = function (filename, encoding) {
        //TODO check for and handle read errors
        var xmlString = fs.readFileSync(filename, encoding || "utf-8");
        //parse XML to JSON and apply the settings
        return xm.tojson(xmlString);
    };

    gpii.settingsHandlers.XMLHandler.set = function (data) {
        var returnObj = fluid.copy(data);
        //each solution block
        return fluid.transform(returnObj, function (solution, solutionId) {
            //each array entry in the solution block
            return fluid.transform(solution, function (solutionEntry) {
                var options = solutionEntry.options;
                var settings = solutionEntry.settings;
                //only valid if a filename is set in options, else ignore this block
                if (options && options.filename) {
                    //read XML file
                    gpii.settingsHandlers.XMLHandler.readXMLFile(options.filename, options.encoding);
                    var newSettingsResponse = gpii.settingsHandlers.XMLHandler.applySettings(settings, json);
                    //Create XML - first line is the xml-tag from options if set
                    //the remaining file is our modified json converted to XML
                    var xml = options["xml-tag"] || "";
                    xml += xm.toxml(json);
                    //ensure text formatting is correct
                    var formatting = { "&": "&amp;" };
                    fluid.each(formatting, function(to, from) {
                        xml = xml.replace(new RegExp(from, "g"), to);
                    });
                    //and fix indentation/newlines so it's readable
                    var formattedXML = formatXml(xml);
                    //TODO check for and handler write errors
                    fs.writeFileSync(options.filename, formattedXML, options.encoding || "utf-8");
                    solutionEntry.settings = newSettingsResponse;
                }
                return solutionEntry;   
            });
        });
    };
}());
