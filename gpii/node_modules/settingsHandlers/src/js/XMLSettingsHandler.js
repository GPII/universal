/*!
GPII XML Settings Handler

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, $ */


(function () {
    
    "use strict";
    
    var fluid = require("infusion"),
        fs = require("fs");

    var XMLHandler = fluid.registerNamespace("gpii.settingsHandlers.XMLHandler");

    /**
     * Reads XML file.
     */
    XMLHandler.readXMLFile = function (options) {
        if (options === undefined) {
            fluid.fail("readXMLFile: expected an options block defining filename and encoding");
        }
         //TODO check for and handle read errors
        var xml = fs.readFileSync(options.filename, options.encoding || "utf-8");
        return xml;
    };

    /**
     * Wrute XML file.
     */
    XMLHandler.writeXMLFile = function (xml, options) {
        //TODO check for and handler write errors.
        fs.writeFileSync(options.filename, xml, options.encoding || "utf-8");
    };

    // TODO: For testing purposes, accept additional arguments in "solution.options" to
    // produce data via a callback rather than hardcoded to hit the filesystem
    
    // TODO: Rescue the algorithm gpii.invokeSettingsHandler from RegistrySettingsHandler.js 
    // line 226 and use it to simplify the loops of all settings handlers including this one
    XMLHandler.set = function (data) {
        var returnObj = fluid.copy(data);
        //each solution block
        return fluid.transform(returnObj, function (solution) {
            //each array entry in the solution block
            return fluid.transform(solution, function (solutionEntry) {
                var options = solutionEntry.options;
                var settings = solutionEntry.settings;
                //only valid if a filename is set in options, else ignore this block
                if (options && options.filename) {
                    //parse XML to JSON, apply the settings, and write the file.
                    var xml = XMLHandler.readXMLFile(options);
                    var json = XMLHandler.XMLtoJSON(xml, options);
                    var newSettingsResponse = solutionEntry.settings =
                        XMLHandler.applySettings(settings, json);

                    xml = XMLHandler.JSONtoXML(json, options);
                    XMLHandler.writeXMLFile(xml, options);
                }
                return solutionEntry;   
            });
        });
    };
}());
