/*!
GPII XML Settings Handler

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require */
(function () {
    var fluid = require("infusion"),
        fs = require("fs"),
        xm = require('xml-mapping'),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.settingsHandlers.XMLHandler");

    //http://stackoverflow.com/questions/376373/pretty-printing-xml-with-javascript
    var formatXml = function (xml) {
        var formatted = '';
        var reg = /(>)(<)(\/*)/g;
        xml = xml.replace(reg, '$1\r\n$2$3');
        var pad = 0;
        fluid.each(xml.split('\r\n'), function(node, index) {
            var indent = 0;
            if (node.match( /.+<\/\w[^>]*>$/ )) {
                indent = 0;
            } else if (node.match( /^<\/\w/ )) {
                if (pad !== 0) {
                    pad -= 1;
                }
            } else if (node.match( /^<\w[^>]*[^\/]>.*$/ )) {
                indent = 1;
            } else {
                indent = 0;
            }

            var padding = '';
            for (var i = 0; i < pad; i++) {
                padding += '  ';
            }

            formatted += padding + node + '\r\n';
            pad += indent;
        });
        return formatted;
    };

    //Gets a settings array and a json-ified version of the XML,
    //sets each the relevant settings and returns the settings object with 
    //{oldValue: XXXX, newValue: YYYY} as values
    gpii.settingsHandlers.XMLHandler.applySettings = function (settings, obj) {
        var returnPayload = {};
        //edit each of the settings
        fluid.each(settings, function(value, el) {
            //store the previous value
            var prev = fluid.get(obj, el);
            //set the new value
            fluid.set(obj, el, value);
            //create entry in the return payload
            returnPayload[el] = { oldValue: prev, newValue: value };
        });
        return returnPayload;                
    };

    gpii.settingsHandlers.XMLHandler.set = function (data) {
        var returnObj = fluid.copy(data);
        //each outer array
        return fluid.transform(returnObj, function (arrayEntry) {
            //each solution block
            return fluid.transform(arrayEntry, function (solution, solutionId) {
                //each array entry in the solution block
                return fluid.transform(solution, function (solutionEntry) {
                    var options = solutionEntry.options;
                    var settings = solutionEntry.settings;
                    //only valid if a filename is set in options, else ignore this block
                    if (options && options.filename) {
                        //read XML file
                        //TODO check for and handle read errors
                        var xmlString = fs.readFileSync(options.filename, options.encoding || "utf-8");
                        //parse XML to JSON and apply the settings
                        var json = xm.tojson(xmlString);
                        var newSettingsResponse = gpii.settingsHandlers.XMLHandler.applySettings(settings, json);
                        //Create XML - first line is the xml-tag from options if set
                        //the remaining file is our modified json converted to XML
                        var xml = options["xml-tag"] || "";
                        xml += xm.toxml(json);
                        //ensure text formatting is correct
                        var formatting = { "&": "&amp;" };
                        fluid.each(formatting, function(to, from) {
                            xml = xml.replace(new RegExp(from, "g"), to);
                        });
                        //and fix indentation/newlines so it's readable
                        var formattedXML = formatXml(xml);
                        //TODO check for and handler write errors
                        fs.writeFileSync(options.filename, formattedXML, options.encoding || "utf-8");
                        solutionEntry.settings = newSettingsResponse;
                    }
                    return solutionEntry;   
                });
            });
        });
    };
}());
