/*!
GPII XML Settings Handler

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, $ */


(function () {
    
    "use strict";
    
    var fluid = require("infusion"),
        fs = require("fs");

    var XMLHandler = fluid.registerNamespace("gpii.settingsHandlers.XMLHandler");

    /**
     * Reads XML file.
     */
    XMLHandler.readXMLFile = function (options) {
        if (options === undefined || options.filename === undefined) {
            fluid.fail("readXMLFile: expected an options block defining filename and encoding");
        }
         //TODO check for and handle read errors
        var xml = fs.readFileSync(options.filename, options.encoding || "utf-8");
        return xml;
    };

    /**
     * Wrute XML file.
     */
    XMLHandler.writeXMLFile = function (xml, options) {
        //TODO check for and handler write errors.
        fs.writeFileSync(options.filename, xml, options.encoding || "utf-8");
    };

    /**
     * Gets a settings array and a json-ified version of the XML,
     * sets each the relevant settings and returns the settings object with
     * {oldValue: XXXX, newValue: YYYY} as values
     * WARNING: Destructively modifies obj
     */
    XMLHandler.applySettings = function (settings, obj) {
        var returnPayload = {};
        //edit each of the settings
        fluid.each(settings, function(value, el) {
            //store the previous value
            var prev = fluid.get(obj, el, fluid.model.escapedGetConfig);            
            fluid.set(obj, el, value, fluid.model.escapedSetConfig);
            
            //create entry in the return payload
            returnPayload[el] = { oldValue: prev, newValue: value };
        });
        return returnPayload;                
    };


    //Function for looping through the payload sent to get/set calls. Looping is done
    //by fluid.transform calls, and at the level of each solution entry, the 'modifier' function
    //passed as parameter is called to allow editing of the solutionEntry based on the current settings 
    //(both passed as parameters to the modifier function)
    XMLHandler.transformPayload = function (data, modifier) {
        var returnObj = fluid.copy(data);
        //each solution block
       return fluid.transform(returnObj, function (solution) {
            //each array entry in the solution block
            return fluid.transform(solution, function (solutionEntry) {
                var options = solutionEntry.options;

                //only valid if a filename is set in options, else ignore this block
                if (options && options.filename) {
                    var xml = XMLHandler.readXMLFile(options);
                    var currentSettings = XMLHandler.XMLtoJSON(xml, options);
                    //modification of the entry
                    return modifier(solutionEntry, currentSettings);
                }
                return solutionEntry;
            });  
        });
    };

    // TODO: For testing purposes, accept additional arguments in "solution.options" to
    // produce data via a callback rather than hardcoded to hit the filesystem
    
    // TODO: Rescue the algorithm gpii.invokeSettingsHandler from RegistrySettingsHandler.js 
    // line 226 and use it to simplify the loops of all settings handlers including this one
    XMLHandler.set = function (data) {
        return XMLHandler.transformPayload(data, function (solutionEntry, currentSettings) {
            var options = solutionEntry.options;

            //applySettings will modify the settings object to contain the new settings
            //according to values past in solutionEntry
            solutionEntry.settings = XMLHandler.applySettings(solutionEntry.settings, currentSettings);
            //write out the changes - note that currentSettings contains modified settings
            var xml = XMLHandler.JSONtoXML(currentSettings, options);
            XMLHandler.writeXMLFile(xml, options);
            return solutionEntry;
        });
    };

    XMLHandler.get = function (data) {
        return XMLHandler.transformPayload(data, function (solutionEntry, currentSettings) {
            var newSettingsResponse = {};            
            var userRequestedSettings = solutionEntry.settings;
            
            fluid.each(userRequestedSettings, function (settingVal, settingKey) {
                var value = fluid.get(currentSettings, settingKey, fluid.model.escapedGetConfig);
                newSettingsResponse[settingKey] = value;
            });

            return { options: solutionEntry.options, settings: newSettingsResponse };
        });
    }
}());
