/*!
GPII Settings Handler Utilities

Copyright 2013 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

var fluid = fluid || require("infusion"),
    xm = require("xml-mapping"),
    $ = fluid.registerNamespace("jQuery");

var XMLHandler = fluid.registerNamespace("gpii.settingsHandlers.XMLHandler");

/**
 * "Pretty-prints" an XML string.
 *
 * This function is derived from sample code posted by Dan Brooks on Stack Overflow:
 * http://stackoverflow.com/questions/376373/pretty-printing-xml-with-javascript
 *
 * @param {String} xml the XML string to reformat
 * @return {String} the reformatted XML document
 */
XMLHandler.formatXml = function (xml) {
    var formatted = "";
    var reg = /(>)(<)(\/*)/g;
    xml = xml.replace(reg, "$1\r\n$2$3");
    var pad = 0;
    fluid.each(xml.split("\r\n"), function(node) {
        var indent = 0;
        if (node.match( /.+<\/\w[^>]*>$/ )) {
            indent = 0;
        } else if (node.match( /^<\/\w/ )) {
            if (pad !== 0) {
                pad -= 1;
            }
        } else if (node.match( /^<\w[^>]*[^\/]>.*$/ )) {
            indent = 1;
        } else {
            indent = 0;
        }

        var padding = "";
        for (var i = 0; i < pad; i++) {
            padding += "  ";
        }

        formatted += padding + node + "\r\n";
        pad += indent;
    });
    return formatted;
};

/**
 * Gets a settings array and a json-ified version of the XML,
 * sets each the relevant settings and returns the settings object with
 * {oldValue: XXXX, newValue: YYYY} as values
 * WARNING: Destructively modifies obj
 */
XMLHandler.applySettings = function (settings, obj) {
    var returnPayload = {};
    //edit each of the settings
    fluid.each(settings, function(value, el) {
        //store the previous value
        var prev = fluid.get(obj, el, fluid.model.escapedGetConfig);
        fluid.set(obj, el, value, fluid.model.escapedSetConfig);

        //create entry in the return payload
        returnPayload[el] = { oldValue: prev, newValue: value };
    });
    return returnPayload;
};

/**
 * Convert XML into JSON.
 * In case options.rules is present, trasform with those rules.
 * NOTE: array transformed to objects if given in knownArrays or detected
 * as using 'name' as pivot element.
 */
XMLHandler.XMLtoJSON = function (xml, options) {
    // Parse XML to JSON.
    var json = xm.tojson(xml);
    //  Apply the settings
    return (options && options.rules) ? fluid.model.transformWithRules(json, options.rules) : json;
};

/**
 * Convert JSON to XML.
 * In case options.rules is present, first tranform JSON with invert rules.
 */
XMLHandler.JSONtoXML = function (json, options) {
    options = options || {};
    // Create XML - first line is the xml-tag from options if set.
    var xml = options["xml-tag"] || "";
    // Get inverse transformation rules.
    var invertedJSON;
    if (options.rules) {
        var inverseRules = fluid.model.transform.invertConfiguration(options.rules);
        // Transform back.
        invertedJSON = fluid.model.transformWithRules(json, inverseRules);
    } else {
        invertedJSON = json;
    }
    xml += xm.toxml(invertedJSON);
    // Fix indentation/newlines so it's readable.
    xml = XMLHandler.formatXml(xml);
    return xml;
};