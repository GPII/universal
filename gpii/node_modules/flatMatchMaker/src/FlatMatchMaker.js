/*
* Flat Match Maker
*
* Copyright 2014 Raising the Floor - International
*
* Licensed under the New BSD license. You may not use this file except in
* compliance with this License.
*
* The research leading to these results has received funding from the European Union's
* Seventh Framework Programme (FP7/2007-2013)
* under grant agreement no. 289016.
*
* You may obtain a copy of the License at
* https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

/* eslint-env browser */
/* eslint strict: ["error", "function"] */

(function () {
    "use strict";

    var fluid = fluid || require("infusion"),
        gpii = fluid.registerNamespace("gpii");

    require("kettle");

    fluid.defaults("gpii.flatMatchMaker", {
        gradeNames: ["kettle.app"],
        components: {
            ontologyHandler: {
                "type": "gpii.ontologyHandler"
            }
        },
        requestHandlers: {
            matchPost: {
                route: "/match",
                method: "post",
                type: "gpii.flatMatchMaker.matchPost.handler"
            }
        },
        invokers: {
            match: {
                funcName: "gpii.flatMatchMaker.match",
                args: [ "{ontologyHandler}", "{arguments}.0", "{flatMatchMaker}.disposeStrategy"]
            },
            disposeStrategy: {
                funcName: "gpii.flatMatchMaker.disposeStrategy",
                args: [ "{arguments}.0", "{arguments}.1"]
            }
        }
    });

    fluid.defaults("gpii.flatMatchMaker.matchPost.handler", {
        gradeNames: ["kettle.request.http"],
        invokers: {
            handleRequest: {
                funcName: "gpii.flatMatchMaker.matchPost.handleRequest",
                args: [ "{gpii.flatMatchMaker}", "{request}.events.onSuccess", "{request}.req.body" ]
            }
        }
    });

    /*
     * Initial function to be called when the user hits the /match URL. Simply calls the
     *  gpii.flatMatchMaker.match function and fires the 'onSuccess' event when it returns
     */
    gpii.flatMatchMaker.matchPost.handleRequest = function (flatMatchMaker, onSuccess, body) {
        var matchedSolutions = flatMatchMaker.match(body);
        onSuccess.fire(matchedSolutions);
    };

    /*
     * Main function of the flat matchmaker. Ensures that the inferred common terms are taken
     * into account and that the preferences are stored in a hierarchical format, needed by
     * the flat MM, and then runs the framework's 'disposeSolutions' function with the
     * flatMatchMaker.disposeStrategy strategy. The correct output format is ensured by the
     * buildReturnPayload function of the MM framework.
     */
    gpii.flatMatchMaker.match = function (ontologyHandler, payload, disposeStrategy) {
        payload.preferences = gpii.matchMakerFramework.utils.addInferredCommonTerms(payload.preferences, payload.inferredCommonTerms);
        payload.hierarchicalPrefs = ontologyHandler.prefsToOntology(payload.preferences, "flat", "ISO24751");

        var transformSpec = gpii.ontologyHandler.getTransformSpec(ontologyHandler.ontologyTransformSpecs, "flat", "ISO24751");
        var disposed = gpii.matchMakerFramework.utils.disposeSolutions(payload, disposeStrategy, transformSpec);
        return gpii.matchMakerFramework.utils.buildReturnPayload(payload, disposed);
    };

    /*
     * Very simple strategy that accepts any solution for which any preference el-path matches
     * a one of the solutions capabilities (inferred from the capabilities transformations and
     * capabilities block of that solution)
     */
    gpii.flatMatchMaker.disposeStrategy = function (leaves, solrecs) {
        fluid.each(solrecs, function (solrec) {
            var accepted = fluid.find(leaves, function (leaf) {
                return fluid.get(solrec.skeleton, leaf, fluid.model.escapedGetConfig);
            });
            if (solrec.priority !== undefined) {
                accepted = true;
            }
            solrec.disposition = accepted ? "accept" : "reject";
        });
        return solrecs;
    };
})();
