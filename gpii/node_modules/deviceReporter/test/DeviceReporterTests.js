/**
 * GPII Device Reporter Tests
 *
 * Copyright 2015 Raising the Floor
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/kettle/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    path = require("path"),
    jqUnit = fluid.require("jqUnit"),
    configPath = path.resolve(__dirname, "./configs"),
    kettle = require("kettle"),
    gpii = fluid.registerNamespace("gpii");

require("universal");

kettle.loadTestingSupport();

fluid.registerNamespace("gpii.tests.deviceReporter");

fluid.defaults("gpii.tests.deviceReporter.platformReporterMock", {
    gradeNames: ["fluid.littleComponent", "autoInit"],
    invokers: {
        reportPlatform: {
            funcName: "fluid.identity",
            args: "{that}.options.platform"
        }
    }
});

gpii.tests.deviceReporter.testRequestResponse = function (data, expected) {
    jqUnit.assertDeepEq("DeviceReporter reports the expected payload",
                        expected, JSON.parse(data));
};

gpii.tests.deviceReporter.staticExpectedPayload = {
    solutions: [
        {
            "id": "com.commodore.rainbowIslands"
        },
        {
            "id": "com.commodore.barbarian"
        },
        {
            "id": "com.commodore.greenBeret"
        }
    ],
    OS: {
        id: "commodore",
        version: 64
    }
};

var testDefs = [
    {
        name: "Device Reporter tests",
        expect: 1,
        config: {
            configName: "static",
            configPath: configPath
        },
        expected: gpii.tests.deviceReporter.staticExpectedPayload,
        components: {
            getRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/device",
                    method: "GET",
                    port: 8081
                }
            },
        },
        sequence: [{
            func: "{getRequest}.send"
        }, {
            event: "{getRequest}.events.onComplete",
            listener: "gpii.tests.deviceReporter.testRequestResponse",
            args: ["{arguments}.0", "{that}.options.expected"]
        }]
    }
];

module.exports = kettle.test.bootstrapServer(testDefs);
