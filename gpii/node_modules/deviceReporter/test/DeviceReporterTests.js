/**
 * GPII Device Reporter Tests
 *
 * Copyright 2015 Raising the Floor
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/kettle/LICENSE.txt
 */

"use strict";

var fluid = require("universal"),
    path = require("path"),
    jqUnit = fluid.require("node-jqunit", require, "jqUnit"),
    configPath = path.resolve(__dirname, "./configs"),
    kettle = require("kettle"),
    gpii = fluid.registerNamespace("gpii");

require("universal");

gpii.loadTestingSupport();

fluid.registerNamespace("gpii.tests.deviceReporter");

gpii.tests.deviceReporter.testRequestResponse = function (data, expected) {
    jqUnit.assertDeepEq("DeviceReporter reports the expected payload",
                        expected, JSON.parse(data));
};

fluid.defaults("gpii.tests.deviceReporter.getRequest", {
    gradeNames: "kettle.test.request.http",
    path: "/device",
    method: "GET",
    port: 8081
});

gpii.tests.deviceReporter.staticExpectedPayload = {
    solutions: [
        {
            "id": "com.commodore.rainbowIslands"
        },
        {
            "id": "com.commodore.barbarian"
        },
        {
            "id": "com.commodore.greenBeret"
        }
    ],
    OS: {
        id: "commodore",
        version: 64
    }
};

gpii.tests.deviceReporter.base = function (deviceReporter) {
    jqUnit.assert("deviceReporter has a platformReporter component", deviceReporter.platformReporter);
    jqUnit.assert("deviceReporter has a nameResolver component", deviceReporter.nameResolver);

    jqUnit.assertDeepEq("platformReporter has a 'reportPlatform' invoker",
                        "function",
                        typeof(deviceReporter.platformReporter.reportPlatform));
    jqUnit.assertDeepEq("platformReporter reports the platform",
                        gpii.tests.deviceReporter.staticExpectedPayload.OS,
                        deviceReporter.platformReporter.reportPlatform());

    jqUnit.assertDeepEq("nameResolver has a 'resolveName' invoker",
                        "function",
                        typeof(deviceReporter.nameResolver.resolveName));
};

gpii.tests.deviceReporter["static"] = function (deviceReporter) {
    jqUnit.assertUndefined("static deviceReporter doesn't have a solutionsRegistryDataSource",
                           deviceReporter.solutionsRegistryDataSource);
    jqUnit.assert("deviceReporter has a installedSolutionsDataSource component", deviceReporter.installedSolutionsDataSource);
    jqUnit.assertDeepEq("nameResolver returns the expected resolved name",
                        "gpii.tests.foo",
                        deviceReporter.nameResolver.resolveName("gpii.tests.foo"));
};

gpii.tests.deviceReporter.live = function (deviceReporter) {
    jqUnit.assertUndefined("live deviceReporter doesn't have a installedSolutionsDataSource",
                           deviceReporter.installedSolutionsDataSource);
    jqUnit.assert("deviceReporter has a solutionsRegistryDataSource component",
                  deviceReporter.solutionsRegistryDataSource);
    jqUnit.assertDeepEq("nameResolver returns the expected resolved name",
                        "gpii.test.integration.deviceReporterAware.mockDeviceReporters.gpii.packageKit.find",
                        deviceReporter.nameResolver.resolveName("gpii.packageKit.find"));
};

var testDefs = [{
    name: "Device Reporter tests",
    expect: 9,
    config: {
        configName: "static",
        configPath: configPath
    },
    expectedGetResult: gpii.tests.deviceReporter.staticExpectedPayload,
    components: {
        getRequest: {
            type: "gpii.tests.deviceReporter.getRequest"
        }
    },
    events: {
        onSuccess: null
    },
    sequence: [{
        funcName: "gpii.tests.deviceReporter.base",
        args: "{that}.configuration.server.deviceReporter"
    }, {
        funcName: "gpii.tests.deviceReporter.static",
        args: "{that}.configuration.server.deviceReporter"
    }, {
        func: "{getRequest}.send"
    }, {
        event: "{getRequest}.events.onComplete",
        listener: "gpii.tests.deviceReporter.testRequestResponse",
        args: ["{arguments}.0", "{that}.options.expectedGetResult"]
    }]
}, {
    name: "Device Reporter tests",
    expect: 9,
    config: {
        configName: "live",
        configPath: configPath
    },
    expectedGetResult: gpii.tests.deviceReporter.staticExpectedPayload,
    components: {
        getRequest: {
            type: "gpii.tests.deviceReporter.getRequest"
        }
    },
    sequence: [{
        funcName: "gpii.tests.deviceReporter.base",
        args: "{that}.configuration.server.deviceReporter"
    }, {
        funcName: "gpii.tests.deviceReporter.live",
        args: "{that}.configuration.server.deviceReporter"
    }, {
        func: "{getRequest}.send"
    }, {
        event: "{getRequest}.events.onComplete",
        listener: "gpii.tests.deviceReporter.testRequestResponse",
        args: ["{arguments}.0", "{that}.options.expectedGetResult"]
    }]
}];

module.exports = kettle.test.bootstrapServer(testDefs);
