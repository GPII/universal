/*!
 * Device Reporter
 *
 * Copyright 2012 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    os = require("os"),
    gpii = fluid.registerNamespace("gpii");

require("kettle");
require("./DeviceReporterUtilities.js");

// TODO: This module has *NO* unit tests

fluid.defaults("gpii.deviceReporter", {
    gradeNames: "fluid.component"
});

fluid.defaults("gpii.deviceReporter.base", {
    gradeNames: ["kettle.app", "gpii.deviceReporter"],
    requestHandlers: {
        deviceGet: {
            route: "/device",
            type: "gpii.deviceReporter.handlers.get",
            method: "get"
        }
    },
    components: {
        platformReporter: {
            type: "gpii.platformReporter"
        },
        nameResolver: {
            type: "gpii.deviceReporter.nameResolver"
        }
    },
    invokers: {
        fireResponse: {
            funcName: "gpii.deviceReporter.fireResponse",
            args: ["{arguments}.0", "{arguments}.1", "{platformReporter}"]
        }
    }
});

fluid.defaults("gpii.deviceReporter.handlers.get", {
    gradeNames: ["kettle.request.http"],
    invokers: {
        handleRequest: {
            func: "{deviceReporter}.get",
            args: [
                "{request}"
            ]
        }
    }
});


fluid.defaults("gpii.deviceReporter.nameResolver", {
    gradeNames: ["fluid.component"],
    invokers: {
        resolveName: {
            funcName: "fluid.identity"
        }
    }
});

gpii.deviceReporter.fireResponse = function (request, installedSolutions, platformReporter) {
    request.events.onSuccess.fire({
        solutions: installedSolutions,
        OS: platformReporter.reportPlatform()
    });
};

fluid.defaults("gpii.deviceReporter.static", {
    gradeNames: ["gpii.deviceReporter.base"],
    components: {
        installedSolutionsDataSource: {
            type: "kettle.dataSource.file",
            options: {
                gradeNames: "kettle.dataSource.file.moduleTerms"
            }
        }
    },
    invokers: {
        get: {
            funcName: "gpii.deviceReporter.static.get",
            args: ["{arguments}.0", "{deviceReporter}"]
        }
    }
});

gpii.deviceReporter["static"].get = function (request, deviceReporter) {
    var promise = deviceReporter.installedSolutionsDataSource.get();
    promise.then(function (solutions) {
        if (!fluid.isDestroyed(deviceReporter)) { // Fix failure for GPII-1227 tests which can receive this response after the deviceReporter is gone
            deviceReporter.fireResponse(request, solutions); // TODO: Remove such checks once FLUID-5790 is resolved
        }
    }, function (err) {
        var error = fluid.extend(err, {
            statusCode: 500,
            message: "Failed to read deviceReporter source: " + err.message,
            isError: true
        });
        request.events.onError.fire(error);
    });
};

fluid.defaults("gpii.deviceReporter.live", {
    gradeNames: ["gpii.deviceReporter.base"],
    components: {
        // currently in "gpii.config.all.development.dr.production" as {flowManager}.solutionsRegistryDataSource
        // solutionsRegistryDataSource:             // should be supplied by integrator
    },
    invokers: {
        get: {
            funcName: "gpii.deviceReporter.live.get",
            args: ["{arguments}.0", "{deviceReporter}", "{solutionsRegistryDataSource}"]
        },
        filterByInstalledSolutions: {
            funcName: "gpii.deviceReporter.filterByInstalledSolutions",
            args: [ "{arguments}.0", "{deviceReporter}" ]
        }
    }
});

gpii.deviceReporter.live.get = function (request, deviceReporter, solutionsRegistryDataSource) {
    solutionsRegistryDataSource.get({
        os: deviceReporter.platformReporter.reportPlatform().id
    }, function (entries) {
        var filteredSolutions = deviceReporter.filterByInstalledSolutions(entries);
        deviceReporter.fireResponse(request, filteredSolutions);
    }, request.events.onError.fire);
};

gpii.deviceReporter.filterByInstalledSolutions = function (entries, deviceReporter) {
    var installedSolutions = [];
    fluid.each(entries, function (entry, entryId) {
        if (!installedSolutions.some(function (s) { return s.id === entryId; })) {
            var foundEntryId = fluid.find(entry.isInstalled, function (installedSolutionsReporter) {
                var resolvedName = deviceReporter.nameResolver.resolveName(installedSolutionsReporter.type, "deviceReporter");
                if (fluid.invokeGradedFunction(resolvedName, installedSolutionsReporter)) {
                    return entryId;
                }
            }, null);
            if  (foundEntryId !== null) {
                installedSolutions.push({ "id": foundEntryId });
            }
        }
    });
    return installedSolutions;
};

fluid.defaults("gpii.platformReporter", {
    gradeNames: ["fluid.component", "fluid.contextAware"],
    contextAwareness: {
        platform: {
            checks: {
                linux: {
                    contextValue: "{gpii.contexts.linux}",
                    gradeNames: "gpii.platformReporter.linux"
                },
                windows: {
                    contextValue: "{gpii.contexts.windows}",
                    gradeNames: "gpii.platformReporter.windows"
                }
            }
        }
    },
    invokers: {
        getBasicOS: "gpii.platformReporter.getBasicOS",
        reportPlatform: {
            funcName: "gpii.platformReporter.reportAll",
            args: ["{that}", "{that}.reportOSinfo"]
        },
        reportOSinfo: "fluid.identity"
    }
});

/**
 * Returns the OS name and its version.
 *
 * @return (Object) An object consisting of "id" and "version" properties.
 */
gpii.platformReporter.getBasicOS = function () {
    return {
        id: os.platform(),
        // TODO: Need a better strategy - Node semver fails horribly
        // in the face of the benign underscore (eg. x86_64).
        version: os.release().replace("_", "-")
    };
};

/**
 * Returns platform information such as OS, OS version, screen resolution
 * and so on.
 *
 * @param that (Component)  A platform reporter instance.
 * @param reportOSinfo {Function} The context specific function to call to
 *                                cquire OS specific platform information.
 */
gpii.platformReporter.reportAll = function (that, reportOSinfo) {
    var allInfo = that.getBasicOS();
    return Object.assign(allInfo, reportOSinfo());
};
