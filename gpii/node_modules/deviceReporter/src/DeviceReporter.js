/*!
 * Device Reporter
 *
 * Copyright 2012 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    os = require("os"),
    path = require("path"),
    gpii = fluid.registerNamespace("gpii");

fluid.require("kettle", require);
fluid.require("./DeviceGet.js", require);
fluid.require("./DeviceReporterUtilities.js", require);

fluid.defaults("gpii.deviceReporter.base", {
    gradeNames: ["kettle.app", "autoInit"],
    handlers: {
        deviceGet: {
            route: "/device",
            type: "get"
        }
    },
    components: {
        platformReporter: {
            type: "gpii.platformReporter.native"
        },
        nameResolver: {
            type: "gpii.deviceReporter.nameResolver"
        }
    },
    invokers: {
        fireResponse: {
            funcName: "gpii.deviceReporter.fireResponse",
            args: ["{arguments}.0", "{arguments}.1", "{platformReporter}"]
        }
    }
});

fluid.defaults("gpii.deviceReporter.nameResolver", {
    gradeNames: ["fluid.littleComponent", "autoInit"],
    invokers: {
        resolveName: {
            funcName: "fluid.identity"
        }
    }
});

gpii.deviceReporter.fireResponse = function (request, installedSolutions, platformReporter) {
    request.events.onSuccess.fire({
        solutions: installedSolutions,
        OS: platformReporter.reportPlatform()
    });
};

fluid.defaults("gpii.deviceReporter.static", {
    gradeNames: ["autoInit", "gpii.deviceReporter.base"],
    installedSolutionsUrl: "",
    root: path.join(__dirname, ".."),
    components: {
        installedSolutionsDataSource: {
            type: "kettle.dataSource.URL",
            options: {
                url: "{gpii.deviceReporter.static}.options.installedSolutionsUrl"
            }
        }
    },
    invokers: {
        get: {
            funcName: "gpii.deviceReporter.static.get",
            args: ["{arguments}.0", "{deviceReporter}"]
        }
    }
});

gpii.deviceReporter["static"].get = function (request, deviceReporter) {
    var promise = deviceReporter.installedSolutionsDataSource.get();
    promise.then(function (solutions) {
        if (!fluid.isDestroyed(deviceReporter)) { // Fix failure for GPII-1227 tests which can receive this response after the deviceReporter is gone
            deviceReporter.fireResponse(request, solutions); // TODO: Remove such checks once FLUID-5790 is resolved
        }
    }, function (err) {
        request.events.onError.fire({
            statusCode: 500,
            message: "Failed to read deviceReporter source.. " + (err.message || err.error),
            isError: true
        });
    });
};

fluid.defaults("gpii.deviceReporter.live", {
    gradeNames: ["autoInit", "gpii.deviceReporter.base"],
    invokers: {
        get: {
            funcName: "gpii.deviceReporter.live.get",
            args: ["{arguments}.0", "{deviceReporter}", "{flowManager}.solutionsRegistryDataSource"]
        }
    }
});

gpii.deviceReporter.live.get = function (request, deviceReporter, solutionsRegistryDataSource) {
    var installedSolutions = [];
    solutionsRegistryDataSource.get({os: deviceReporter.platformReporter.reportPlatform().id}, function onSuccess(entries) {
        fluid.each(entries, function (entry, entryId) {
            if (!installedSolutions.some(function (s) { return s.id === entryId; })) {
                var foundEntryId = fluid.find(entry.isInstalled, function (installedSolutionsReporter) {
                    var resolvedName = deviceReporter.nameResolver.resolveName(installedSolutionsReporter.type, "deviceReporter");
                    if (fluid.invokeGradedFunction(resolvedName, installedSolutionsReporter)) {
                        return entryId;
                    }
                }, null);
                if  (foundEntryId !== null) {
                    installedSolutions.push({ "id": foundEntryId });
                }
            }
        });
        deviceReporter.fireResponse(request, installedSolutions);
    });
};

fluid.defaults("gpii.platformReporter.native", {
    gradeNames: ["fluid.littleComponent", "autoInit"],
    invokers: {
        reportPlatform: {
            funcName: "gpii.platformReporter.native.reportPlatform"
        }
    }
});

gpii.platformReporter["native"].reportPlatform = function () { // "native" is a reserved word
    return {
        // TODO: need to report more details - windowmanager, etc.
        id: os.platform(),
        // TODO: Need a better strategy - Node semver fails horribly
        // in the face of the benign underscore (eg. x86_64).
        version: os.release().replace("_", "-")
    };
};

fluid.defaults("gpii.deviceReporter.dev", {
    gradeNames: ["autoInit", "kettle.urlExpander.distributeDevVariables"]
});
