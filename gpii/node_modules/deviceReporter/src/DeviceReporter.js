/*!
Device Reporter

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        path = require("path"),
        gpii = fluid.registerNamespace("gpii");

    fluid.require("gpiiFramework", require);
    fluid.require("./DeviceGet.js", require);
    
    fluid.defaults("gpii.deviceReporter", {
        gradeNames: ["gpii.app", "autoInit"],
        handlers: {
            deviceGet: {
                route: "/device",
                type: "get"
            }
        },
        installedSolutionsUrl: "",
        components: {
            rawInstalledSolutionsDataSource: {
                type: "gpii.dataSource"
            },
            installedSolutionsDataSource: {
                type: "gpii.callbackWrappingDataSource"
            }
        }
    });

    fluid.demands("gpii.urlExpander", ["deviceReporter.development", "gpii.deviceReporter"], {
        options: {
            vars: {
                port: "{gpii.server}.options.port",
                root: path.join(__dirname, "..")
            }
        }
    });

    fluid.demands("rawInstalledSolutionsDataSource", "gpii.deviceReporter", {
        funcName: "gpii.dataSource.URL",
        options: {
            url: "{gpii.deviceReporter}.options.installedSolutionsUrl"
        }
    });
    fluid.demands("installedSolutionsDataSource", "gpii.deviceReporter", {
        options: {
            components: {
                rawSource: "{rawInstalledSolutionsDataSource}"
            }
        }
    });

})();
    