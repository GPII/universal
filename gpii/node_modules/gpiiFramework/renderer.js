/*
GPII Serverside renderer component.

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.renderer");

    gpii.renderer.render = function (source, options) {
        var rendererOptions = options.rendererOptions;
        if (options.templates) {
            fluid.clear(rendererOptions.fossils);
        } else {
            options.templates = fluid.parseTemplates({
              base: {
                  resourceText: source,
                  href: ".",
                  resourceKey: ".",
                  cutpoints: rendererOptions.cutpoints
              }
          }, ["base"], rendererOptions);
        }
        return fluid.renderTemplates(options.templates, options.tree,
            rendererOptions, rendererOptions.fossils);
    };

    fluid.defaults("gpii.renderer.rendererOptions", {
        gradeNames: ["autoInit", "fluid.modelComponent"],
        components: {
            messageResolver: {
                type: "fluid.messageResolver",
                options: {
                    messageBase: "{gpii.renderer}.options.strings",
                    resolveFunc: "{gpii.renderer}.options.messageResolverFunction",
                    parents: ["{gpii.renderer}.options.parentBundle"]
                }
            },
            instantiator: "{instantiator}",
            parentComponent: "{gpii.renderer}"
        },
        fossils: {},
        model: "{gpii.renderer}.model",
        applier: "{gpii.renderer}.applier",
        resolverGetConfig: "{gpii.renderer}.options.resolverGetConfig",
        resolverSetConfig: "{gpii.renderer}.options.resolverSetConfig",
        autoBind: "{gpii.renderer}.options.rendererOptions.autoBind"
    });
    gpii.renderer.rendererOptions.finalInit = function (that) {
        that.options.messageSource = {
            type: "resolver", resolver: that.messageResolver
        };
        that.options.document = typeof document !== "undefined" ? document : {
            getElementById: function () {}
        };
        that.options.instantiator = that.instantiator;
        that.options.parentComponent = that.parentComponent;
    };

    fluid.defaults("gpii.renderer.rendererFnOptions", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        components: {
            rendererOptions: "{rendererOptions}"
        },
        repeatingSelectors: "{gpii.renderer}.options.repeatingSelectors",
        selectorsToIgnore: "{gpii.renderer}.options.selectorsToIgnore",
        resolverGetConfig: "{gpii.renderer}.options.resolverGetConfig",
        resolverSetConfig: "{gpii.renderer}.options.resolverSetConfig",
        resources: "{gpii.renderer}.options.resources"
    });
    gpii.renderer.rendererFnOptions.preInit = function (that) {
        if (that.options.resources && that.options.resources.template) {
            that.options.templateSource = function () {
                return that.options.resources.template.resourceText;
            };
        }
    };
    gpii.renderer.rendererFnOptions.finalInit = function (that) {
        that.options.rendererOptions = that.rendererOptions.options;
    };

    fluid.defaults("gpii.renderer", {
        gradeNames: ["autoInit", "fluid.modelComponent",
            "fluid.eventedComponent"],
        mergePolicy: {
            protoTree: "noexpand, replace",
            parentBundle: "nomerge"
        },
        rendererOptions: {
            autoBind: false
        },
        components: {
            rendererOptions: {
                type: "gpii.renderer.rendererOptions"
            },
            rendererFnOptions: {
                type: "gpii.renderer.rendererFnOptions"
            },
            renderer: {
                type: "gpii.renderer.impl"
            }
        },
        selectors: {},
        events: {
            prepareModelForRender: null,
            onRenderTree: null,
            afterRender: null,
            produceTree: "unicast"
        },
        listeners: {
            produceTree: [
                "{that}.onProduceTree"
            ]
        }
    });

    gpii.renderer.preInit = function (that) {
        that.onProduceTree = function () {
            return that.options.protoTree;
        };
        if (that.options.produceTree) {
            that.options.listeners.produceTree.push(that.options.produceTree);
        }
    };

    gpii.renderer.finalInit = function (that) {
        var rendererOptions = that.rendererOptions.options;

        that.refreshView = that.renderer.refreshView = function (source) {
            fluid.renderer.clearDecorators(rendererOptions.instantiator,
                rendererOptions.parentComponent);
            that.events.prepareModelForRender.fire(that.model, that.applier,
                that);
            var tree = that.events.produceTree.fire(that);
            tree = that.renderer.expander(tree);
            that.events.onRenderTree.fire(that, tree);
            var rendered = that.renderer.render(tree, source);
            that.events.afterRender.fire(that);
            return rendered;
        };

        if (that.options.renderOnInit) {
            that.refreshView();
        }
    };

    fluid.defaults("gpii.renderer.impl", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        selectors: "{gpii.renderer}.options.selectors",
        components: {
            rendererFnOptions: "{rendererFnOptions}",
            renderer: "{gpii.renderer}",
            expander: {
                type: "gpii.renderer.expander"
            }
        }
    });

    gpii.renderer.impl.finalInit = function (that) {
        var rendererFnOptions = that.rendererFnOptions.options,
            rendererOptions = rendererFnOptions.rendererOptions;
        that.source = rendererFnOptions.templateSource ?
            rendererFnOptions.templateSource : function (source) {
                return source;
            };

        that.render = function (tree, source) {
            var cutpointFn = rendererFnOptions.cutpointGenerator ||
                "fluid.renderer.selectorsToCutpoints";
            rendererOptions.cutpoints = rendererOptions.cutpoints ||
                fluid.invokeGlobalFunction(cutpointFn,
                    [that.options.selectors, rendererFnOptions]);

            if (typeof that.source === "function") {
                source = that.source(source);
            }

            return gpii.renderer.render(source, {
                rendererOptions: rendererOptions,
                tree: tree
            });
        };
    };

    fluid.defaults("gpii.renderer.expander", {
        gradeNames: ["autoInit", "fluid.modelComponent"],
        envAdd: {
            styles: "{gpii.renderer}.options.styles"
        },
        ELstyle: "${}",
        model: "{gpii.renderer}.model",
        applier: "{gpii.renderer}.applier",
        resolverGetConfig: "{gpii.renderer}.options.resolverGetConfig",
        resolverSetConfig: "{gpii.renderer}.options.resolverSetConfig",
        noexpand: "{gpii.renderer.rendererFnOptions}.options.noexpand"
    });

    gpii.renderer.expander.noexpand = function (tree) {
        return tree;
    };

    gpii.renderer.expander.preInit = function (that) {
        that.expand = that.options.noexpand ?
            gpii.renderer.expander.noexpand :
            fluid.renderer.makeProtoExpander(that.options);
    };

})();