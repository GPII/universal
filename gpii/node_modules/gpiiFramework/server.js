/*
GPII Infusion/Express Middleware

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        fs = require("fs"),
        path = require("path"),
        express = require("express"),
        $ = fluid.registerNamespace("jQuery"),
        gpii = fluid.registerNamespace("gpii");

    fluid.require("gpiiFramework", require);

    fluid.defaults("gpii.server", {
        gradeNames: ["fluid.eventedComponent", "autoInit"],
        preInitFunction: "gpii.server.preInit",
        finalInitFunction: "gpii.server.finalInit",
        components: {
            requests: {
                type: "gpii.requests"
            },
            requestProxy: {
                type: "gpii.requestProxy"
            },
            callbackWrapper: {
                type: "gpii.requestContextCallbackWrapper"
            },
            configurations: {
                type: "gpii.server.configurations"
            },
            bodyParser: {
                type: "gpii.middleware",
                createOnEvent: "onMiddleware"
            }
        },
        root: path.join(__dirname, "../../.."),
        events: {
            onMiddleware: null,
            onHandlers: null
        },
        listeners: {
            onHandlers: "{that}.registerHandlers"
        },
        handlers: {},
        port: 8080,
        logging: true
    });

    gpii.server.preInit = function (that) {
        fluid.setLogging(that.options.logging);
        that.server = express();

        that.amalgamateHandlers = function (handlers) {
            $.extend(true, that.options.handlers, handlers);
        };
        that.registerHandlers = function () {
            fluid.each(that.options.handlers, function (handler, context) {
                that.server[handler.type](handler.route, function (req) {
                    var request = req.fluidRequest;
                    request.context = fluid.typeTag(context);
                    request.events.handle.fire();
                });
            });
        };
    };

    gpii.server.finalInit = function (that) {
        that.events.onMiddleware.fire();
        that.events.onHandlers.fire();

        var port = that.options.port;
        fluid.log("Server is running on port: " + port);
        that.server.listen(port);
    };

    fluid.defaults("gpii.server.configurations", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        components: {
            createRequest: {
                type: "gpii.server.config.createRequest"
            }
        }
    });

    fluid.defaults("gpii.server.config", {
        gradeNames: ["fluid.eventedComponent", "autoInit"],
        finalInitFunction: "gpii.server.config.finalInit",
        events: {
            configure: null
        },
        listeners: {
            configure: "{that}.configureHandler"
        },
        preInitFunction: "gpii.server.config.preInit",
        invokers: {
            configure: "gpii.server.config.configure"
        }
    });

    fluid.defaults("gpii.server.config.createRequest", {
        gradeNames: ["autoInit", "gpii.server.config"]
    });

    gpii.server.config.preInit = function (that) {
        that.configureHandler = function () {
            that.configure();
        };
    };

    gpii.server.config.finalInit = function (that) {
        that.events.configure.fire();
    };

    gpii.server.config.configureCreateRequest = function (server, requests) {
        server.configure(function () {
            server.use(requests.create);
        });
    };

    fluid.demands("gpii.server.config.configure", "gpii.server.config.createRequest", {
        funcName: "gpii.server.config.configureCreateRequest",
        args: ["{gpii.server}.server", "{requests}"]
    });

    fluid.demands("bodyParser", "gpii.server", {
        funcName: "gpii.middleware.bodyParser"
    });

})();