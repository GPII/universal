/*!
GPII Utilities

Copyright 2012 OCAD University
Copyright 2012 Antranig Basman

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion");
    var path = require("path");
    var os = require("os");
    
    var gpii = fluid.registerNamespace("gpii");

    // Debugging definition - node.js's default is only 10!
    fluid.Error.stackTraceLimit = 100;

    // There seems to be no other way to determine whether signals are supported
    // than direct OS detection. Signals are current completley unsupported on 
    // Windows - https://github.com/joyent/node/issues/1553
    // The purpose of this code is to avoid hung or detached processes if node
    // is "killed" with CTRL-C etc.
    if (os.type().indexOf("Windows") === -1) {
        console.log(typeof(process.on));
        
        process.on("SIGTERM", function () {
            process.exit(0);
        });
    }

    gpii.pathToTermMap = function (path) {
        var termMap = {};
        fluid.each(path.match(/(:\w+)?/gi), function (param) {
            if (!param) {
                return;
            }
            param = param.substr(1);
            termMap[param] = "%" + param;
        });
        return termMap;
    };

    fluid.defaults("gpii.urlExpander", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        finalInitFunction: "gpii.urlExpander.finalInit"
    });
    
    gpii.urlExpander.finalInit = function (that) {
        fluid.log("urlExpander constructed with vars ", that.options.vars);
        that.expand = function (url) {
            fluid.log("urlExpander expanding url ", url);
            var expanded = fluid.stringTemplate(url, that.options.vars);
            fluid.log("urlExpander expanded: ",expanded);
            return expanded;
        };
    };

})();