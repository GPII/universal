/*!
GPII Utilities

Copyright 2012 OCAD University
Copyright 2012 Antranig Basman

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion");
    var path = require("path");
    var os = require("os");
    
    var gpii = fluid.registerNamespace("gpii");

    // Debugging definition - node.js's default is only 10!
    fluid.Error.stackTraceLimit = 100;

    // Handle an uncaught exception in case we get here when the fluid.fail does
    // not escape the function execution.
    process.on("uncaughtException", function (err) {
        var request = fluid.expand("{request}", {
                fetcher: fluid.makeEnvironmentFetcher()
            });
        // If request was already handled do nothing.
        if (!request) {
            return;
        }
        // Fire request's onError event in case it was not yet hendled.
        request.events.onError.fire({
            isError: true,
            message: err.message
        });
    });

    // This is a default handler for fluid.fail. The handler will
    // fetch a request object from the environment and fire its
    // onError event.
    fluid.pushSoftFailure(function (args, activity) {
        var messages = args.concat(activity),
            request = fluid.expand("{request}", {
                fetcher: fluid.makeEnvironmentFetcher()
            });
        if (!request) {
            messages = ["ASSERTION FAILED: "].concat(messages);
            console.log.apply(null, messages);
            throw new Error(args[0]);
        }
        request.events.onError.fire({
            isError: true,
            message: messages.join("")
        });
    });

    // There seems to be no other way to determine whether signals are supported
    // than direct OS detection. Signals are currently completely unsupported on 
    // Windows - https://github.com/joyent/node/issues/1553
    // The purpose of this code is to avoid hung or detached processes if node
    // is "killed" with CTRL-C etc.
    if (os.type().indexOf("Windows") === -1) {
        console.log(typeof(process.on));
        
        process.on("SIGTERM", function () {
            process.exit(0);
        });
    }

    fluid.defaults("gpii.urlExpander", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        finalInitFunction: "gpii.urlExpander.finalInit"
    });

    fluid.defaults("gpii.urlExpander.development", {
        gradeNames: ["gpii.urlExpander", "autoInit"],
        vars: {
            port: "{gpii.server}.options.port",
            root: "{gpii.app}.options.root"
        }
    });
    
    gpii.urlExpander.finalInit = function (that) {
        fluid.log("urlExpander constructed with vars ", that.options.vars);
        that.expand = function (url) {
            fluid.log("urlExpander expanding url ", url);
            var expanded = fluid.stringTemplate(url, that.options.vars);
            fluid.log("urlExpander expanded: ",expanded);
            return expanded;
        };
    };

})();