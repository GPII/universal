/*!
Rendering Tests

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, __dirname*/

// This loads universal.
var fluid = fluid || require("infusion"),
    jqUnit = jqUnit || require("jqUnit"),
    gpii = fluid.registerNamespace("gpii");

(function () {

    fluid.defaults("gpii.tests.rendererTests", {
        gradeNames: ["fluid.test.testEnvironment", "autoInit"],
        template: '<div class="container"><p class="my-paragraph"></p></div>',
        rendererOptions: {
            autoBind: false,
            cutpoints: [{
                id: "my-paragraph",
                selector: ".my-paragraph"
            }],
            fossils: {}
        },
        expectedTemplate: '<div class="container"><p class="my-paragraph">TEST</p></div>',
        expectedFirst: '<div class="container"><p class="my-paragraph" id="my-paragraph">TEST</p></div>',
        expectedLast: '<div class="container"><p class="my-paragraph" id="my-paragraph">NEW</p></div>',
        tree: {
            children: [{
                ID: "my-paragraph",
                value: "TEST"
            }]
        },
        components: {
            rendererMessages: {
                type: "gpii.renderer",
                options: {
                    strings: {
                        test: "TEST"
                    },
                    selectors: {
                        "my-paragraph": ".my-paragraph"
                    },
                    styles: {
                        myStyle: "my-style"
                    },
                    protoTree: {
                        "my-paragraph": {
                            messagekey: "test"
                        }
                    }
                }
            },
            rendererValueBinding: {
                type: "gpii.renderer",
                options: {
                    selectors: {
                        "my-paragraph": ".my-paragraph"
                    },
                    model: {
                        test: "TEST"
                    },
                    protoTree: {
                        "my-paragraph": "${test}"
                    },
                    rendererOptions: {
                        autoBind: true
                    }
                }
            },
            rendererTester: {
                type: "fluid.tests.rendererTester"
            }
        }
    });

    fluid.defaults("fluid.tests.rendererTester", {
        gradeNames: ["fluid.test.testCaseHolder", "autoInit"],
        modules: [{
            name: "Test value binding renderer.",
            tests: [{
                expect: 1,
                name: "Test gpii.renderer.render",
                type: "test",
                func: "fluid.tests.testRenderRender",
                args: ["{gpii.tests.rendererTests}.options.tree",
                    "{gpii.tests.rendererTests}.options.rendererOptions",
                    "{gpii.tests.rendererTests}.options.template",
                    "{gpii.tests.rendererTests}.options.expectedTemplate"
                ]
            }, {
                expect: 2,
                name: "Test template rendering with original model",
                sequence: [{
                    func: "fluid.tests.testRender",
                    args: ["{rendererValueBinding}",
                        "{gpii.tests.rendererTests}.options.template",
                        "{gpii.tests.rendererTests}.options.expectedFirst"
                    ]
                }, {
                    func: "fluid.tests.updateModel",
                    args: ["{rendererValueBinding}.applier", "test", "NEW"]
                }, {
                    func: "fluid.tests.testRender",
                    args: ["{rendererValueBinding}",
                        "{gpii.tests.rendererTests}.options.template",
                        "{gpii.tests.rendererTests}.options.expectedLast"
                    ]
                }]
            }, {
                expect: 1,
                name: "Test template rendering with messages.",
                type: "test",
                func: "fluid.tests.testRender",
                args: ["{rendererMessages}",
                    "{gpii.tests.rendererTests}.options.template",
                    "{gpii.tests.rendererTests}.options.expectedTemplate"
                ]
            }]
        }]
    });

    fluid.tests.testRender = function (renderer, template, expected) {
        jqUnit.assertEquals("Template is rendered correctly", expected,
            renderer.render(template));
    };

    fluid.tests.testRenderRender = function (tree, rendererOptions, template, expected) {
        jqUnit.assertEquals("Template is rendered correctly", expected,
            gpii.renderer.render(template, {
                tree: tree,
                rendererOptions: rendererOptions
            }));
    };

    fluid.tests.updateModel = function (applier, path, value) {
        applier.requestChange(path, value);
    };
}());