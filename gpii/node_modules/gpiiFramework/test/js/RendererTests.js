/*!
Rendering Tests

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, __dirname*/

(function () {
    // This loads universal.
     var fluid = require("infusion"),
         jqUnit = require("jqUnit"),
         gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.tests.rendererTests");

    var expand = function (toExpand, config) {
        if (!toExpand) {
            return toExpand;
        }
        if (typeof toExpand !== "string") {
            fluid.each(toExpand, function (val, key) {
                toExpand[key] = expand(val, config);
            });
            return toExpand;
        }
        var configStr = "{config}",
            sequenceStr = "{sequence}";
        if (toExpand.indexOf(configStr) === 0) {
            return fluid.get(config, toExpand.substring(configStr.length + 1));
        }
        if (toExpand.indexOf(sequenceStr) === 0) {
            return fluid.get(config.sequence, toExpand.substring(sequenceStr.length + 1));
        }
        var expanded;
        try {
            expanded = fluid.getGlobalValue(toExpand);
        } finally {
           expanded = expanded || toExpand;
        }
        return expanded;
    };
    var evalSequenceItem = function (item, config) {
        var func = item.func;
        var args = item.args;
        func = expand(func, config);
        fluid.each(args, function (arg, index) {
            args[index] = expand(arg, config);
        });
        return func.apply(undefined, args);
    };

    var template = '<div class="container"><p class="my-paragraph"></p></div>',
        expectedTemplate = '<div class="container"><p class="my-paragraph">TEST</p></div>',
        expectedStyleTemplate = '<div class="container"><p class="my-paragraph my-style">TEST</p></div>';

    gpii.tests.rendererTests.config = {
        "gpii.renderer.render": {
            template: template,
            expectedTemplate: expectedTemplate,
            tree: {
                children: [{
                    ID: "my-paragraph",
                    value: "TEST"
                }]
            },
            rendererOptions: {
                autoBind: false,
                cutpoints: [{
                    id: "my-paragraph",
                    selector: ".my-paragraph"
                }],
                fossils: {}
            },
            sequence: [{
                func: "gpii.renderer.render",
                args: [
                    "{config}.template", {
                        tree: "{config}.tree",
                        rendererOptions: "{config}.rendererOptions"
                    }
                ]
            }, {
                func: "jqUnit.assertEquals",
                args: [
                    "Template is rendered correctly",
                    "{config}.expectedTemplate",
                    "{sequence}.0"
                ]
            }]
        },
        "Renderer grade": {
            template: template,
            expectedTemplate: expectedStyleTemplate,
            strings: {
                test: "TEST"
            },
            selectors: {
                "my-paragraph": ".my-paragraph"
            },
            styles: {
                myStyle: "my-style"
            },
            protoTree: {
                "my-paragraph": {
                    messagekey: "test",
                    decorators: {
                        addClass: "{styles}.myStyle"
                    }
                }
            },
            sequence: [{
                func: "gpii.renderer",
                args: [{
                    selectors: "{config}.selectors",
                    protoTree: "{config}.protoTree",
                    styles: "{config}.styles",
                    strings: "{config}.strings"
                }]
            }, {
                func: "{sequence}.0.render", // renderer.render
                args: ["{config}.template"]
            }, {
                func: "jqUnit.assertEquals",
                args: [
                    "Template is rendered correctly",
                    "{config}.expectedTemplate",
                    "{sequence}.1"
                ]
            }]
        },
        "Renderer grade autobind": {
            template: template,
            expectedFirst: '<div class="container"><p class="my-paragraph" id="my-paragraph">TEST</p></div>',
            expectedLast: '<div class="container"><p class="my-paragraph" id="my-paragraph">NEW</p></div>',
            selectors: {
                "my-paragraph": ".my-paragraph"
            },
            model: {
                test: "TEST"
            },
            protoTree: {
                "my-paragraph": "${test}"
            },
            rendererOptions: {
                autoBind: true
            },
            sequence: [{
                func: "gpii.renderer",
                args: [{
                    selectors: "{config}.selectors",
                    protoTree: "{config}.protoTree",
                    model: "{config}.model",
                    rendererOptions: "{config}.rendererOptions"
                }]
            }, {
                func: "{sequence}.0.render", // renderer.render
                args: ["{config}.template"]
            }, {
                func: "jqUnit.assertEquals",
                args: [
                    "Template is rendered correctly",
                    "{config}.expectedFirst",
                    "{sequence}.1" // render result
                ]
            }, {
                func: "{sequence}.0.applier.requestChange",
                args: ["test", "NEW"]
            }, {
                func: "{sequence}.0.render", // renderer.render
                args: ["{config}.template"]
            }, {
                func: "jqUnit.assertEquals",
                args: [
                    "Template is rendered correctly again",
                    "{config}.expectedLast",
                    "{sequence}.4" // render result
                ]
            }]
        }
    };
    gpii.tests.rendererTests.runTests = function (configs) {
        var tester = jqUnit.TestCase ? jqUnit.TestCase("Renderer Tests") : jqUnit;
        fluid.each(configs, function (config, name) {
            var sequence = config.sequence;
            tester.test(name, function () {
                fluid.each(sequence, function (item, index) {
                    sequence[index] = evalSequenceItem(item, config);
                });
            });
        });
    };
}());