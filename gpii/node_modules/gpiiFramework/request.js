(function () {

    "use strict";

    var fluid = require("infusion"),
        uuid = require("node-uuid"),
        gpii = fluid.registerNamespace("gpii");

    fluid.defaults("gpii.requests", {
        gradeNames: ["autoInit", "fluid.eventedComponent"],
        components: {
            instantiator: "{instantiator}"
        },
        events: {
            registerMiddleware: null
        },
        listeners: {
            registerMiddleware: "{gpii.requests}.registerMiddleware"
        },
        preInitFunction: "gpii.requests.preInit",
        finalInitFunction: "gpii.requests.finalInit",
        middleware: {}
    });

    gpii.requests.preInit = function (that) {
        that.registerMiddleware = function (middlewareObject) {
            var eventName = middlewareObject.resolveEventName();
            that.options.middleware[eventName] = middlewareObject;
        };

        that.registerListeners = function () {
            return fluid.transform(that.options.middleware, function (middlewareObject) {
                return middlewareObject.handle;
            });
        };

        that.registerEvents = function () {
            return fluid.transform(that.options.middleware, function () {
                return null;
            });
        };
    };

    gpii.requests.finalInit = function (that) {
        // This function will create a lifecycle object that will serve as a context
        // for a current request/response sequence.
        that.create = function (req, res, next) {
            var name = uuid.v4(),
                instantiator = that.instantiator;
            that.options.components[name] = {
                type: "gpii.requests.request",
                options: {
                    req: req,
                    res: res,
                    next: next,
                    events: that.registerEvents(),
                    listeners: that.registerListeners()
                }
            };
        fluid.initDependent(that, name, instantiator);
            var request = that[name];
            // NOTE: This is here because any of these events can represent the moment
            // when the server is finished with the response.
            fluid.each(["close", "finish", "end", "error"], function (event) {
    // TODO: fix the framework so that it doesn't attempt to clear injected components
    // TODO: fix the framework so that components whose creation is triggered by an invoker call are properly contextualised
    // apply "noModTree" so that non-created subcomponents are not modified
                res.on(event, function () {
                    if (that[name]) {
                        request.events.onRequestEnd.fire();
                        instantiator.clearComponent(that, name, null, null, true);
                        delete that[name];
                    }
                });
            });

            // Adding a request object to express's req.
            req.fluidRequest = request;
            next();
        };
    };

    fluid.defaults("gpii.requests.request", {
        gradeNames: ["autoInit", "fluid.eventedComponent"],
        nickName: "request",
        mergePolicy: {
            req: "noexpand, nomerge",
            res: "noexpand, nomerge",
            next: "noexpand, nomerge"
        },
        components: {
            instantiator: "{instantiator}"
        },
        events: {
            onRequestEnd: null,
        },
        preInitFunction: "gpii.requests.request.preInit"
    });

    gpii.requests.request.preInit = function (that) {
        that.nickName = "request";
        fluid.each(["req", "res", "next"], function (obj) {
            that[obj] = that.options[obj];
        });

        that.handle = function () {
            that.options.components = that.options.components || {};
            that.options.components.handler = {
                type: "gpii.requests.request.handler"
            };
            fluid.initDependent(that, "handler", that.instantiator);
            that.handler.handle();
        };
    };

    fluid.defaults("gpii.requests.request.handler", {
        gradeNames: ["autoInit", "fluid.eventedComponent"],
        invokers: {
            handle: {
                funcName: "gpii.requests.request.handler.handle"
            }
        }
    });

})();