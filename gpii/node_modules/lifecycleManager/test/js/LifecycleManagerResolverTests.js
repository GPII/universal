/*!

    GPII Lifecycle Manager Resolver Tests

    Copyright 2018 Raising The Floor - International

    Licensed under the New BSD license. You may not use this file except in
    compliance with this License.

    You may obtain a copy of the License at
    https://github.com/GPII/universal/blob/master/LICENSE.txt

*/
/* eslint-env browser */
/* eslint strict: ["error", "function"] */

/* global jqUnit, fluid */

(function () {
    "use strict";
    fluid.setLogging(true);

    var gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.tests.lifecycleManager.resolver");

    fluid.defaults("gpii.tests.lifecycleManager.resolver.resolverConfig", {
        gradeNames: ["fluid.component"],
        resolvers: {}
    });

    gpii.tests.lifecycleManager.resolver.testOptions = {
        distributeOptions: {
            source: "{that}.options.resolverType",
            target: "{that resolverConfig}.type"
        },
        resolverType: "gpii.tests.lifecycleManager.resolver.resolverConfig"
    };

    gpii.tests.lifecycleManager.resolver.runSingleTest = function (testDef) {
        jqUnit.test(testDef.message, function () {
            //var lifecycleManager = gpii.lifecycleManager(gpii.tests.lifecycleManager.resolver.testOptions);
            var lifecycleManager = gpii.lifecycleManager();

            lifecycleManager.start(testDef.startPayload).then(
                function (success) {
                    jqUnit.assertTrue("gpii.lifecycleManager.start() succeeds", success);
                    var session = lifecycleManager.getSession("resolver-tests");
                    var expanded = session.localResolver(testDef.toExpand);
                    jqUnit.assertDeepEq(testDef.message + " - Variables should have been resolved as expected.", testDef.expectedResults, expanded);
                },
                function () {
                    jqUnit.fail("There should not have been any errors.");
                }
            );
        });
    };

    fluid.defaults("gpii.tests.lifecycleManager.resolver.testRunner", {
        gradeNames: ["fluid.component"],
        mergePolicy: {
            "testDefs": "nomerge, noexpand"
        },
        testDefs: {
            sessionResolver: {
                message: "Session resolver tests",
                startPayload: {
                    gpiiKey: "resolver-tests",
                    activeConfiguration: {
                        lifecycleInstructions: {}
                    }
                },
                toExpand: {
                    session: "${{session}.gpiiKey}"
                },
                expectedResults: {
                    session: "resolver-tests"
                }
            },
            gpiiKeyResolver: {
                message: "GPII key resolver tests",
                startPayload: {
                    gpiiKey: "resolver-tests",
                    activeConfiguration: {
                        lifecycleInstructions: {}
                    }
                },
                toExpand: {
                    gpiiKey: "${{gpiiKey}}"
                },
                expectedResults: {
                    gpiiKey: "resolver-tests"
                }
            }
        },
        invokers: {
            runSingleTest: {
                funcName: "gpii.tests.lifecycleManager.resolver.runSingleTest",
                args:     ["{arguments}.0"] // testDef
            }
        },
        listeners: {
            "onCreate.runTests": {
                funcName: "fluid.each",
                args:     ["{that}.options.testDefs", "{that}.runSingleTest"]
            }
        }
    });
})();
