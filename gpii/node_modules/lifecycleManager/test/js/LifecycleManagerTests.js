/*!
GPII Lifecycle Manager Tests

Copyright 2012 OCAD University
Copyright 2012 Raising The Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/* global jqUnit */

var fluid = fluid || require("infusion");

(function () {
    "use strict";

    var gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.tests.lifecycleManager");

    gpii.tests.lifecycleManager.fakeEnvironment = {
        JAWS_DIR: "e:\\Programs and Things\\Jaws\\",
        WINDIR: "c:\\Windows\\"
    };

    fluid.defaults("gpii.tests.lifecycleManager.resolverConfig", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        resolvers: {
            environment: "gpii.tests.lifecycleManager.environmentResolver"
        }
    });

    gpii.tests.lifecycleManager.environmentResolver = function (name) {
        return gpii.tests.lifecycleManager.fakeEnvironment[name];
    };

    gpii.tests.lifecycleManager.standardLifecycle = {
        "start": [
            "setSettings", {
                "type": "gpii.tests.lifecycleManager.mockExecHandler",
                "name": "exec",
                "command": "${{environment}.JAWS_DIR}jaws.exe",
                args: ["-settingsDirectory", "${{environment}.WINDIR}"]
            }
        ],
        "stop": [
            {
                "type": "gpii.tests.lifecycleManager.mockKillHandler",
                pid: "${{exec}.pid}"
            },
            "restoreSettings"
        ]
    };

    gpii.tests.lifecycleManager.configurationSpec = {
        "org.gnome.desktop.a11y.magnifier": {
            "settingsHandlers": [{
                "type": "gpii.tests.lifecycleManager.mockSettingsHandler",
                "settings": {
                    "cross-hairs-clip": true,
                    "cross-hairs-color": "red"
                },
                "options": {}
            }],
            "lifecycleManager": gpii.tests.lifecycleManager.standardLifecycle
        }
    };

    gpii.tests.lifecycleManager.specToSettingsHandlerRequest = {
        "type": "gpii.gsettings.set",
        "settings": {
            "cross-hairs-clip": true,
            "cross-hairs-color": "red"
        },
        "options": {}
    };

    gpii.tests.lifecycleManager.specToSettingsHandlerResponse = {
        "org.gnome.desktop.a11y.magnifier": [{
            "settings": {
                "cross-hairs-clip": true,
                "cross-hairs-color": "red"
            },
            "options": {}
        }]
    };

    gpii.tests.lifecycleManager.responseToSnapshotRequestNoSettings = {
        "org.gnome.desktop.interface": [{
            "settings": {}
        }]
    };

    gpii.tests.lifecycleManager.responseToSnapshotRequest = {
        "org.gnome.desktop.a11y.magnifier": [{
            "settings": {
                "cross-hairs-clip": {
                    "oldValue": false,
                    "newValue": true
                },
                "cross-hairs-color": {
                    "oldValue": "red",
                    "newValue": "red",
                    statusCode: 500,
                    statusMessage: "Internal Error"
                }
            }
        }]
    };

    gpii.tests.lifecycleManager.responseToSnapshotExpectedResponse = {
        "settings": {
            "cross-hairs-clip": false,
            "cross-hairs-color": "red"
        }
    };

    gpii.tests.lifecycleManager.invokeSettingsHandlersRequest = [{
        "type": "gpii.tests.lifecycleManager.mockSettingsHandler",
        "settings": {
            "cross-hairs-clip": true,
            "cross-hairs-color": "red"
        },
        "options": {}
    }];

    gpii.tests.lifecycleManager.invokeSettingsHandlersExpectedSnapshot = [{
        "type": "gpii.tests.lifecycleManager.mockSettingsHandler",
        "settings": {
            "cross-hairs-clip": false,
            "cross-hairs-color": "red"
        },
        "options": {}
    }];

    gpii.tests.lifecycleManager.testOptions = {
        distributeOptions: {
            source: "{that}.options.resolverType",
            target: "{that resolverConfig}.type"
        },
        resolverType: "gpii.tests.lifecycleManager.resolverConfig"
    };

    gpii.tests.lifecycleManager.userOptions = {
        userToken: 123
    };

    gpii.tests.lifecycleManager.sampleActiveSession = {
        123: {
            userToken: 123
        }
    };

    // Repository for "static" information reported by various kinds of handlers during the lifecycle
    // cleared to be empty on each test start
    gpii.tests.lifecycleManager.staticRepository = {};

    gpii.tests.lifecycleManager.mockExecHandler = function (command, args) {
        gpii.tests.lifecycleManager.staticRepository.execHandler = {
            command: command,
            args: args
        };
        return {
            pid: 8839
        };
    };

    fluid.defaults("gpii.tests.lifecycleManager.mockExecHandler", {
        gradeNames: "fluid.function",
        argumentMap: {
            command: 0,
            args: 1
            // Forfar: 4, Fife: 5
        }
    });

    gpii.tests.lifecycleManager.mockKillHandler = function (pid) {
        gpii.tests.lifecycleManager.staticRepository.killHandler = {
            pid: pid
        };
    };

    fluid.defaults("gpii.tests.lifecycleManager.mockKillHandler", {
        gradeNames: "fluid.function",
        argumentMap: {
            pid: 0
        }
    });

    gpii.tests.lifecycleManager.backingMockSettingsHandler = null; // initialised in every test that requires it

    gpii.tests.lifecycleManager.initBackingMock = function () {
        gpii.tests.lifecycleManager.backingMockSettingsHandler = gpii.test.integration.mockSettingsHandler();
        // initialise the mock with the initial settings expected at the end of the test
        gpii.tests.lifecycleManager.backingMockSettingsHandler.set(gpii.tests.lifecycleManager.settingsHandlerExpectedInputRestoreSettings);
    };

    gpii.tests.lifecycleManager.mockSettingsHandler = {
        set: function (data) {
            var togo = fluid.promise();
            gpii.invokeLater(function () {
                gpii.tests.lifecycleManager.staticRepository.settingsHandler = data;
                var response = gpii.resolveSync(gpii.tests.lifecycleManager.backingMockSettingsHandler.set(data));
                togo.resolve(response);
            }, 100);
            return togo;
        },
        get: function (data) {
            return gpii.resolveSync(gpii.tests.lifecycleManager.backingMockSettingsHandler.get(data));
        }
    };

    gpii.tests.lifecycleManager.assertExpectedExec = function () {
        jqUnit.assertDeepEq("Exec handler fired with expected arguments", {
            "command": gpii.tests.lifecycleManager.fakeEnvironment.JAWS_DIR + "jaws.exe",
            args: ["-settingsDirectory", gpii.tests.lifecycleManager.fakeEnvironment.WINDIR]
        }, gpii.tests.lifecycleManager.staticRepository.execHandler);
    };

    gpii.tests.lifecycleManager.assertExpectedSettingsHandler = function (message, expected) {
        jqUnit.assertDeepEq("expected input sent to settingsHandler" + message, expected, gpii.tests.lifecycleManager.staticRepository.settingsHandler);
    };


    gpii.tests.lifecycleManager.settingsHandlerExpectedInputNewSettings = {
        "org.gnome.desktop.a11y.magnifier": [{
            "settings": {
                "cross-hairs-clip": true,
                "cross-hairs-color": "red"
            },
            "options": {}
        }]
    };

    gpii.tests.lifecycleManager.settingsHandlerExpectedInputRestoreSettings = {
        "org.gnome.desktop.a11y.magnifier": [{
            "settings": {
                "cross-hairs-clip": false,
                "cross-hairs-color": "red"
            },
            "options": {}
        }]
    };

    gpii.tests.lifecycleManager.updateTestDefs = [{
        name: "Same prefs",
        activeSessions: gpii.tests.lifecycleManager.sampleActiveSession,
        userOptions: gpii.tests.lifecycleManager.userOptions,
        configurationSpec: gpii.tests.lifecycleManager.configurationSpec,
        updateSpec: {
            "org.gnome.desktop.a11y.magnifier": {
                "settingsHandlers": [{
                    "type": "gpii.tests.lifecycleManager.mockSettingsHandler",
                    "settings": {
                        "cross-hairs-clip": false,
                        "cross-hairs-color": "green"
                    },
                    "options": {}
                }],
                "lifecycleManager": gpii.tests.lifecycleManager.standardLifecycle
            }
        },
        expectedAppliedSolutions: {
            "org.gnome.desktop.a11y.magnifier": {
                "settingsHandlers": [{
                    "type": "gpii.tests.lifecycleManager.mockSettingsHandler",
                    "settings": {
                        "cross-hairs-clip": false,
                        "cross-hairs-color": "green"
                    },
                    "options": {}
                }],
                "lifecycleManager": gpii.tests.lifecycleManager.standardLifecycle
            }
        },
        expectedoriginalSettings: {
            "org.gnome.desktop.a11y.magnifier": {
                "settingsHandlers": [{
                    "type": "gpii.tests.lifecycleManager.mockSettingsHandler",
                    "settings": {
                        "cross-hairs-clip": false,
                        "cross-hairs-color": "red"
                    },
                    "options": {}
                }],
                "lifecycleManager": gpii.tests.lifecycleManager.standardLifecycle
            }
        }
    }, {
        name: "single pref",
        activeSessions: gpii.tests.lifecycleManager.sampleActiveSession,
        userOptions: gpii.tests.lifecycleManager.userOptions,
        configurationSpec: gpii.tests.lifecycleManager.configurationSpec,
        updateSpec: {
            "org.gnome.desktop.a11y.magnifier": {
                "settingsHandlers": [{
                    "type": "gpii.tests.lifecycleManager.mockSettingsHandler",
                    "settings": {
                        "cross-hairs-color": "green"
                    },
                    "options": {}
                }],
                "lifecycleManager": gpii.tests.lifecycleManager.standardLifecycle
            }
        },
        expectedAppliedSolutions: {
            "org.gnome.desktop.a11y.magnifier": {
                "settingsHandlers": [{
                    "type": "gpii.tests.lifecycleManager.mockSettingsHandler",
                    "settings": {
                        "cross-hairs-clip": true,
                        "cross-hairs-color": "green"
                    },
                    "options": {}
                }],
                "lifecycleManager": gpii.tests.lifecycleManager.standardLifecycle
            }
        },
        expectedoriginalSettings: {
            "org.gnome.desktop.a11y.magnifier": {
                "settingsHandlers": [{
                    "type": "gpii.tests.lifecycleManager.mockSettingsHandler",
                    "settings": {
                        "cross-hairs-clip": false,
                        "cross-hairs-color": "red"
                    },
                    "options": {}
                }],
                "lifecycleManager": gpii.tests.lifecycleManager.standardLifecycle
            }
        }
    }];

    gpii.tests.lifecycleManager.buildUpdateTests = function () {
        fluid.each(gpii.tests.lifecycleManager.updateTestDefs, function (test) {
            jqUnit.asyncTest("gpii.lifecycleManager.update() with active user session: " + test.name, function () {
                jqUnit.expect(4);

                var lifecycleManager = gpii.lifecycleManager(gpii.tests.lifecycleManager.testOptions);
                gpii.tests.lifecycleManager.initBackingMock();

                // fluid.set(lifecycleManager, "activeSessions", test.activeSessions);
                lifecycleManager.start(test.userOptions, test.configurationSpec, function (success) {
                    jqUnit.assertTrue("gpii.lifecycleManager.start() succeeds", success);

                    lifecycleManager.update(test.userOptions, test.updateSpec, function () {
                        var appliedSolutions = lifecycleManager.activeSessions[test.userOptions.userToken].appliedSolutions;
                        var originalSettings = lifecycleManager.activeSessions[test.userOptions.userToken].originalSettings;
                        jqUnit.assertDeepEq("Checking appliedSolutions after Update", appliedSolutions, test.expectedAppliedSolutions);
                        jqUnit.assertDeepEq("Checking originalSettings after Update", originalSettings, test.expectedoriginalSettings);
                        lifecycleManager.stop(gpii.tests.lifecycleManager.userOptions, function () {
                            jqUnit.assertUndefined(lifecycleManager.activeSessions[test.userOptions.userToken]);
                            jqUnit.start();
                        });

                    });

                });
            });
        });
    };

    gpii.tests.lifecycleManager.runTests = function () {
        jqUnit.module("Lifecycle Manager", function () {
            gpii.tests.staticRepository = {};
        });

        jqUnit.test("gpii.lifecycleManager.specToSettingsHandler()", function () {
            jqUnit.expect(1);
            var response = gpii.lifecycleManager.specToSettingsHandler("org.gnome.desktop.a11y.magnifier",  gpii.tests.lifecycleManager.specToSettingsHandlerRequest);
            jqUnit.assertDeepEq("createPayloadForSettingsHandler returning the correct payload",  gpii.tests.lifecycleManager.specToSettingsHandlerResponse, response);
        });

        jqUnit.test("gpii.lifecycleManager.responseToSnapshot() no settings", function () {
            jqUnit.expect(1);
            var response = gpii.lifecycleManager.responseToSnapshot("org.gnome.desktop.interface", gpii.tests.lifecycleManager.responseToSnapshotRequestNoSettings);
            jqUnit.assertDeepEq("responseToSnapshot returning the correct payload", {
                settings: {}
            }, response);
        });

        jqUnit.test("gpii.lifecycleManager.responseToSnapshot()", function () {
            jqUnit.expect(1);
            var response = gpii.lifecycleManager.responseToSnapshot("org.gnome.desktop.a11y.magnifier", gpii.tests.lifecycleManager.responseToSnapshotRequest);
            jqUnit.assertDeepEq("responseToSnapshot returning the correct payload", gpii.tests.lifecycleManager.responseToSnapshotExpectedResponse, response);
        });

        jqUnit.asyncTest("gpii.lifecycleManager.invokeSettingsHandlers()", function () {
            jqUnit.expect(2);
            var lifecycleManager = gpii.lifecycleManager();
            gpii.tests.lifecycleManager.initBackingMock();
            var snapshotPromise = lifecycleManager.invokeSettingsHandlers("org.gnome.desktop.a11y.magnifier", gpii.tests.lifecycleManager.invokeSettingsHandlersRequest);
            snapshotPromise.then(function (snapshot) {
                jqUnit.assertDeepEq("invokeSettingsHandlers produced snapshot", gpii.tests.lifecycleManager.invokeSettingsHandlersExpectedSnapshot, snapshot);
                gpii.tests.lifecycleManager.assertExpectedSettingsHandler(" - standalone", gpii.tests.lifecycleManager.settingsHandlerExpectedInputNewSettings);
                jqUnit.start();
            });
        });

        jqUnit.asyncTest("gpii.lifecycleManager.start() and stop()", function () {
            // 2 tests for the settingsHandler (see mockSettingsHandler function above)
            // 2 tests for the launchHandler (see mockLaunchHandler function above)
            // and the two asserts below
            jqUnit.expect(5);
            var lifecycleManager = gpii.lifecycleManager(gpii.tests.lifecycleManager.testOptions);
            gpii.tests.lifecycleManager.initBackingMock();

            lifecycleManager.start(gpii.tests.lifecycleManager.userOptions, gpii.tests.lifecycleManager.configurationSpec, function () {
                gpii.tests.lifecycleManager.assertExpectedExec();
                gpii.tests.lifecycleManager.assertExpectedSettingsHandler(" - on start", gpii.tests.lifecycleManager.settingsHandlerExpectedInputNewSettings);
                lifecycleManager.stop(gpii.tests.lifecycleManager.userOptions, function () {
                    gpii.tests.lifecycleManager.assertExpectedSettingsHandler(" - on stop", gpii.tests.lifecycleManager.settingsHandlerExpectedInputRestoreSettings);
                    jqUnit.assertEquals("Expected pid has been sent to kill handler",
                        8839, gpii.tests.lifecycleManager.staticRepository.killHandler.pid);
                    jqUnit.assertDeepEq("stop: Stop message to lifecycle manager, empty session state", {}, lifecycleManager.activeSessions);
                    jqUnit.start();
                });
            });
        });

        jqUnit.test("gpii.lifecycleManager.update() without active session", function () {
            try {
                fluid.pushSoftFailure(true);
                jqUnit.expect(1);

                var lifecycleManager = gpii.lifecycleManager(gpii.tests.lifecycleManager.testOptions);

                lifecycleManager.update(gpii.tests.lifecycleManager.userOptions, gpii.tests.lifecycleManager.configurationSpec);
            } catch (e) {
                jqUnit.assertTrue("Update method throws an error when user has no active session", e instanceof fluid.FluidError);
            } finally {
                fluid.pushSoftFailure(-1);
            }
        });

        gpii.tests.lifecycleManager.buildUpdateTests();
    };
}());
