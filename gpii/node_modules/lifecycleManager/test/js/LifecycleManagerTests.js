/*!
GPII Lifecycle Manager Tests

Copyright 2012 OCAD University
Copyright 2012 Raising The Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

The research leading to these results has received funding from the European Union's
Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 289016.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

/* eslint-env browser */
/* eslint strict: ["error", "function"] */

/* global jqUnit, fluid */

(function () {
    "use strict";
    fluid.setLogging(true);

    var gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.tests.lifecycleManager");

    gpii.tests.lifecycleManager.fakeEnvironment = {
        JAWS_DIR: "e:\\Programs and Things\\Jaws\\",
        WINDIR: "c:\\Windows\\"
    };

    fluid.defaults("gpii.tests.lifecycleManager.resolverConfig", {
        gradeNames: ["fluid.component"],
        resolvers: {
            environment: "gpii.tests.lifecycleManager.environmentResolver"
        }
    });

    gpii.tests.lifecycleManager.environmentResolver = function (name) {
        return gpii.tests.lifecycleManager.fakeEnvironment[name];
    };

    /**
     * ensure everything is clean and ready for the tests
     */
    gpii.tests.lifecycleManager.setup = function () {
        gpii.tests.lifecycleManager.staticRepository.execHandler = undefined;
    };

    /**
     * Create a solution entry, keyed by solution ID.
     * All subsequent arguments will be part of the solution entry key by solId
     */
    gpii.tests.lifecycleManager.buildLifecycleInstructions = function (solId) {
        var togo = {};

        for (var i = 1; i < arguments.length; ++i) {
            togo[solId] = fluid.extend(true, {}, togo[solId], arguments[i]);
        }

        return togo;
    };

    gpii.tests.lifecycleManager.buildSettingsHandlersEntry = function (settings) {
        return {
            "settingsHandlers": {
                "myconf": {
                    "type": "gpii.tests.lifecycleManager.mockSettingsHandler",
                    "settings": settings,
                    "options": {}
                }
            }
        };
    };

    gpii.tests.lifecycleManager.noUpdateLifecycle = {
        "active": true,
        "configure": [
            "settings.myconf"
        ],
        "restore": [
            "settings.myconf"
        ],
        "start": [
            {
                "type": "gpii.tests.lifecycleManager.mockExecHandler",
                "name": "exec",
                "command": "${{environment}.JAWS_DIR}jaws.exe",
                args: ["-settingsDirectory", "${{environment}.WINDIR}"]
            }
        ],
        "stop": [
            {
                "type": "gpii.tests.lifecycleManager.mockKillHandler",
                pid: "${{exec}.pid}"
            }
        ]
    };

    gpii.tests.lifecycleManager.configurationSpec = gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
        gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": true, "cross-hairs-color": "red" }),
        gpii.tests.lifecycleManager.noUpdateLifecycle,
        { "update": [ "settings.myconf" ] });


    gpii.tests.lifecycleManager.specToSettingsHandlerTests = {
        "Basic test for response and conversion": {
            request: {
                "type": "gpii.gsettings.set",
                "settings": {
                    "cross-hairs-clip": true,
                    "cross-hairs-color": "red"
                },
                "options": {}
            },
            response: [{
                "settings": {
                    "cross-hairs-clip": true,
                    "cross-hairs-color": "red"
                },
                "options": {}
            }]
        },
        "If supportedSettings directive is present, only supported settings are passed": {
            request: {
                "type": "gpii.gsettings.set",
                "options": {},
                "supportedSettings": {
                    "weirdSetting": {}
                },
                "settings": {
                    "weirdSetting": "foo",
                    "otherSetting": "bar"
                }
            },
            response: [{
                "settings": {
                    "weirdSetting": "foo"
                },
                "options": {}
            }]
        },
        "If supportedSettings directive and we have a multi SH solution, we should still be good": {
            request: {
                "type": "gpii.gsettings.set",
                "options": {},
                "supportedSettings": {
                    "weirdSetting": {}
                },
                "settings": {
                    "weirdSetting": "foo",
                    "otherSetting": "bar"
                }
            },
            isMultiSH: true,
            response: [{
                "settings": {
                    "weirdSetting": "foo"
                },
                "options": {}
            }]
        },
        "If supportedSettings directive is present - test no matching": {
            request: {
                "type": "gpii.gsettings.set",
                "options": {},
                "supportedSettings": {
                    "thirdSetting": {}
                },
                "settings": {
                    "weirdSetting": "foo",
                    "otherSetting": "bar"
                }
            },
            response: [{
                "settings": {},
                "options": {}
            }]
        },
        "Works with `undefined` values for settings (required when restoring)": {
            request: {
                "type": "gpii.gsettings.set",
                "options": {},
                "supportedSettings": {
                    "weirdSetting": {}
                },
                "settings": {
                    "weirdSetting": undefined,
                    "otherSetting": undefined
                }
            },
            response: [{
                "settings": {
                    "weirdSetting": undefined
                },
                "options": {}
            }]
        }
    };

    gpii.tests.lifecycleManager.responseToSnapshotRequestNoSettings = {
        "org.gnome.desktop.interface": [{
            "settings": {}
        }]
    };

    gpii.tests.lifecycleManager.responseToSnapshotRequest = {
        "org.gnome.desktop.a11y.magnifier": [{
            "settings": {
                "cross-hairs-clip": {
                    "oldValue": false,
                    "newValue": true
                },
                "cross-hairs-color": {
                    "oldValue": "red",
                    "newValue": "red",
                    statusCode: 500,
                    statusMessage: "Internal Error"
                }
            }
        }]
    };

    gpii.tests.lifecycleManager.responseToSnapshotExpectedResponse = {
        "settings": {
            "cross-hairs-clip": false,
            "cross-hairs-color": "red"
        }
    };

    gpii.tests.lifecycleManager.invokeSettingsHandlersRequest = {
        "type": "gpii.tests.lifecycleManager.mockSettingsHandler",
        "settings": {
            "cross-hairs-clip": true,
            "cross-hairs-color": "red"
        },
        "options": {}
    };

    gpii.tests.lifecycleManager.invokeSettingsHandlersExpectedSnapshot = {
        "type": "gpii.tests.lifecycleManager.mockSettingsHandler",
        "settings": {
            "cross-hairs-clip": false,
            "cross-hairs-color": "red"
        },
        "options": {}
    };

    gpii.tests.lifecycleManager.testOptions = {
        distributeOptions: {
            source: "{that}.options.resolverType",
            target: "{that resolverConfig}.type"
        },
        resolverType: "gpii.tests.lifecycleManager.resolverConfig"
    };

    gpii.tests.lifecycleManager.userOptions = {
        userToken: 123
    };

    gpii.tests.lifecycleManager.startPayload = fluid.extend(true, {}, gpii.tests.lifecycleManager.userOptions, {
        activeConfiguration: {
            lifecycleInstructions: gpii.tests.lifecycleManager.configurationSpec
        }
    });

    gpii.tests.lifecycleManager.sampleActiveSession = {
        123: {
            userToken: 123
        }
    };

    // Repository for "static" information reported by various kinds of handlers during the lifecycle
    // cleared to be empty on each test start
    gpii.tests.lifecycleManager.staticRepository = {};

    gpii.tests.lifecycleManager.mockExecHandler = function (command, args) {
        gpii.tests.lifecycleManager.staticRepository.execHandler = {
            command: command,
            args: args
        };
        return {
            pid: 8839
        };
    };

    fluid.defaults("gpii.tests.lifecycleManager.mockExecHandler", {
        gradeNames: "fluid.function",
        argumentMap: {
            command: 0,
            args: 1
            // Forfar: 4, Fife: 5
        }
    });

    gpii.tests.lifecycleManager.mockKillHandler = function (pid) {
        gpii.tests.lifecycleManager.staticRepository.killHandler = {
            pid: pid
        };
    };

    fluid.defaults("gpii.tests.lifecycleManager.mockKillHandler", {
        gradeNames: "fluid.function",
        argumentMap: {
            pid: 0
        }
    });

    gpii.tests.lifecycleManager.backingMockSettingsHandler = null; // initialised in every test that requires it

    gpii.tests.lifecycleManager.initBackingMock = function () {
        gpii.tests.lifecycleManager.backingMockSettingsHandler = gpii.test.integration.mockSettingsHandler();
        // initialise the mock with the initial settings expected at the end of the test
        gpii.tests.lifecycleManager.backingMockSettingsHandler.set(gpii.tests.lifecycleManager.settingsHandlerOriginalSystemSettings);
    };

    gpii.tests.lifecycleManager.mockSettingsHandler = {
        set: function (data) {
            var togo = fluid.promise();
            gpii.invokeLater(function () {
                gpii.tests.lifecycleManager.staticRepository.settingsHandler = data;
                var response = gpii.resolveSync(gpii.tests.lifecycleManager.backingMockSettingsHandler.set(data));
                togo.resolve(response);
            }, 100);
            return togo;
        },
        get: function (data) {
            return gpii.resolveSync(gpii.tests.lifecycleManager.backingMockSettingsHandler.get(data));
        }
    };

    gpii.tests.lifecycleManager.assertExpectedExec = function () {
        jqUnit.assertDeepEq("Exec handler fired with expected arguments", {
            "command": gpii.tests.lifecycleManager.fakeEnvironment.JAWS_DIR + "jaws.exe",
            args: ["-settingsDirectory", gpii.tests.lifecycleManager.fakeEnvironment.WINDIR]
        }, gpii.tests.lifecycleManager.staticRepository.execHandler);
    };

    gpii.tests.lifecycleManager.assertNoExec = function () {
        jqUnit.assertUndefined("Exec handler has not been fired",
            gpii.tests.lifecycleManager.staticRepository.execHandler);
    };

    gpii.tests.lifecycleManager.assertExpectedSettingsHandler = function (message, expected) {
        jqUnit.assertDeepEq("expected input sent to settingsHandler" + message, expected, gpii.tests.lifecycleManager.staticRepository.settingsHandler);
    };

    gpii.tests.lifecycleManager.settingsHandlerOriginalSystemSettings = {
        "org.gnome.desktop.a11y.magnifier": [{
            "settings": {
                "cross-hairs-clip": false,
                "cross-hairs-color": "red",
                "iamasetting": 200,
                "undefSetting": undefined
            },
            "options": {}
        }],
        "other.application": [{
            "settings": {
                "mysetting": "Hello World"
            },
            "type": "gpii.tests.lifecycleManager.mockSettingsHandler"
        }]
    };

    gpii.tests.lifecycleManager.settingsHandlerExpectedInputNewSettings = {
        "org.gnome.desktop.a11y.magnifier": [{
            "settings": {
                "cross-hairs-clip": true,
                "cross-hairs-color": "red"
            },
            "options": {}
        }]
    };

    gpii.tests.lifecycleManager.settingsHandlerExpectedInputRestoreSettings = {
        "org.gnome.desktop.a11y.magnifier": [{
            "settings": {
                "cross-hairs-clip": false,
                "cross-hairs-color": "red"
            },
            "options": {}
        }]
    };

    gpii.tests.lifecycleManager.updateTestDefs = fluid.freezeRecursive([{
        name: "Updating with the same prefs and values as already applied",
        activeSessions: gpii.tests.lifecycleManager.sampleActiveSession,
        startPayload: gpii.tests.lifecycleManager.startPayload,
        updateSpec: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": false, "cross-hairs-color": "green" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "settings.myconf" ] }),
        expectedAppliedSolutions: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": false, "cross-hairs-color": "green" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "settings.myconf" ] }),
        expectedOriginalSettings: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": false, "cross-hairs-color": "red" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "settings.myconf" ] })
    }, {
        name: "single pref changed without 'update' directive in solution registry entry",
        activeSessions: gpii.tests.lifecycleManager.sampleActiveSession,
        startPayload: fluid.extend(true, {}, gpii.tests.lifecycleManager.userOptions, {
            activeConfiguration: {
                lifecycleInstructions: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
                    gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": true, "cross-hairs-color": "red" }),
                    gpii.tests.lifecycleManager.noUpdateLifecycle)
            }
        }),
        updateSpec: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-color": "green" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle),
        // dont expect changes on update due to missing 'update' directive
        expectedAppliedSolutions: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": true, "cross-hairs-color": "red" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle),
        expectedOriginalSettings: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": false, "cross-hairs-color": "red" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle)
    }, {
        name: "Updating with normal reference to settingsHandler block, single settings",
        activeSessions: gpii.tests.lifecycleManager.sampleActiveSession,
        startPayload: gpii.tests.lifecycleManager.startPayload,
        updateSpec: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-color": "green" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "settings.myconf" ] }),
        expectedAppliedSolutions: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": true, "cross-hairs-color": "green" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "settings.myconf" ] }),
        expectedOriginalSettings: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": false, "cross-hairs-color": "red" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "settings.myconf" ] })
    }, {
        name: "Updating with normal reference to settingsHandler block, multiple settings",
        activeSessions: gpii.tests.lifecycleManager.sampleActiveSession,
        startPayload: gpii.tests.lifecycleManager.startPayload,
        updateSpec: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-color": "green", "cross-hairs-clip": false }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "settings.myconf" ] }),
        expectedAppliedSolutions: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": false, "cross-hairs-color": "green" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "settings.myconf" ] }),
        expectedOriginalSettings: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": false, "cross-hairs-color": "red" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "settings.myconf" ] })
    }, {
        name: "Updating with reference to 'configure' directive, single settings",
        activeSessions: gpii.tests.lifecycleManager.sampleActiveSession,
        startPayload: fluid.extend(true, {}, gpii.tests.lifecycleManager.userOptions, {
            activeConfiguration: {
                lifecycleInstructions: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
                    gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": true, "cross-hairs-color": "red" }),
                    gpii.tests.lifecycleManager.noUpdateLifecycle,
                    { "update": [ "configure" ] })
            }
        }),
        updateSpec: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-color": "green" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "configure" ] }),
        expectedAppliedSolutions: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": true, "cross-hairs-color": "green" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "configure" ] }),
        expectedOriginalSettings: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": false, "cross-hairs-color": "red" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "configure" ] })
    }, {
        name: "Updating with normal reference to settingsHandler block, and a setting not in the original settings applied to the system",
        activeSessions: gpii.tests.lifecycleManager.sampleActiveSession,
        startPayload: gpii.tests.lifecycleManager.startPayload,
        updateSpec: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-color": "green", "iamasetting": 100 }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "settings.myconf" ] }),
        expectedAppliedSolutions: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": true, "cross-hairs-color": "green", "iamasetting": 100 }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "settings.myconf" ] }),
        expectedOriginalSettings: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": false, "cross-hairs-color": "red", "iamasetting": 200 }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "settings.myconf" ] })
    }, {
        name: "Updating with normal reference to settingsHandler block, and a an application not in the original settings applied to the system",
        activeSessions: gpii.tests.lifecycleManager.sampleActiveSession,
        startPayload: gpii.tests.lifecycleManager.startPayload,
        updateSpec: gpii.tests.lifecycleManager.buildLifecycleInstructions("other.application",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "mysetting": "Hallow World" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "settings.myconf" ] }),
        expectedAppliedSolutions: fluid.extend(true, {},
            gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
                gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": true, "cross-hairs-color": "red" }),
                gpii.tests.lifecycleManager.noUpdateLifecycle,
                { "update": [ "settings.myconf" ] }),
            gpii.tests.lifecycleManager.buildLifecycleInstructions("other.application",
                gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "mysetting": "Hallow World" }),
                gpii.tests.lifecycleManager.noUpdateLifecycle,
                { "update": [ "settings.myconf" ] })),
        expectedOriginalSettings: fluid.extend(true, {},
            gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
                gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": false, "cross-hairs-color": "red" }),
                gpii.tests.lifecycleManager.noUpdateLifecycle,
                { "update": [ "settings.myconf" ] }),
            gpii.tests.lifecycleManager.buildLifecycleInstructions("other.application",
                gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "mysetting": "Hello World" }),
                gpii.tests.lifecycleManager.noUpdateLifecycle,
                { "update": [ "settings.myconf" ] }))
    }, {
     // TODO: What is the difference between this test and the next one? Also, eliminate the massive duplication
        name: "Updating with normal reference to settingsHandler block, and 'undefined' value stored in snapshot",
        activeSessions: gpii.tests.lifecycleManager.sampleActiveSession,
        startPayload: fluid.extend(true, {}, gpii.tests.lifecycleManager.userOptions, {
            activeConfiguration: {
                lifecycleInstructions: fluid.extend(true, {},
                    gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
                    gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": true, "undefSetting": "some value" }),
                    gpii.tests.lifecycleManager.noUpdateLifecycle,
                    { "update": [ "settings.myconf" ] }))
            }
        }),
        expectedFirstAppliedSettings: {
            "org.gnome.desktop.a11y.magnifier": [{
                "options": {},
                "settings": {
                    "cross-hairs-clip": true,
                    "undefSetting": "some value"
                }
            }]
        },
        updateSpec: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "undefSetting": "some other value" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "settings.myconf" ] }),
        expectedAppliedSolutions: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": true, "undefSetting": "some other value" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "settings.myconf" ] }),
        expectedOriginalSettings: {
            "org.gnome.desktop.a11y.magnifier": {
                "active": true,
                "configure": [
                    "settings.myconf"
                ],
                "restore": [
                    "settings.myconf"
                ],
                "settingsHandlers": {
                    "myconf": {
                        "options": {},
                        "settings": {
                            "cross-hairs-clip": false,
                            "undefSetting": gpii.undefinedEncoding
                        },
                        "type": "gpii.tests.lifecycleManager.mockSettingsHandler"
                    }
                },
                "start": [
                    {
                        "args": [
                            "-settingsDirectory",
                            "${{environment}.WINDIR}"
                        ],
                        "command": "${{environment}.JAWS_DIR}jaws.exe",
                        "name": "exec",
                        "type": "gpii.tests.lifecycleManager.mockExecHandler"
                    }
                ],
                "stop": [
                    {
                        "pid": "${{exec}.pid}",
                        "type": "gpii.tests.lifecycleManager.mockKillHandler"
                    }
                ],
                "update": [
                    "settings.myconf"
                ]
            }
        }
    }, {
        name: "Updating with normal reference to settingsHandler block, and 'undefined' value stored in snapshot on update",
        activeSessions: gpii.tests.lifecycleManager.sampleActiveSession,
        startPayload: gpii.tests.lifecycleManager.startPayload,
        updateSpec: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "undefSetting": "some value" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "settings.myconf" ] }),
        expectedAppliedSolutions: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
            gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": true, "cross-hairs-color": "red", "undefSetting": "some value" }),
            gpii.tests.lifecycleManager.noUpdateLifecycle,
            { "update": [ "settings.myconf" ] }),
        expectedOriginalSettings: {
            "org.gnome.desktop.a11y.magnifier": {
                "active": true,
                "configure": [
                    "settings.myconf"
                ],
                "restore": [
                    "settings.myconf"
                ],
                "settingsHandlers": {
                    "myconf": {
                        "options": {},
                        "settings": {
                            "cross-hairs-clip": false,
                            "cross-hairs-color": "red",
                            "undefSetting": undefined
                        },
                        "type": "gpii.tests.lifecycleManager.mockSettingsHandler"
                    }
                },
                "start": [
                    {
                        "args": [
                            "-settingsDirectory",
                            "${{environment}.WINDIR}"
                        ],
                        "command": "${{environment}.JAWS_DIR}jaws.exe",
                        "name": "exec",
                        "type": "gpii.tests.lifecycleManager.mockExecHandler"
                    }
                ],
                "stop": [
                    {
                        "pid": "${{exec}.pid}",
                        "type": "gpii.tests.lifecycleManager.mockKillHandler"
                    }
                ],
                "update": [
                    "settings.myconf"
                ]
            }
        }
    }]);

    gpii.tests.lifecycleManager.buildSequentialUpdateTests = function () {
        jqUnit.module("Sequential update tests");
        fluid.each(gpii.tests.lifecycleManager.updateTestDefs, function (test) {
            jqUnit.asyncTest("gpii.lifecycleManager.update() with active user session: " + test.name, function () {
                gpii.tests.lifecycleManager.setup();
                jqUnit.expect(5);

                var lifecycleManager = gpii.lifecycleManager(gpii.tests.lifecycleManager.testOptions);
                gpii.tests.lifecycleManager.initBackingMock();

                lifecycleManager.start(test.startPayload).then(function () {
                    var updatePayload = fluid.extend(true, {}, test.startPayload, {
                        activeConfiguration: {
                            lifecycleInstructions: test.updateSpec
                        }
                    });
                    gpii.tests.lifecycleManager.assertExpectedExec();
                    var expectedFirstAppliedSettings = (test.expectedFirstAppliedSettings !== undefined) ? test.expectedFirstAppliedSettings : gpii.tests.lifecycleManager.settingsHandlerExpectedInputNewSettings;
                    gpii.tests.lifecycleManager.assertExpectedSettingsHandler(" - on start", expectedFirstAppliedSettings);

                    lifecycleManager.update(updatePayload).then(function () {
                        var session = lifecycleManager.getSession(test.startPayload.userToken);
                        var appliedSolutions = session.model.appliedSolutions;
                        var originalSettings = session.model.originalSettings;
                        jqUnit.assertDeepEq("Checking appliedSolutions after update", test.expectedAppliedSolutions, appliedSolutions);
                        var expected = gpii.lifecycleManager.transformAllSolutionSettings(test.expectedOriginalSettings, gpii.settingsHandlers.settingsToChanges);
                        jqUnit.assertDeepEq("Checking originalSettings after update", expected, originalSettings);
                        lifecycleManager.stop(gpii.tests.lifecycleManager.userOptions).then(function () {
                            jqUnit.assertDeepEq("Session not running after stop", lifecycleManager.getSession(test.startPayload.userToken));
                            jqUnit.start();
                        });
                    });
                });
            });
        });
    };

    gpii.tests.lifecycleManager.buildAsyncUpdateTests = function () {
        jqUnit.module("Asynchronous update tests");
        fluid.each(gpii.tests.lifecycleManager.updateTestDefs, function (test) {
            jqUnit.asyncTest("gpii.lifecycleManager.update() with active user session: " + test.name, function () {
                gpii.tests.lifecycleManager.setup();
                jqUnit.expect(5);

                var lifecycleManager = gpii.lifecycleManager(gpii.tests.lifecycleManager.testOptions);
                gpii.tests.lifecycleManager.initBackingMock();

                var updatePayload = fluid.extend(true, {}, test.startPayload, {
                    activeConfiguration: {
                        lifecycleInstructions: test.updateSpec
                    }
                });

                lifecycleManager.start(test.startPayload).then(function () {
                    gpii.tests.lifecycleManager.assertExpectedExec();
                    var expectedFirstAppliedSettings = (test.expectedFirstAppliedSettings !== undefined) ? test.expectedFirstAppliedSettings : gpii.tests.lifecycleManager.settingsHandlerExpectedInputNewSettings;
                    gpii.tests.lifecycleManager.assertExpectedSettingsHandler(" - on start", expectedFirstAppliedSettings);
                });

                lifecycleManager.update(updatePayload).then(function () {
                    var session = lifecycleManager.getSession(test.startPayload.userToken);
                    var appliedSolutions = session.model.appliedSolutions;
                    var originalSettings = session.model.originalSettings;
                    jqUnit.assertDeepEq("Checking appliedSolutions after update", test.expectedAppliedSolutions, appliedSolutions);
                    var expected = gpii.lifecycleManager.transformAllSolutionSettings(test.expectedOriginalSettings, gpii.settingsHandlers.settingsToChanges);
                    jqUnit.assertDeepEq("Checking originalSettings after update", expected, originalSettings);
                });

                lifecycleManager.stop(gpii.tests.lifecycleManager.userOptions).then(function () {
                    jqUnit.assertDeepEq("Session not running after stop", lifecycleManager.getSession(test.startPayload.userToken));
                    jqUnit.start();
                });
            });
        });
    };

    gpii.tests.lifecycleManager.settingsToChanges = function (expected) {
        return gpii.settingsHandlers.transformOneSolutionSettings(expected, gpii.settingsHandlers.settingsToChanges);
    };

    gpii.tests.lifecycleManager.assertNoActiveSessions = function (lifecycleManager, message) {
        jqUnit.assertDeepEq(message + "- session state should be empty", [], lifecycleManager.getActiveSessionTokens());
    };

    gpii.tests.lifecycleManager.runTests = function () {
        jqUnit.module("Lifecycle Manager", function () {
            gpii.tests.staticRepository = {};
        });

        jqUnit.test("gpii.lifecycleManager.specToSettingsHandler()", function () {
            fluid.each(gpii.tests.lifecycleManager.specToSettingsHandlerTests, function (spec, name) {
                jqUnit.expect(1);
                var response = gpii.lifecycleManager.specToSettingsHandler("fake.solution",  spec.request, spec.isMultiSH);
                jqUnit.assertDeepEq(name,  { "fake.solution": spec.response }, response);
            });

            // Test for fail if a multi settingshandler solution doesn't have a supportedSettings directive
            var failingFunc = function () {
                gpii.lifecycleManager.specToSettingsHandler("fake.solution", {
                    "type": "gpii.gsettings.set",
                    "options": {},
                    "settings": {
                        "weirdSetting": "foo",
                        "otherSetting": "bar"
                    }
                }, true);
            };
            jqUnit.expectFrameworkDiagnostic("Expect failure if no supportedSettings for multiple SH solution",
                failingFunc, "missing the 'supportedSettings' directive");
        });

        jqUnit.test("gpii.lifecycleManager.responseToSnapshot() no settings", function () {
            jqUnit.expect(1);
            var response = gpii.lifecycleManager.responseToSnapshot("org.gnome.desktop.interface", gpii.tests.lifecycleManager.responseToSnapshotRequestNoSettings);
            jqUnit.assertDeepEq("responseToSnapshot returning the correct payload", {
                settings: {}
            }, response);
        });

        jqUnit.test("gpii.lifecycleManager.responseToSnapshot()", function () {
            jqUnit.expect(1);
            var response = gpii.lifecycleManager.responseToSnapshot("org.gnome.desktop.a11y.magnifier", gpii.tests.lifecycleManager.responseToSnapshotRequest);
            var expected = gpii.tests.lifecycleManager.settingsToChanges(gpii.tests.lifecycleManager.responseToSnapshotExpectedResponse);
            jqUnit.assertDeepEq("responseToSnapshot returning the correct payload", expected, response);
        });

        jqUnit.asyncTest("gpii.lifecycleManager.invokeSettingsHandler()", function () {
            jqUnit.expect(2);
            var lifecycleManager = gpii.lifecycleManager();
            gpii.tests.lifecycleManager.initBackingMock();
            var snapshotPromise = lifecycleManager.invokeSettingsHandler("org.gnome.desktop.a11y.magnifier", gpii.tests.lifecycleManager.invokeSettingsHandlersRequest);
            var expected = gpii.tests.lifecycleManager.settingsToChanges(gpii.tests.lifecycleManager.invokeSettingsHandlersExpectedSnapshot);
            snapshotPromise.then(function (snapshot) {
                jqUnit.assertDeepEq("invokeSettingsHandlers produced snapshot", expected, snapshot);
                gpii.tests.lifecycleManager.assertExpectedSettingsHandler(" - standalone", gpii.tests.lifecycleManager.settingsHandlerExpectedInputNewSettings);
                jqUnit.start();
            });
        });

        jqUnit.asyncTest("gpii.lifecycleManager.start() and stop()", function () {
            gpii.tests.lifecycleManager.setup();
            // 2 tests for the settingsHandler (see mockSettingsHandler function above)
            // 2 tests for the launchHandler (see mockLaunchHandler function above)
            // and the two asserts below
            jqUnit.expect(5);
            var lifecycleManager = gpii.lifecycleManager(gpii.tests.lifecycleManager.testOptions);
            gpii.tests.lifecycleManager.initBackingMock();

            var promise = lifecycleManager.start(gpii.tests.lifecycleManager.startPayload);
            promise.then(function () {
                gpii.tests.lifecycleManager.assertExpectedExec();
                gpii.tests.lifecycleManager.assertExpectedSettingsHandler(" - on start", gpii.tests.lifecycleManager.settingsHandlerExpectedInputNewSettings);
                var stopPromise = lifecycleManager.stop(gpii.tests.lifecycleManager.userOptions);
                stopPromise.then(function () {
                    gpii.tests.lifecycleManager.assertExpectedSettingsHandler(" - on stop", gpii.tests.lifecycleManager.settingsHandlerExpectedInputRestoreSettings);
                    jqUnit.assertEquals("Expected pid has been sent to kill handler",
                        8839, gpii.tests.lifecycleManager.staticRepository.killHandler.pid);
                    gpii.tests.lifecycleManager.assertNoActiveSessions(lifecycleManager, "stop: Stop message to lifecycle manager");
                    jqUnit.start();
                });
            });
        });

        // tests for active: false and active: undefined.
        // active: true is tested in all the other tests
        var activeValues = [ false, undefined ];
        fluid.each(activeValues, function (active) {
            jqUnit.asyncTest("gpii.lifecycleManager.start() with active: " + (active === undefined ? "undefined" : active), function () {
                //reset the exec values
                gpii.tests.lifecycleManager.setup();

                jqUnit.expect(2);
                var lifecycleManager = gpii.lifecycleManager(gpii.tests.lifecycleManager.testOptions);
                gpii.tests.lifecycleManager.initBackingMock();

                // set up payload with active false
                var activeFalsePayload = fluid.copy(gpii.tests.lifecycleManager.startPayload);
                fluid.set(activeFalsePayload, [ "activeConfiguration", "lifecycleInstructions", "org.gnome.desktop.a11y.magnifier", "active" ], active);

                lifecycleManager.start(activeFalsePayload).then(function () {
                    gpii.tests.lifecycleManager.assertExpectedSettingsHandler(" - on start", gpii.tests.lifecycleManager.settingsHandlerExpectedInputNewSettings);
                    gpii.tests.lifecycleManager.assertNoExec();
                    jqUnit.start();
                });
            });
        });

        jqUnit.test("gpii.lifecycleManager.update() without active session", function () {
            jqUnit.expectFrameworkDiagnostic("Error for update for user without session", function () {
                var lifecycleManager = gpii.lifecycleManager(gpii.tests.lifecycleManager.testOptions);
                lifecycleManager.update(gpii.tests.lifecycleManager.startPayload);
            }, "session");
        });

        gpii.tests.lifecycleManager.buildSequentialUpdateTests();
        gpii.tests.lifecycleManager.buildAsyncUpdateTests();


        jqUnit.asyncTest("gpii.lifecycleManager.update() tests for 'stop' reference", function () {
            // initial payload:
            var startPayload = fluid.extend(true, {}, gpii.tests.lifecycleManager.userOptions, {
                activeConfiguration: {
                    lifecycleInstructions: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
                        gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": true, "cross-hairs-color": "red" }),
                        gpii.tests.lifecycleManager.noUpdateLifecycle,
                        { "update": [ "stop" ] })
                }
            });

            gpii.tests.lifecycleManager.setup();
            jqUnit.expect(3);

            var lifecycleManager = gpii.lifecycleManager(gpii.tests.lifecycleManager.testOptions);
            gpii.tests.lifecycleManager.initBackingMock();

            lifecycleManager.start(startPayload).then(function () {
                // check that things have 'started'
                gpii.tests.lifecycleManager.assertExpectedExec();

                lifecycleManager.update(startPayload).then(function () {
                    // check that things have 'stopped'
                    jqUnit.assertEquals("Expected pid has been sent to kill handler",
                        8839, gpii.tests.lifecycleManager.staticRepository.killHandler.pid);
                    lifecycleManager.stop(gpii.tests.lifecycleManager.userOptions).then(function () {
                        gpii.tests.lifecycleManager.assertNoActiveSessions(lifecycleManager, "no active sessions running after stop");
                        jqUnit.start();
                    });
                });
            });
        });

        jqUnit.asyncTest("gpii.lifecycleManager.update() tests for 'stop' and 'start' reference", function () {
            // initial payload:
            var startPayload = fluid.extend(true, {}, gpii.tests.lifecycleManager.userOptions, {
                activeConfiguration: {
                    lifecycleInstructions: gpii.tests.lifecycleManager.buildLifecycleInstructions("org.gnome.desktop.a11y.magnifier",
                        gpii.tests.lifecycleManager.buildSettingsHandlersEntry({ "cross-hairs-clip": true, "cross-hairs-color": "red" }),
                        gpii.tests.lifecycleManager.noUpdateLifecycle,
                        { "update": [ "stop", "start" ] })
                }
            });

            gpii.tests.lifecycleManager.setup();
            jqUnit.expect(4);

            var lifecycleManager = gpii.lifecycleManager(gpii.tests.lifecycleManager.testOptions);
            gpii.tests.lifecycleManager.initBackingMock();

            lifecycleManager.start(startPayload).then(function () {
                // check that things have 'started'
                gpii.tests.lifecycleManager.assertExpectedExec();

                lifecycleManager.update(startPayload).then(function () {
                    // check that things have 'stopped'
                    jqUnit.assertEquals("Expected pid has been sent to kill handler",
                        8839, gpii.tests.lifecycleManager.staticRepository.killHandler.pid);
                    gpii.tests.lifecycleManager.assertExpectedExec();

                    lifecycleManager.stop(gpii.tests.lifecycleManager.userOptions).then(function () {
                        gpii.tests.lifecycleManager.assertNoActiveSessions(lifecycleManager, "no active sessions running after stop");
                        jqUnit.start();
                    });
                });
            });
        });
    };
})();
