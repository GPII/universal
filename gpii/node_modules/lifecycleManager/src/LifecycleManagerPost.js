/**
 GPII Lifecycle Manager POST Handler

 Copyright 2013 OCAD University

 Licensed under the New BSD license. You may not use this file except in
 compliance with this License.

 You may obtain a copy of the License at
 https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii");

    fluid.defaults("kettle.requests.request.handler.lifecycleManagerStart", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        invokers: {
            handle: {
                funcName: "gpii.lifecycleManager.handle",
                args: ["{requestProxy}.events.onSuccess", "{request}.req.params.token", "{gpii.lifecycleManager}.start", "{request}.req.body"],
                dynamic: true
            }
        }
    });

    fluid.defaults("kettle.requests.request.handler.lifecycleManagerStop", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        invokers: {
            handle: {
                funcName: "gpii.lifecycleManager.handle",
                args: ["{requestProxy}.events.onSuccess", "{request}.req.params.token", "{gpii.lifecycleManager}.stop"],
                dynamic: true
            }
        }
    });

    fluid.defaults("kettle.requests.request.handler.lifecycleManagerUpdate", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        invokers: {
            handle: {
                funcName: "gpii.lifecycleManager.handle",
                args: ["{requestProxy}.events.onSuccess", "{request}.req.params.token", "{gpii.lifecycleManager}.update", "{request}.req.body"],
                dynamic: true
            }
        }
    });

    gpii.lifecycleManager.handle = function (event, token, method, match) {
        var args = [{
            userToken: token
        }, event.fire];
        if (match) {
            args.splice(1, 0, match);
        }
        method.apply(null, args);
    };

})();
