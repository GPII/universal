/*
 * GPII Canopy MatchMaker Tests
 *
 * Copyright 2012 OCAD University
 * Copyright 2012 Raising The Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

// Declare dependencies
/*global jqUnit, $, require */

"use strict";

var fluid = fluid || require("infusion");
var gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.tests.canopyMatchMaker");

var magnifier = {
    "settingsHandlers": {
        "myconf": {
            "type": "gpii.integrationTesting.mockSettingsHandler",
            "capabilities": ["display.screenEnhancement"],
            "capabilitiesTransformations": {
                "mag-factor": "display.screenEnhancement.magnification",
                "show-cross-hairs": "display.screenEnhancement.-provisional-showCrosshairs",
                "mouse-tracking": {
                    "transform": {
                        "type": "fluid.transforms.valueMapper",
                        "defaultInputPath": "display.screenEnhancement.tracking",
                        "match": {
                            "mouse": "centered"
                        }
                    }
                }
            }
        }
    }
};

var lesserMagnifier = {
    "settingsHandlers": {
        "myconf": {
            "type": "gpii.integrationTesting.mockSettingsHandler",
            "capabilitiesTransformations": {
                "mag-factor": "display.screenEnhancement.magnification"
            }
        },
        "yourconf": {
            "type": "gpii.integrationTesting.mockSettingsHandler",
            "capabilities": "display.screenEnhancement.magnification"
        }
    }
};

var magnifierSkeleton = {
    display: {
        screenEnhancement: {
            magnification: {},
            "-provisional-showCrosshairs": {},
            tracking: {}
        }
    }
};

var sammyProfile = {
    "display": {
        "screenEnhancement": {
            "fontSize": 24,
            "foregroundColor": "white",
            "backgroundColor": "black",
            "fontFace": {
                "fontName": ["Comic Sans"],
                "genericFontFace": "sans serif"
            },
            "magnification": 2.0,
            "tracking": ["mouse"],
            "invertImages": true,
            "-provisional-showCrosshairs": true
        }
    }
};

var sammyLeaves = [
    "display.screenEnhancement.-provisional-showCrosshairs",
    "display.screenEnhancement.backgroundColor",
    "display.screenEnhancement.fontFace.fontName.0",
    "display.screenEnhancement.fontFace.genericFontFace",
    "display.screenEnhancement.fontSize",
    "display.screenEnhancement.foregroundColor",
    "display.screenEnhancement.invertImages",
    "display.screenEnhancement.magnification",
    "display.screenEnhancement.tracking.0"
];

var expandFitness = function (fitnesses) {
    return fluid.transform(fitnesses, function (fit, index) {
        return {
            fitness: fit,
            index: index
        };
    });
};

var extractIndices = function (solns) {
    return fluid.transform(solns, function (soln) {
        return soln.index;
    });
};

// only used by canopyMatchMaker tests - moved from MatchMakerFramework
gpii.canopyMatchMaker.utils.extractDispositions = function (solrecs) {
    var togo = {};
    fluid.each(solrecs, function (soln) {
        togo[soln.index] = soln.disposition;
    });
    return togo;
};

gpii.tests.canopyMatchMaker.runBasicTests = function () {
    jqUnit.module("Utilities");

    jqUnit.test("Path Utilities", function () {
        jqUnit.assertEquals("Exact depth", 0, gpii.canopyMatchMaker.utils.prefixLength("display.screenEnhancement.fontSize", sammyProfile));
        jqUnit.assertEquals("Near depth", 0, gpii.canopyMatchMaker.utils.prefixLength("display.screenEnhancement", sammyProfile));
        jqUnit.assertEquals("Mid depth", -1, gpii.canopyMatchMaker.utils.prefixLength("display.unrecognizable", sammyProfile));
        jqUnit.assertEquals("Far depth", -2, gpii.canopyMatchMaker.utils.prefixLength("display.unrecognizable.thing", sammyProfile));
    });

    jqUnit.test("Fitness computation", function () {
        var fitness = gpii.canopyMatchMaker.utils.computeFitness(sammyLeaves, magnifierSkeleton, gpii.canopyMatchMaker.utils.prefixLength);
        var expected = [0, 0, -1, -1, -1, -1, -1, -2, -3];
        jqUnit.assertDeepEq("Computed fitness vector", expected, fitness);

        var fitnesses = {
            "sol0": [-1, -3, 0],
            "sol1": [0, 0, 0],
            "sol2": [0, 0],
            "sol3": [0, 0, 0, 0],
            "sol4": [-1, -3, -1]
        };
        var solns = gpii.canopyMatchMaker.utils.sortSolutions(expandFitness(fitnesses));
        var indices = extractIndices(solns);
        var expected2 = ["sol3", "sol1", "sol2", "sol0", "sol4"];
        jqUnit.assertDeepEq("Ranked fitnesses", expected2, indices);
    });

    jqUnit.module("MatchMaker");
    jqUnit.test("Rank and dispose solutions", function () {
        var solutions = {
            "lesserMag": lesserMagnifier,
            "mag": magnifier
        };
        var solrecs = gpii.matchMakerFramework.utils.expandSolutions(solutions, { "*": "*" });
        var ranked = gpii.canopyMatchMaker.utils.rankSolutions(sammyLeaves, solrecs, gpii.canopyMatchMaker.utils.ISO24751.ontologicalMetric);
        var minimalData = {
            solutionTypes: {
                "lesserMag": "http://registry.gpii.net/common/magnifier",
                "mag": "http://registry.gpii.net/common/magnifier"
            },
            solutionTypeMapping: {
                "http://registry.gpii.net/common/magnifier": [ "lesserMag", "mag" ]
            }
        };

        // var indices = extractIndices(ranked);
        var expected = ["mag", "lesserMag"];
        jqUnit.assertDeepEq("Ranked solutions", expected, ranked);

        var disposed = gpii.canopyMatchMaker.utils.disposeFromCanopy(sammyLeaves, ranked, solrecs, minimalData, gpii.canopyMatchMaker.utils.ISO24751.ontologicalMetric);
        var itions = gpii.canopyMatchMaker.utils.extractDispositions(disposed);
        expected = {
            "mag": "accept",
            "lesserMag": "reject"
        };
        jqUnit.assertDeepEq("Disposed solutions", expected, itions);
    });
};

var disposeStrategyFixtures = [
    {
        description: "Basic test for disposeStrategy function",
        leavesArg: [
            "display.screenEnhancement.fontSize",
            "display.screenEnhancement.magnification",
            "display.screenEnhancement.-provisional-magnifierEnabled",
            "display.screenReader.-provisional-screenReaderTTSEnabled"
        ],
        solRecsArg: {
            "test.dummy": {
                "solution": {
                    "name": "Test dummy",
                    "contexts": {},
                    "settingsHandlers": {
                        "myconf": {
                            "type": "gpii.settingsHandlers.JSONSettingsHandler.set",
                            "options": {
                                "path": "/some/path/to/file.json"
                            },
                            "capabilities": [],
                            "capabilitiesTransformations": {
                                "setting1": "http://registry\\.gpii\\.net/common/fontSize",
                                "setting2.path1": "http://registry\\.gpii\\.net/common/screenReaderTTSEnabled",
                                "setting2.path2": "http://registry\\.gpii\\.net/common/magnifierEnabled",
                                "setting2.path3.hello": "http://registry\\.gpii\\.net/common/magnification"
                            }
                        }
                    }
                },
                "skeleton": {
                    "applications": {
                        "test.dummy": {
                            "id": {}
                        }
                    },
                    "display": {
                        "screenEnhancement": {
                            "fontSize": {},
                            "magnification": {},
                            "-provisional-magnifierEnabled": {}
                        },
                        "screenReader": {
                            "-provisional-screenReaderTTSEnabled": {}
                        }
                    }
                },
                "index": "test.dummy"
            },
            "test.dummy_2": {
                "solution": {
                    "name": "Test dummy 2",
                    "contexts": {},
                    "settingsHandlers": {
                        "myconf": {
                            "type": "gpii.settingsHandlers.noSettings",
                            "capabilities": []
                        }
                    }
                },
                "skeleton": {
                    "applications": {
                        "test.dummy_2": {
                            "id": {}
                        }
                    }
                },
                "index": "test.dummy_2"
            }
        },
        expect: {
            "test.dummy_2": {
                disposition: "reject"
            },
            "test.dummy": {
                disposition: "accept"
            }
        }
    }
];

gpii.tests.canopyMatchMaker.disposeStrategyTests = function () {
    jqUnit.module("Dispose Strategy Tests");

    fluid.each(disposeStrategyFixtures, function (fixture) {
        jqUnit.test(fixture.description, function () {
            var data = {
                solutionTypes: {
                    "test.dummy": "http://registry.gpii.net/common/sometype",
                    "test.dummy_2": "http://registry.gpii.net/common/someOtherType"
                },
                solutionTypeMapping: {
                    "http://registry.gpii.net/common/someType": [ "test.dummy" ],
                    "http://registry.gpii.net/common/someOtherType": [ "test.dummy_2" ]
                }
            };
            var result = gpii.canopyMatchMaker.utils.disposeStrategy(fixture.leavesArg, fixture.solRecsArg, data);
            var expected = $.extend(true, {}, fixture.solRecsArg, fixture.expect);

            jqUnit.assertDeepEq(fixture.description, expected, result);
        });
    });
};
