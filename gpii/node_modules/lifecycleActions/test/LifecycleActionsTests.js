/*
 * Lifecycle Actions Tests
 *
 * Copyright 2015 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

/*global require, __dirname */

(function () {

    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii"),
        jqUnit = fluid.require("jqUnit"),
        kettle = require("kettle");

    fluid.registerNamespace("gpii.tests.lifecycleActions");

    kettle.loadTestingSupport();

    require("lifecycleActions");

    var composeURLTestSpec = [
        {
            desc: "Simple URL, no parameters",
            URL: "myURL.html",
            parameters: {},
            expected: "myURL.html"
        }, {
            desc: "Simple URL, undefined parameters",
            URL: "myURL.html",
            parameters: undefined,
            expected: "myURL.html"
        }, {
            desc: "Simple URL, multiple parameters",
            URL: "myURL.html",
            parameters: {
                foo: "bar",
                boo: "har"
            },
            expected: "myURL.html?foo=bar&boo=har"
        }, {
            desc: "URL and parameters require URL encoding",
            URL: "myURL,number2.html",
            parameters: {
                "crazy param": "I am a string, that needs URL encoding%$"
            },
            expected: "myURL%2Cnumber2.html?crazy%20param=I%20am%20a%20string%2C%20that%20needs%20URL%20encoding%25%24"
        }
    ];


    gpii.tests.lifecycleActions.composeURL = function () {
        fluid.each(composeURLTestSpec, function (spec) {
            var response = gpii.lifecycleActions.utils.composeURL(spec.URL, spec.parameters);
            jqUnit.assertEquals("gpii.launch.browser.composeURL - " + spec.desc, spec.expected, response);
        });
    };

    fluid.defaults("gpii.tests.lifecycleActions.environment", {
        gradeNames: ["fluid.test.testEnvironment", "autoInit"],
        components: {
            tester: {
                type: "gpii.tests.lifecycleActions.holder"
            }
        }
    });

    fluid.defaults("gpii.tests.lifecycleActions.holder", {
        gradeNames: ["fluid.test.testCaseHolder", "autoInit"],
        modules: [{
            name: "gpii.launch.browser.composeURL",
            tests: [{
                expect: composeURLTestSpec.length,
                name: "gpii.launch.browser.composeURL tests",
                func: "gpii.tests.lifecycleActions.composeURL"
            }]
        }]
    });

    module.exports = kettle.test.bootstrap("gpii.tests.lifecycleActions.environment");

}());