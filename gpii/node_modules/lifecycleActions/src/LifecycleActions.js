/*
 * Standard Lifecycle Actions Definitions
 *
 * Copyright 2012 Antranig Basman
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

(function () {
    "use strict";

    var fluid = require("infusion"),
        child_process = require("child_process"),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.launch");
    fluid.registerNamespace("gpii.lifecycleActions.utils");

    fluid.defaults("gpii.launch.exec", {
        gradeNames: "fluid.function",
        argumentMap: {
            command: 0,
            options: 1
        }
    });

    gpii.launch.exec = child_process.exec;

    fluid.defaults("gpii.launch.spawn", {
        gradeNames: "fluid.function",
        argumentMap: {
            command: 0,
            args: 1,
            options: 2
        }
    });

    gpii.launch.spawn = child_process.spawn;

    fluid.defaults("gpii.launch.browser", {
        gradeNames: [ "fluid.function", "fluid.littleComponent" ],
        argumentMap: {
            bogus: 0,
            URL: 1,
            parameters: 2
        }
    });

    gpii.lifecycleActions.utils.composeURL = function (URL, parameters) {
        var paramString = "";
        fluid.each(parameters, function (val, name) {
            if (val !== undefined) {
                paramString += (paramString === "" ? "" : "&") + encodeURIComponent(name) + "=" + encodeURIComponent(val);
            }
        });
        return encodeURIComponent(URL) + ((paramString === "") ? "" : "?" + paramString);
    };

    gpii.launch.browser = function (bogus, URL, parameters) {
        child_process.spawn("open", [gpii.launch.browser.composeURL(URL, parameters)]);
    };

})();
