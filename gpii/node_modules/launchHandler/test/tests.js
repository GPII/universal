/*!
Launch Handler Testing

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {
    var fluid = require("infusion");
	gpii = fluid.registerNamespace("gpii");
    fluid.registerNamespace("gpii.tests.launchManager");
    
	var setPayload1 = {
		type: "gpii.tests.launchManager.expectSetPayload",
		options: { 
			"somevar": true,
			"somevar2": { a: true, b: false }
		},
		extras: { "othervar": true }
	};
	
	gpii.tests.launchManager.expectSetPayload = function(action, options) {
		equal(action, "set", "launchManager.set parameter action is 'set'");
		deepEqual(options, setPayload1.options, "launchManager.set options equals options block");
 	};

	asyncTest("gpii.launchHandler.set invokes correctly", function() {
		var launcher = gpii.launchHandler();
		expect(3);
		launcher.set(undefined, setPayload1, function(response) {
			ok(true, "callback invoked");
			start();
		});
	});

	asyncTest("gpii.launchHandler.exec() works as expected", function () {
		expect(2);
 		//test set:
 		//run tail command with the -f (follow) flag on.. this will keep the process alive
 		var returnval = gpii.launchHandler.exec("set", {
			command: "tail",
			args:  ["-f", "tests.js"]
		});	
		console.log(returnval);
		//we should get a proper pid
		ok((returnval.pid && returnval.pid >= 0), "Exec returned a proper pid");
		
		//test delete
 		spawnedProcess = returnval.process;
 		//set listener to process kill and expect to be fired on delete call to exec
 		spawnedProcess.on("exit", function (code) {
 			ok(true, "child process recieved exit call (with exit code " + code+ ")");
 			start();
 		});
 		//send kill signal:
 		gpii.launchHandler.exec("delete", {
 			pid: returnval.pid
 		});
	});
}());