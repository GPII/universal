/*!
Launch Handler

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/
var child_process = require("child_process");

(function () {
    var fluid = require("infusion");
	gpii = fluid.registerNamespace("gpii");
	fluid.registerNamespace("gpii.launchHandler");
    "use strict";

	//data is an array: first entry is either "delete" or "set", second entry is an object
	gpii.launchHandler.exec = function (launchHandler) {
		//if pid is set, we want to kill a running process:
		if (launchHandler.pid && launchHandler.termMap && launchHandler.termMap.pid) {
			var pid = fluid.stringTemplate(launchHandler.pid, launchHandler.termMap);
			console.log("Killing process with pid: "+pid);
			process.kill(pid);
			//TODO Error handling based on whether kill was successful
		} else if (launchHandler.command) {
			//if no pid is set, we expect at least command is set
			var spawnedProcess = child_process.spawn(launchHandler.command, launchHandler.args, launchHandler.options);
			console.log("Ran command "+launchHandler.command+" and got pid "+spawnedProcess.pid);
			return { 
				//TODO: error handling!
				//statusCode: 200,
				termMap: { 
					pid: spawnedProcess.pid
				},
				process: spawnedProcess
			};
		} else {
			//TODO: Error handling
		}
	}
})();