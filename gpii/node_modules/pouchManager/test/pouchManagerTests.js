/**
GPII Pouch Manager Tests

Copyright 2016 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii"),
    jqUnit = require("node-jqunit");

require("gpii-pouchdb");
gpii.pouch.loadTestingSupport();

require("pouchManager");
require("journal");

fluid.registerNamespace("gpii.tests.pouchManager");

gpii.tests.pouchManager.authDBServerPort = 1234;
gpii.tests.pouchManager.resetServerPort = 1244;

//*********** Pouch Manager with Test Specific Configs ***********//
fluid.defaults("gpii.tests.pouchManager", {
    gradeNames: ["gpii.pouchManager"],
    authDBServerPort: gpii.tests.pouchManager.authDBServerPort,
    resetServerPort: gpii.tests.pouchManager.resetServerPort,
    pouchConfig: {
        databases: {
            auth: {
                data: [
                    "%universal/gpii/node_modules/pouchManager/test/data/oauth2TestData.json"
                ]
            }
        }
    }
});

//*********** Test Case Holder ***********//
fluid.defaults("gpii.tests.pouchManager.caseHolder", {
    gradeNames: ["gpii.test.express.caseHolder"],
    sequenceEnd: [{
        func: "{testEnvironment}.events.onCleanup.fire"
    },
    {
        event:    "{testEnvironment}.events.onCleanupComplete",
        listener: "fluid.log",
        args:     ["Database cleanup complete"]
    }],
    expected: {
        total: {
            doc_count: 16
        },
        initialView: undefined,
        totalAfterInsert: {
            doc_count: 17
        },
        afterInsert: {
            ok: true,
            id: "toinsert"
        },
        insert: {
            id: "toinsert",
            type: "user",
            name: "testName"
        },
        verifyInsertByView: {
            id: "toinsert",
            key: "testName"
        },
        viewAfterReset: undefined
    },
    rawModules: [{
        name: "Testing Pouch Manager",
        tests: [{
            name: "Testing the load and the reset processes",
            type: "test",
            sequence: [{
                func: "{totalRequest}.send"
            }, {
                listener: "gpii.tests.pouchManager.checkResponse",
                event:    "{totalRequest}.events.onComplete",
                args:     ["The total initial number of records should be as expected", "{totalRequest}.nativeResponse", "{arguments}.0", 200, "{testCaseHolder}.options.expected.total"]
            }, {
                func: "{initialViewRequest}.send"
            }, {
                listener: "gpii.tests.pouchManager.checkResponse",
                event:    "{initialViewRequest}.events.onComplete",
                args:     ["The initial view should be as expected", "{initialViewRequest}.nativeResponse", "{arguments}.0", 200, "{testCaseHolder}.options.expected.initialView", "rows.0"]
            }, {
                func: "{insertRequest}.send",
                args: "{that}.options.expected.insert"
            }, {
                listener: "gpii.tests.pouchManager.checkResponse",
                event:    "{insertRequest}.events.onComplete",
                args:     ["A new record should be added succesfully", "{insertRequest}.nativeResponse", "{arguments}.0", 201, "{testCaseHolder}.options.expected.afterInsert"]
            }, {
                func: "{verifyInsertRequest}.send"
            }, {
                listener: "gpii.tests.pouchManager.checkResponse",
                event:    "{verifyInsertRequest}.events.onComplete",
                args:     ["The new record should be able to be retrieved", "{verifyInsertRequest}.nativeResponse", "{arguments}.0", 200, "{testCaseHolder}.options.expected.totalAfterInsert"]
            }, {
                func: "{verifyInsertByViewRequest}.send"
            }, {
                listener: "gpii.tests.pouchManager.checkResponse",
                event:    "{verifyInsertByViewRequest}.events.onComplete",
                args:     ["The new record should be visible in the view", "{verifyInsertByViewRequest}.nativeResponse", "{arguments}.0", 200, "{testCaseHolder}.options.expected.verifyInsertByView", "rows.0"]
            }, {
                func: "{resetRequest}.send"
            }, {
                listener: "jqUnit.assert",
                event:    "{testEnvironment}.events.onPouchHarnessReady",
                args:     ["The reset request should have been sucessful", "pouchHarness has been recreated"]
            }, {
                func: "{verifyResetRequest}.send"
            }, {
                listener: "gpii.tests.pouchManager.checkResponse",
                event:    "{verifyResetRequest}.events.onComplete",
                args:     ["The total number of records should be correct after a reset", "{verifyResetRequest}.nativeResponse", "{arguments}.0", 200, "{testCaseHolder}.options.expected.total"]
            }, {
                func: "{verifyResetByViewRequest}.send"
            }, {
                listener: "gpii.tests.pouchManager.checkResponse",
                event:    "{verifyResetByViewRequest}.events.onComplete",
                args:     ["The view should be as expected after a reset", "{verifyResetByViewRequest}.nativeResponse", "{arguments}.0", 200, "{testCaseHolder}.options.expected.viewAfterReset", "rows.0"]
            }]
        }]
    }],
    components: {
        totalRequest: {
            type: "kettle.test.request.http",
            options: {
                path: "/auth",
                port: gpii.tests.pouchManager.authDBServerPort,
                method: "GET"
            }
        },
        initialViewRequest: {
            type: "kettle.test.request.http",
            options: {
                path: "/auth/_design/views/_view/findUserByName?key=%22testName%22",
                port: gpii.tests.pouchManager.authDBServerPort,
                method: "GET"
            }
        },
        insertRequest: {
            type: "kettle.test.request.http",
            options: {
                path:   "/auth/toinsert",
                port: gpii.tests.pouchManager.authDBServerPort,
                method: "PUT"
            }
        },
        verifyInsertRequest: {
            type: "kettle.test.request.http",
            options: {
                path: "/auth",
                port: gpii.tests.pouchManager.authDBServerPort,
                method: "GET"
            }
        },
        verifyInsertByViewRequest: {
            type: "kettle.test.request.http",
            options: {
                path: "/auth/_design/views/_view/findUserByName?key=%22testName%22",
                port: gpii.tests.pouchManager.authDBServerPort,
                method: "GET"
            }
        },
        resetRequest: {
            type: "kettle.test.request.http",
            options: {
                path: "/reset-pouch",
                port: gpii.tests.pouchManager.resetServerPort,
                method: "GET"
            }
        },
        verifyResetRequest: {
            type: "kettle.test.request.http",
            options: {
                path: "/auth",
                port: gpii.tests.pouchManager.authDBServerPort,
                method: "GET"
            }
        },
        verifyResetByViewRequest: {
            type: "kettle.test.request.http",
            options: {
                path: "/auth/_design/views/_view/findUserByName?key=%22testName%22",
                port: gpii.tests.pouchManager.authDBServerPort,
                method: "GET"
            }
        }
    }
});

gpii.tests.pouchManager.checkResponse = function (msg, response, body, expectedStatus, expected, bodyPath) {
    expectedStatus = expectedStatus ? expectedStatus : 200;

    var bodyData = JSON.parse(body);

    if (bodyPath) {
        bodyData = fluid.get(bodyData, bodyPath);
    }
    gpii.test.express.helpers.isSaneResponse(response, body, expectedStatus);

    if (expected === undefined) {
        jqUnit.assertUndefined(msg, bodyData);
    } else {
        jqUnit.assertLeftHand(msg, expected, bodyData);
    }
};

gpii.tests.pouchManager.cleanup = function (that) {
    that.pouchManager.pouchHarness.express.expressPouch.events.onCleanup.fire();
};

//*********** Test Environment ***********//
fluid.defaults("gpii.tests.pouchManager.testEnvironment", {
    gradeNames: ["fluid.test.testEnvironment"],
    events: {
        constructFixtures: null,
        onPouchManagerReady: null,
        onPouchHarnessReady: null,
        onFixturesConstructed: {
            events: {
                onPouchManagerReady: "onPouchManagerReady"
            }
        },
        onCleanup: null,
        onCleanupComplete: null
    },
    listeners: {
        "onCleanup.cleanup": {
            funcName: "gpii.tests.pouchManager.cleanup",
            args: ["{that}"]
        }
    },
    components: {
        pouchManager: {
            type: "gpii.tests.pouchManager",
            createOnEvent: "constructFixtures",
            options: {
                baseDir: {
                    expander: {
                        funcName: "fluid.stringTemplate",
                        args: ["%base/pouchManagerTests", {
                            base: "@expand:{settingsDir}.getBaseSettingsDir()"
                        }]
                    }
                },
                listeners: {
                    "onReady.escalate": "{testEnvironment}.events.onPouchManagerReady.fire",
                    "onPouchHarnessReady.escalate": "{testEnvironment}.events.onPouchHarnessReady.fire"
                },
                distributeOptions: {
                    cleanupListeners: {
                        record: {
                            "onCleanupComplete.escalate": {
                                listener: "{testEnvironment}.events.onCleanupComplete.fire",
                                priority: "before:destroyPouchHarness"
                            }
                        },
                        target: "{that expressPouch}.options.listeners"
                    }
                }
            }
        }
    }
});

//*********** Combine Test Environment and Test Case Holder ***********//
fluid.defaults("gpii.tests.pouchManagerTests", {
    gradeNames: ["gpii.tests.pouchManager.testEnvironment"],
    components: {
        testCaseHolder: {
            type: "gpii.tests.pouchManager.caseHolder"
        }
    }
});

fluid.test.runTests("gpii.tests.pouchManagerTests");
