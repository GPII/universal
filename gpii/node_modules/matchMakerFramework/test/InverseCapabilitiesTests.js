/**
GPII MatchMaker Inverse Capabilities Tests

Copyright 2013 OCAD University
Copyright 2014 Raising The Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

The research leading to these results has received funding from the European Union's
Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 289016.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

// TODO: This should be converted to a set of browser tests

"use strict";

var fluid = require("infusion"),
    jqUnit = fluid.require("node-jqunit", require, "jqUnit"),
    kettle = require("kettle"),
    gpii = fluid.registerNamespace("gpii");

require("matchMakerFramework");
require("ontologyHandler");

kettle.loadTestingSupport();

fluid.registerNamespace("gpii.tests.matchMakerFramework.inverse");

// TODO: create a unified scheme for locating preferences sets
gpii.tests.matchMakerFramework.inverse.os_win7 =   require("universal/testData/preferences/acceptanceTests/os_win7.json");
gpii.tests.matchMakerFramework.inverse.os_gnome =  require("universal/testData/preferences/acceptanceTests/os_gnome.json");
gpii.tests.matchMakerFramework.inverse.os_common = require("universal/testData/preferences/acceptanceTests/os_common.json");
gpii.tests.matchMakerFramework.inverse.rules =     require("matchMakerFramework/src/inverseCapabilities.json");

gpii.tests.matchMakerFramework.inverse.ontologyISO24751 = require("universal/testData/ontologies/ISO24751-flat.json");
gpii.tests.matchMakerFramework.inverse.ontologyFlat = fluid.model.transform.invertConfiguration(gpii.tests.matchMakerFramework.inverse.ontologyISO24751);

fluid.defaults("gpii.tests.matchMakerFramework.inverse.env", {
    gradeNames: ["fluid.test.testEnvironment"],
    components: {
        tester: {
            type: "fluid.test.testCaseHolder",
            options: {
                modules: [{
                    name: "Inverse Capabilities tests",
                    tests: [{
                        name: "os_win7 inversion",
                        expect: 1,
                        func: "gpii.tests.matchMakerFramework.inverse.testCommonTermsInference",
                        args: ["os_win7"]
                    }, {
                        name: "os_gnome inversion",
                        expect: 1,
                        func: "gpii.tests.matchMakerFramework.inverse.testCommonTermsInference",
                        args: ["os_gnome"]
                    }, {
                        name: "os_common inversion",
                        expect: 1,
                        func: "gpii.tests.matchMakerFramework.inverse.testCommonTermsInference",
                        args: ["os_common"]
                    }]
                }]
            }
        }
    }
});

gpii.tests.matchMakerFramework.inverse.testCommonTermsInference = function (prefName) {
    var prefs = gpii.tests.matchMakerFramework.inverse[prefName].flat;
    var result = gpii.matchMakerFramework.inferCommonTerms(prefs);
    var expected = require("matchMakerFramework/test/inverseCapabilities/" + prefName + "_expected");
    jqUnit.assertDeepEq("Expected inversion for capabilities transformation", expected, result);
};

module.exports = kettle.test.bootstrap("gpii.tests.matchMakerFramework.inverse.env");