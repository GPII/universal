/**
GPII MatchMaker Inverse Capabilities Tests

Copyright 2013 OCAD University
Copyright 2014, 2016 Raising The Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

The research leading to these results has received funding from the European Union's
Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 289016.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

/* global $, jqUnit, JSON5 */

var fluid = fluid || require("infusion");
var gpii = fluid.registerNamespace("gpii");

(function () {
    "use strict";

    fluid.registerNamespace("gpii.tests.matchMakerFramework.inverse");

    gpii.tests.matchMakerFramework.inverse.loadJSON = function (url) {
        var content = $.ajax({
            type: "GET",
            url: url,
            async: false
        }).responseText;

        var parser = (url.substring(url.length - 5).toLowerCase() === ".json") ? JSON : JSON5;
        return parser.parse(content);
    };

    gpii.tests.matchMakerFramework.inverse.fullSolutionsRegistry = {
        win32: gpii.tests.matchMakerFramework.inverse.loadJSON("../../../../../testData/solutions/win32.json5"),
        linux: gpii.tests.matchMakerFramework.inverse.loadJSON("../../../../../testData/solutions/linux.json5"),
        android: gpii.tests.matchMakerFramework.inverse.loadJSON("../../../../../testData/solutions/android.json5")
    };

    var testDefs = [
        {
            name: "os_win inversion",
            gpiiKey: "os_win"
        }, {
            name: "os_gnome inversion - combination of explicit and automatic inversions",
            gpiiKey: "os_gnome"
        }, {
            name: "os_common inversion - no inversion happenening",
            gpiiKey: "os_common"
        }, {
            name: "os_android inversion - no explicit inverses given",
            gpiiKey: "os_android"
        },
        {
            name: "jaws_application inversion - no explicit inverses given",
            gpiiKey: "jaws_application"
        },
        {
            name: "scoped_common_magnifier - scoped common terms are 'inferred' as well",
            gpiiKey: "scoped_common_magnifier"
        }
    ];

    gpii.tests.matchMakerFramework.inverse.testCommonTermsInference = function () {
        fluid.each(testDefs, function (def) {
            var prefs = gpii.tests.matchMakerFramework.inverse.loadJSON("../data/" + def.gpiiKey + ".json");
            var result = gpii.matchMakerFramework.utils.inferCommonTerms(prefs.flat, gpii.tests.matchMakerFramework.inverse.fullSolutionsRegistry);
            var expected = gpii.tests.matchMakerFramework.inverse.loadJSON("../inverseCapabilities/" + def.gpiiKey + "_expected.json");
            jqUnit.assertDeepEq("Expected inversion for capabilities transformation - " + def.name, expected, result);
        });
    };

    gpii.tests.matchMakerFramework.inverse.runTests = function () {
        jqUnit.module("MatchMakerUtilities");
        jqUnit.test("Check inverses", gpii.tests.matchMakerFramework.inverse.testCommonTermsInference);
    };
})();
