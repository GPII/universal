/*
 * GPII Canopy MatchMaker Tests
 *
 * Copyright 2012 OCAD University
 * Copyright 2012 Raising The Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

/* global jqUnit, fluid */

var gpii = fluid.registerNamespace("gpii");

(function () {
    "use strict";

    fluid.registerNamespace("gpii.tests.canopyMatchMaker");

    var magnifier = {
        "settingsHandlers": {
            "myconf": {
                "type": "gpii.integrationTesting.mockSettingsHandler",
                "capabilities": ["display.screenEnhancement"],
                "capabilitiesTransformations": {
                    "mag-factor": "display.screenEnhancement.magnification",
                    "show-cross-hairs": "display.screenEnhancement.-provisional-showCrosshairs",
                    "mouse-tracking": {
                        "transform": {
                            "type": "fluid.transforms.valueMapper",
                            "defaultInputPath": "display.screenEnhancement.tracking",
                            "match": {
                                "mouse": "centered"
                            }
                        }
                    }
                }
            }
        }
    };

    var lesserMagnifier = {
        "settingsHandlers": {
            "myconf": {
                "type": "gpii.integrationTesting.mockSettingsHandler",
                "capabilitiesTransformations": {
                    "mag-factor": "display.screenEnhancement.magnification"
                }
            },
            "yourconf": {
                "type": "gpii.integrationTesting.mockSettingsHandler",
                "capabilities": "display.screenEnhancement.magnification"
            }
        }
    };

    var magnifierLeaves = [
        "display.screenEnhancement.magnification",
        "display.screenEnhancement.-provisional-showCrosshairs",
        "display.screenEnhancement.tracking",
        "display.screenEnhancement"
    ];

    var magnifierSkeleton = {
        display: {
            screenEnhancement: {
                magnification: {},
                "-provisional-showCrosshairs": {},
                tracking: {}
            }
        }
    };

    var escapedLeaves = [
        "display.screenReader.applications.nvda\\.screenReader"
    ];

    var escapedSkeleton = {
        display: {
            screenReader: {
                applications: {
                    "nvda.screenReader": {}
                }
            }
        }
    };

    var sammyProfile = {
        "display": {
            "screenEnhancement": {
                "fontSize": 24,
                "foregroundColor": "white",
                "backgroundColor": "black",
                "fontFace": {
                    "fontName": ["Comic Sans"],
                    "genericFontFace": "sans serif"
                },
                "magnification": 2.0,
                "tracking": ["mouse"],
                "invertImages": true,
                "-provisional-showCrosshairs": true
            }
        }
    };

    var sammyLeaves = [
        "display.screenEnhancement.-provisional-showCrosshairs",
        "display.screenEnhancement.backgroundColor",
        "display.screenEnhancement.fontFace.fontName.0",
        "display.screenEnhancement.fontFace.genericFontFace",
        "display.screenEnhancement.fontSize",
        "display.screenEnhancement.foregroundColor",
        "display.screenEnhancement.invertImages",
        "display.screenEnhancement.magnification",
        "display.screenEnhancement.tracking.0"
    ];

    var expandFitness = function (fitnesses) {
        return fluid.transform(fitnesses, function (fit, index) {
            return {
                fitness: fit,
                index: index
            };
        });
    };

    var extractIndices = function (solns) {
        return fluid.transform(solns, function (soln) {
            return soln.index;
        });
    };

    gpii.tests.canopyMatchMaker.runTests = function () {
        jqUnit.module("Utilities");

        jqUnit.test("Path Utilities", function () {
            jqUnit.assertEquals("Exact depth", 0, gpii.matchMakerFramework.utils.prefixLength("display.screenEnhancement.fontSize", sammyProfile));
            jqUnit.assertEquals("Near depth", 0, gpii.matchMakerFramework.utils.prefixLength("display.screenEnhancement.fontSize", sammyProfile));
            jqUnit.assertEquals("Mid depth", -1, gpii.matchMakerFramework.utils.prefixLength("display.unrecognizable", sammyProfile));
            jqUnit.assertEquals("Far depth", -2, gpii.matchMakerFramework.utils.prefixLength("display.unrecognizable.thing", sammyProfile));
            var skeleton = gpii.matchMakerFramework.utils.pathsToSkeleton(magnifierLeaves);
            jqUnit.assertDeepEq("Computed model skeleton", magnifierSkeleton, skeleton);

            var skeleton2 = gpii.matchMakerFramework.utils.pathsToSkeleton(escapedLeaves);
            jqUnit.assertDeepEq("Computed model escaped skeleton", escapedSkeleton, skeleton2);
        });

        jqUnit.test("Fitness computation", function () {
            var fitness = gpii.matchMaker.canopy.computeFitness(sammyLeaves, magnifierSkeleton);
            var expected = [0, 0, -1, -1, -1, -1, -1, -2, -3];
            jqUnit.assertDeepEq("Computed fitness vector", expected, fitness);

            var fitnesses = [
                [-1, -3, 0],
                [0, 0, 0],
                [0, 0],
                [0, 0, 0, 0],
                [-1, -3, -1]
            ];
            var solns = gpii.matchMaker.canopy.sortSolutions(expandFitness(fitnesses));
            var indices = extractIndices(solns);
            var expected2 = [3, 1, 2, 0, 4];
            jqUnit.assertDeepEq("Ranked fitnesses", expected2, indices);
        });

        jqUnit.module("MatchMaker");
        jqUnit.test("Rank and dispose solutions", function () {
            var solutions = [lesserMagnifier,
                magnifier
            ];
            var expanded = gpii.matchMakerFramework.utils.expandSolutions(solutions, { "*": "*" });
            var ranked = gpii.matchMaker.canopy.rankSolutions(sammyLeaves, expanded);
            var indices = extractIndices(ranked);
            var expected = [1, 0];
            jqUnit.assertDeepEq("Ranked solutions", expected, indices);

            var disposed = gpii.matchMaker.canopy.disposeSolutionsImpl(sammyLeaves, ranked);
            var itions = gpii.matchMakerFramework.utils.extractDispositions(disposed);
            expected = ["reject", "accept"];
            jqUnit.assertDeepEq("Disposed solutions", expected, itions);
        });
    };

})();
