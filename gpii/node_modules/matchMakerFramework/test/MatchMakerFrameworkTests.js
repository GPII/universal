/*
* Match Maker Framework Tests
*
* Copyright 2014 Raising the Floor - International
*
* Licensed under the New BSD license. You may not use this file except in
* compliance with this License.
*
* The research leading to these results has received funding from the European Union's
* Seventh Framework Programme (FP7/2007-2013)
* under grant agreement no. 289016.
*
* You may obtain a copy of the License at
* https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

(function () {
    // TODO: This should be converted to a set of browser tests 
    
    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii"),
        jqUnit = fluid.require("node-jqunit", require, "jqUnit"),
        kettle = fluid.require("kettle", require);
        
    kettle.loadTestingSupport();

    require("matchMakerFramework");

    fluid.registerNamespace("gpii.matchMakerFramework.tests");

    fluid.defaults("gpii.matchmakerFramework.tests.testTree", {
        gradeNames: ["fluid.test.testEnvironment"],
        components: {
            matchMakerFrameworkTester: {
                type: "fluid.tests.matchMakerFrameworkTester"
            }
        }
    });

    fluid.defaults("fluid.tests.matchMakerFrameworkTester", {
        gradeNames: ["fluid.test.testCaseHolder"],
        modules: [{
            name: "gpii.matchMakerFramework.evaluateMatch tests",
            tests: [
                {
                    expect: 3,
                    name: "inferCommonTerms Tests",
                    type: "test",
                    func: "fluid.tests.inferCommonTermsTests"
                }, {
                    expect: 1,
                    name: "filterSolutions tests",
                    type: "test",
                    func: "gpii.matchMakerFramework.tests.filterSolutions"
                }
            ]
        }]
    });

    var win32_full = require("./data/win32_full.json");

    gpii.matchMakerFramework.tests.filterSolutionsFixture = [
        {
            description: "filterSolutions test 1",
            device: {
                OS: {
                    id: "win32",
                    version: "6.8.5"
                },
                solutions: [
                    {
                        "id": "com.microsoft.windows.magnifier"
                    }, {
                        "id": "com.microsoft.windows.onscreenKeyboard"
                    }, {
                        "id": "org.nvda-project"
                    }, {
                        "id": "com.microsoft.windows.highContrast"
                    }, {
                        "id": "com.microsoft.windows.mouseTrailing"
                    }, {
                        "id": "com.microsoft.windows.cursors"
                    }
                ]
            },
            expected: {
                "com.microsoft.windows.magnifier": win32_full["com.microsoft.windows.magnifier"],
                "com.microsoft.windows.onscreenKeyboard": win32_full["com.microsoft.windows.onscreenKeyboard"],
                "org.nvda-project": win32_full["org.nvda-project"],
                "com.microsoft.windows.highContrast": win32_full["com.microsoft.windows.highContrast"],
                "com.microsoft.windows.mouseTrailing": win32_full["com.microsoft.windows.mouseTrailing"],
                "com.microsoft.windows.cursors": win32_full["com.microsoft.windows.cursors"]
            }
        }
    ];


    gpii.matchMakerFramework.tests.filterSolutions = function () {
        fluid.each(gpii.matchMakerFramework.tests.filterSolutionsFixture, function (fixture) {
            var result = gpii.matchMakerFramework.filterSolutions(win32_full, fixture.device);
            jqUnit.assertDeepEq("Expecting the filtered payload", fixture.expected, result);
        });
    };


    gpii.matchMakerFramework.tests.inferCommonTermsFixtures = {
        "app_specific_only": {
            description: "Testing with application specific only settings",
            expected: {
                "gpii-default": {
                    "com.microsoft.windows.highContrast": {
                        "http://registry.gpii.net/common/highContrastEnabled": true
                    },
                    "com.microsoft.windows.cursors": {
                        "http://registry.gpii.net/common/cursorSize": 1
                    },
                    "com.microsoft.windows.magnifier": {
                        "http://registry.gpii.net/common/tracking": [
                            "mouse",
                            "caret"
                        ],
                        "http://registry.gpii.net/common/magnification": 1.5
                    }
                }
            }
        },
        "common_only": {
            description: "Testing with common terms only NP set",
            expected: {
                "gpii-default": {}
            }
        },
        "multi_context": {
            description: "Testing with several contexts and mixed common/app terms",
            expected: {
                "gpii-default": {
                    "com.microsoft.windows.highContrast": {
                        "http://registry.gpii.net/common/highContrastEnabled": true
                    },
                    "com.microsoft.windows.magnifier": {
                        "http://registry.gpii.net/common/tracking": []
                    }
                },
                "user-defined": {
                    "com.microsoft.windows.magnifier": {
                        "http://registry.gpii.net/common/tracking": [
                            "mouse"
                        ],
                        "http://registry.gpii.net/common/magnification": 1.5
                    }
                }
            }
        }
    };

    fluid.tests.inferCommonTermsTests = function () {
        fluid.each(gpii.matchMakerFramework.tests.inferCommonTermsFixtures, function (fixture, key) {
            var npset = require("./data/" + key + ".json");
            var returned = gpii.matchMakerFramework.inferCommonTerms(npset);
            jqUnit.assertDeepEq(fixture.description, fixture.expected, returned);
        });
    };

    module.exports = kettle.test.bootstrap("gpii.matchmakerFramework.tests.testTree");
})();