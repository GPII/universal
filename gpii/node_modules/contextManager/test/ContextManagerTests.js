/*
* Context Manager Tests
*
* Copyright 2014 Raising the Floor - International
*
* Licensed under the New BSD license. You may not use this file except in
* compliance with this License.
*
* The research leading to these results has received funding from the European Union's
* Seventh Framework Programme (FP7/2007-2013)
* under grant agreement no. 289016.
*
* You may obtain a copy of the License at
* https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii"),
    jqUnit = fluid.registerNamespace("jqUnit"),
    kettle = require("kettle");

kettle.loadTestingSupport();

require("contextManager");
require("transformer");

fluid.registerNamespace("gpii.contextManager.tests");

gpii.contextManager.tests.standardMMInput = require("./data/standardMMInput.json");
gpii.contextManager.tests.standardMMOutput = require("./data/standardMMOutput.json");

gpii.contextManager.tests.contextPayload = fluid.extend({
    matchMakerOutput: gpii.contextManager.tests.standardMMOutput
}, gpii.contextManager.tests.standardMMInput);

fluid.defaults("fluid.tests.contextManagerTestTree", {
    gradeNames: ["fluid.test.testEnvironment"],
    components: {
        contextManager: {
            type: "gpii.contextManager"
        },
        contextManagerTester: {
            type: "fluid.tests.contextManagerTester"
        }
    }
});

fluid.defaults("fluid.tests.contextManagerTester", {
    gradeNames: ["fluid.test.testCaseHolder"],
    modules: [{
        name: "gpii.contextManager.updateActiveContextName tests",
        tests: [
            {
                expect: 1,
                name: "Basic test",
                sequence: [ {
                    func: "fluid.tests.updateActiveContextNameTest",
                    args: [ "{contextManager}", "{that}.events.onMatchEvaluated" ]
                }, {
                    event: "{that}.events.onMatchEvaluated",
                    listener: "gpii.contextManager.tests.testMatchEvaluatedResponse"
                }]
            }
        ]
    }],
    events: {
        onMatchEvaluated: null
    }
});

fluid.tests.updateActiveContextNameTest = function (contextManager, event) {
    var withContext = fluid.extend(true, {}, gpii.contextManager.tests.contextPayload);
    contextManager.updateActiveContextName(withContext);
    event.fire(withContext);
};

gpii.contextManager.tests.testMatchEvaluatedResponse = function (evaluatedContext) {
    var expected = fluid.extend(true, {}, gpii.contextManager.tests.contextPayload, {
        activeContextName: "gpii-default"
    });

    jqUnit.assertDeepEq("checking return from updateActiveContextNameTest", expected, evaluatedContext);
};

module.exports = kettle.test.bootstrap("fluid.tests.contextManagerTestTree");
