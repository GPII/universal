/*
* Context Manager Tests
*
* Copyright 2014 Raising the Floor - International
*
* Licensed under the New BSD license. You may not use this file except in
* compliance with this License.
*
* The research leading to these results has received funding from the European Union's
* Seventh Framework Programme (FP7/2007-2013)
* under grant agreement no. 289016.
*
* You may obtain a copy of the License at
* https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

/* global require */
(function () {
    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii"),
        jqUnit = fluid.require("jqUnit"),
        kettle = fluid.require("kettle", require);

    require("contextManager");
    require("transformer");
    require("flowManager");
    require("lifecycleManager");


    fluid.registerNamespace("gpii.contextManager.tests");

    gpii.contextManager.tests.standardMMInput = require("./data/standardMMInput.json");
    gpii.contextManager.tests.standardMMOutput = require("./data/standardMMOutput.json");

    fluid.require("kettle/test/utils/js/KettleTestUtils", require);

    fluid.defaults("fluid.tests.contextManagerTestTree", {
        gradeNames: ["fluid.test.testEnvironment", "autoInit"],
        components: {
            contextManager: {
                type: "gpii.contextManager"
            },
            contextManagerTester: {
                type: "fluid.tests.contextManagerTester"
            }
        }
    });

    fluid.defaults("fluid.tests.contextManagerTester", {
        gradeNames: ["fluid.test.testCaseHolder", "autoInit"],
        modules: [{
            name: "gpii.contextManager.evaluateMatch tests",
            tests: [
                {
                    expect: 1,
                    name: "Basic test",
                    sequence: [ {
                        func: "fluid.tests.evaluateMatchTest",
                        args: [ "{contextManager}", "{that}.events.onMatchEvaluated" ]
                    }, {
                        event: "{that}.events.onMatchEvaluated",
                        listener: "gpii.contextManager.tests.testMatchEvaluatedResponse"
                    }]
                }
            ]
        }],
        events: {
            onMatchEvaluated: null
        }
    });

    fluid.tests.evaluateMatchTest = function (contextManager, event) {
        contextManager.evaluateMatch(gpii.contextManager.tests.standardMMOutput,
            gpii.contextManager.tests.standardMMInput, event);
    };

    gpii.contextManager.tests.testMatchEvaluatedResponse = function (evaluatedContext) {
        var expect = {
            "org.nvda-project": {
                "name": "NVDA Screen Reader",
                "settingsHandlers": [
                    {
                        "type": "gpii.settingsHandlers.INISettingsHandler.set",
                        "options": {
                            "path": "${{environment}.APPDATA}\\nvda\\nvda.ini",
                            "allowNumberSignComments": true,
                            "allowSubSections": true
                        },
                        "settings": {
                            "speech.espeak.rate": 38.70967741935484,
                            "speech.espeak.rateBoost": false,
                            "virtualBuffers.autoSayAllOnPageLoad": false,
                            "speech\\.espeak\\.pitch": 63
                        }
                    }
                ],
                "lifecycleManager": {
                    "start": [
                        "setSettings",
                        {
                            "type": "gpii.launch.exec",
                            "command": "\"${{registry}.HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\nvda.exe\\}\""
                        }
                    ],
                    "stop": [
                        {
                            "type": "gpii.launch.exec",
                            "command": "${{environment}.SystemRoot}\\System32\\taskkill.exe /f /im nvda_service.exe"
                        },
                        {
                            "type": "gpii.launch.exec",
                            "command": "${{environment}.SystemRoot}\\System32\\taskkill.exe /f /im nvda.exe"
                        },
                        "restoreSettings"
                    ]
                }
            }
        };

        jqUnit.assertDeepEq("checking return from evaluateMatchTest", expect, evaluatedContext);
    };

    module.exports = kettle.test.bootstrap("fluid.tests.contextManagerTestTree");
})();