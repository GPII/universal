/*!
GPII Settings Transformer Tests

Copyright 2012 OCAD University
Copyright 2013-2014 Raising the Floor

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global jqUnit */

"use strict";

var fluid = fluid || require("infusion"),
    gpii = fluid.registerNamespace("gpii");

(function () {
    fluid.registerNamespace("gpii.tests.contextManager.utils");

    /* --------------- gpii.contextManager.utils.findActiveContexts tests -------------- */
    var findActiveContextsTests = {
        matchData: {
            "inferredConfiguration": {
                "gpii-default": {
                    "applications": {
                        "mac.test": {
                            "active": true,
                            "settings": {
                                "http://registry.gpii.net/common/fontSize": 12
                            }
                        }
                    }
                },
                "all-bright": {
                    "applications": {
                        "mac.test": {
                            "active": true,
                            "settings": {
                                "http://registry.gpii.net/common/fontSize": 13
                            }
                        }
                    },
                    "conditions": [
                        {
                            "type": "http://registry.gpii.net/conditions/inRange",
                            "min": 700,
                            "max": 1000,
                            "inputPath": "http://registry\\.gpii\\.net/common/environment/visual\\.luminance"
                        }
                    ]
                },
                "really-bright": {
                    "applications": {
                        "mac.test": {
                            "active": true,
                            "settings": {
                                "http://registry.gpii.net/common/fontSize": 14
                            }
                        }
                    },
                    "conditions": [
                        {
                            "type": "http://registry.gpii.net/conditions/inRange",
                            "min": 900,
                            "inputPath": "http://registry\\.gpii\\.net/common/environment/visual\\.luminance"
                        }
                    ]
                },
                "multi-condition": {
                    "applications": {
                        "mac.test": {
                            "active": true,
                            "settings": {
                                "http://registry.gpii.net/common/fontSize": 100
                            }
                        }
                    },
                    "conditions": [
                        {
                            "type": "http://registry.gpii.net/conditions/inRange",
                            "min": 10,
                            "inputPath": "http://registry\\.gpii\\.net/common/environment/auditory\\.noise"
                        }, {
                            "type": "http://registry.gpii.net/conditions/inRange",
                            "max": 20,
                            "inputPath": "http://registry\\.gpii\\.net/common/environment/auditory\\.noise"
                        }
                    ]
                }
            }
        },
        tests: {
            "No current contexts": {
                currentContexts: {},
                expected: [ "gpii-default" ]
            },
            "Matching single and default": {
                currentContexts: {
                    "http://registry.gpii.net/common/environment/visual.luminance": 800
                },
                expected: [ "all-bright", "gpii-default" ]
            },
            "Matching two and default": {
                currentContexts: {
                    "http://registry.gpii.net/common/environment/visual.luminance": 950
                },
                expected: [ "really-bright", "all-bright", "gpii-default" ]
            },
            "multi-condition matching only matching single": {
                currentContexts: {
                    "http://registry.gpii.net/common/environment/auditory.noise": 5
                },
                expected: [ "gpii-default" ]
            },
            "multi-condition matching all": {
                currentContexts: {
                    "http://registry.gpii.net/common/environment/auditory.noise": 15
                },
                expected: [ "multi-condition", "gpii-default" ]
            },
            "multi context matching everything": {
                currentContexts: {
                    "http://registry.gpii.net/common/environment/auditory.noise": 15,
                    "http://registry.gpii.net/common/environment/visual.luminance": 950
                },
                expected: [ "multi-condition", "really-bright", "all-bright", "gpii-default" ]
            }
        }
    };

    jqUnit.test("gpii.contextManager.utils.findActiveContexts test", function () {
        fluid.each(findActiveContextsTests.tests, function (test, testName) {
            var result = gpii.contextManager.utils.findActiveContexts(test.currentContexts, findActiveContextsTests.matchData);
            jqUnit.assertDeepEq("Testing: " + testName, test.expected, result);
        });
    });


    /* --------------- gpii.contextManager.transforms.inRange tests -------------------- */
    var inRangeTests = {
        rules: {
            minOnly: {
                "foo": {
                    "transform": {
                        "type": "gpii.contextManager.transforms.inRange",
                        "inputPath": "bar",
                        "min": 100
                    }
                }
            },
            maxOnly: {
                "foo": {
                    "transform": {
                        "type": "gpii.contextManager.transforms.inRange",
                        "inputPath": "bar",
                        "max": 200
                    }
                }
            },
            minAndMax: {
                "foo": {
                    "transform": {
                        "type": "gpii.contextManager.transforms.inRange",
                        "inputPath": "bar",
                        "min": 100,
                        "max": 200
                    }
                }
            }
        },
        expects: {
            "Min only - below threshold": {
                rule: "minOnly",
                input: {
                    bar: 23
                },
                expected: {
                    foo: false
                }
            },
            "Min only - on threshold": {
                rule: "minOnly",
                input: {
                    bar: 100
                },
                expected: {
                    foo: true
                }
            },
            "Min only - above threshold": {
                rule: "minOnly",
                input: {
                    bar: 100
                },
                expected: {
                    foo: true
                }
            },
            "Max only - below threshold": {
                rule: "maxOnly",
                input: {
                    bar: 23
                },
                expected: {
                    foo: true
                }
            },
            "Max only - on threshold": {
                rule: "maxOnly",
                input: {
                    bar: 200
                },
                expected: {
                    foo: true
                }
            },
            "Max only - above threshold": {
                rule: "maxOnly",
                input: {
                    bar: 2100
                },
                expected: {
                    foo: false
                }
            },
            "Min and Max - above threshold": {
                rule: "minAndMax",
                input: {
                    bar: 2100
                },
                expected: {
                    foo: false
                }
            },
            "Min and Max - within range": {
                rule: "minAndMax",
                input: {
                    bar: 160
                },
                expected: {
                    foo: true
                }
            },
            "Min and Max - below threshold": {
                rule: "minAndMax",
                input: {
                    bar: 21
                },
                expected: {
                    foo: false
                }
            }
        }
    };

    jqUnit.test("gpii.contextManager.transforms.inRange tests", function () {
        fluid.each(inRangeTests.expects, function (test, tname) {
            var transformed = fluid.model.transformWithRules(test.input, inRangeTests.rules[test.rule]);
            jqUnit.assertDeepEq("inRange transformation tests - " + tname, test.expected, transformed);
        });
    });

    /* --------------- gpii.contextManager.transforms.timeIRange tests -------------------- */
    var timeInRangeTests = {
        rules: {
            normalOrder: {
                "foo": {
                    "transform": {
                        "type": "gpii.contextManager.transforms.timeInRange",
                        "inputPath": "bar",
                        "from": "10:30",
                        "to": "19:45"
                    }
                }
            },
            normalOrderMinutes: {
                "foo": {
                    "transform": {
                        "type": "gpii.contextManager.transforms.timeInRange",
                        "inputPath": "bar",
                        "from": "10:30",
                        "to": "10:59"
                    }
                }
            },
            wrappedOrder: {
                "foo": {
                    "transform": {
                        "type": "gpii.contextManager.transforms.timeInRange",
                        "inputPath": "bar",
                        "from": "22:15",
                        "to": "00:18"
                    }
                }
            }
        },
        expects: {
            "Basic hours - matches": {
                rule: "normalOrder",
                input: {
                    bar: 1418900400000 //ms since epoch; Thu, 18 Dec 2014 11:00:00 GMT
                },
                expected: {
                    foo: true
                }
            },
            "Basic hours - above threshold": {
                rule: "normalOrder",
                input: {
                    bar: 1418932020000 //ms since epoch; Thu, 18 Dec 2014 19:47:00 GMT
                },
                expected: {
                    foo: false
                }
            },
            "Basic hours - below threshold": {
                rule: "normalOrder",
                input: {
                    bar: 1418898480000 //ms since epoch; Thu, 18 Dec 2014 10:28:00 GMT
                },
                expected: {
                    foo: false
                }
            },
            "Minutes windows - matches": {
                rule: "normalOrderMinutes",
                input: {
                    bar: 1418899020000 //ms since epoch; Thu, 18 Dec 2014 10:37:00 GMT
                },
                expected: {
                    foo: true
                }
            },
            "Wrapped order - matches morning": {
                rule: "wrappedOrder",
                input: {
                    bar: 1418861520000 //ms since epoch; Thu, 18 Dec 2014 00:12:00 GMT
                },
                expected: {
                    foo: true
                }
            },
            "Wrapped order - matches evening": {
                rule: "wrappedOrder",
                input: {
                    bar: 1418943600000 //ms since epoch; Thu, 18 Dec 2014 23:00:00 GMT
                },
                expected: {
                    foo: true
                }
            },
            "Wrapped hours - above threshold": {
                rule: "wrappedOrder",
                input: {
                    bar: 1418898480000 //ms since epoch; Thu, 18 Dec 2014 10:28:00 GMT
                },
                expected: {
                    foo: false
                }
            }
        }
    };

    jqUnit.test("gpii.contextManager.transforms.timeInRange tests", function () {
        fluid.each(timeInRangeTests.expects, function (test, tname) {
            // offset for timezone of tester to ensure that testfixture times are still valid
            test.input.bar = test.input.bar + (new Date()).getTimezoneOffset() * 60000;
            var transformed = fluid.model.transformWithRules(test.input, timeInRangeTests.rules[test.rule]);
            jqUnit.assertDeepEq("timeInRange transformation tests - " + tname, test.expected, transformed);
        });
    });
}());
