/*
* Context Manager
*
* Copyright 2015 Raising the Floor - International
*
* Licensed under the New BSD license. You may not use this file except in
* compliance with this License.
*
* The research leading to these results has received funding from the European Union's
* Seventh Framework Programme (FP7/2007-2013)
* under grant agreement no. 289016.
*
* You may obtain a copy of the License at
* https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

(function () {
    "use strict";

    var fluid = require("infusion"),
        io = require("socket.io-client"),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.contextManager.CASConnector");

    fluid.defaults("gpii.contextManager.CASConnector", {
        gradeNames: ["fluid.eventedComponent", "autoInit"],
        members: {
            socket: null,
            CASUrl: "http://localhost:8888/context-stream"
        },
        events: {
            onConnectRequest: null,
            onEmitRequest: null
        },
        listeners: {
            onCreate: "gpii.contextManager.CASConnector.connectSocket",
            onDestroy: "gpii.contextManager.CASConnector.disconnectSocket"
        },
        invokers: {
            connectSocket: {
                funcName: "gpii.contextManager.CASConnector.connectSocket",
                args: [ "{that}", "{contextManager}" ]
            },
            handleInput: {
                funcName: "gpii.contextManager.CASConnector.handleInput",
                args: [ "{contextManager}", "{arguments}.0" ]
            }
        }
    });

    gpii.contextManager.CASConnector.disconnectSocket = function (that) {
        if (that.socket) {
            that.socket.disconnect();
        };
    }
    gpii.contextManager.CASConnector.connectSocket = function (that) {
        var location =  [2.194909,41.402455];
        console.log("Connecting to socket at "+that.CASUrl);
        that.socket = io.connect(that.CASUrl);

        that.socket.on("connect", function () {
             fluid.log("Connected to Context Aware Server");

            that.socket.emit('location', location);
            fluid.log("Location emitted to Contet Aware Server: "+location);

            that.socket.on('new-user', function (id) {
                console.log("Got user ID from Context Aware Server: " +id)
                that.socket.emit('subscribe', id);
                console.log("Subscribed to Context Aware Server")
                that.socket.on('fired', function (data) {
                   // console.log("Retrieved data from Context Aware Server: " + JSON.stringify(i));
                   that.handleInput(data);
                });
            });
        });

        that.socket.on("error", function (a) {
            console.log("Error: " +JSON.stringify(a));
        });

        that.socket.on("disconnect", function (a) {
            // To avoid multiple listeners being assigned to a socket in case the connection is unstable or 
            // the CAS is restarted, this hack has been implementedt. This should be adressed before this pull-
            // request is ready for master
            that.socket.removeAllListeners();
            that.connectSocket();
        });
    };

    /* Data will be input in the format:
    {
        "id": "54b942e0fd0f7ad45d3aa585",
        "data": [
            {
                "at": "2015-01-16T16:57:05.439Z",
                "value": 8,
                "trigger": {
                    "_id": "54b92334bad6772c3eb0791c",
                    "_sensor": {
                        "_id": "54b91ad9bad6772c3eb07169",
                        "name": "light",
                        "type": "Float",
                        "unit": "%",
                        "devid": "1",
                        "__v": 0,
                        "_last": "54b942e0fd0f7ad45d3aa584"
                    },
                    "type": "threshold",
                    "operator": "gt",
                    "threshold": 6,
                    "__v": 0,
                    "triggered": true,
                    "hysteresis": 0
                }
            }
        ]
    }
    */
    gpii.contextManager.CASConnector.sensorMap = {
        "light": "http://registry.gpii.net/common/environment/visual.luminance",
        "noise": "http://registry.gpii.net/common/environment/auditory.noise"
    };

    gpii.contextManager.CASConnector.handleInput = function (contextManager, data) {
        if (!data || !data.data || !data.data[0]) {
            fluid.log("WARNING: Invalid data received from sensor, so ignoring: "+JSON.stringify(data));
            return;
        }
        data = data.data[0];
        if (data.value === undefined || !data.trigger || !data.trigger._sensor) {
            fluid.log("WARNING: need value and name from sensor - so ignoring: "+data);
            return;
        }
        var contextName = gpii.contextManager.CASConnector.sensorMap[data.trigger._sensor.name];
        if (contextName === undefined) {
            fluid.log("Invalid sensor name given - so ignoring: " +data.trigger._sensor.name);
            return;
        }
        var newContext = {};
        newContext[contextName] = data.value;
        gpii.contextManager.environmentChanged(contextManager, newContext);
    }
})();
