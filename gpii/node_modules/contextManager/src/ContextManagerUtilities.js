/*!
GPII Context Manager Utilities

Copyright 2014 Raising the floor - international

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/* global require */
"use strict";

var fluid = fluid || require("infusion"),
    gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.contextManager.utils");

gpii.contextManager.utils.transformTypeLookup = {
    "http://registry.gpii.net/conditions/inRange": "gpii.transformer.inRange",
    "http://registry.gpii.net/conditions/timeInRange": "gpii.transformer.timeInRange"
};

gpii.contextManager.utils.findActiveContexts = function (currentContext, matchData) {
    var activeContexts = [ "gpii-default" ];
    // do nothing if there is no NP set yet
    fluid.each(matchData.inferredConfiguration, function (content, contextId) {
        if (content.conditions === undefined) {
            return;
        }
        // massage conditions to be proper transform specs:
        var condArray = [];
        fluid.each(content.conditions, function (condition) {
            var entry = fluid.copy(condition);
            entry.type = gpii.contextManager.utils.transformTypeLookup[condition.type];
            if (entry.type === undefined) {
                fluid.fail("ERROR: Failed to find the condition type: " + condition.type + " - Dropping attempt to find active contexts");
            }
            condArray.push({
                transform: entry
            });
        });
        var result = fluid.model.transformWithRules(currentContext, { evaluations: condArray });
        // if we only have 'true' entries after evaluation
        if (result.evaluations && result.evaluations.indexOf(false) === -1) {
            // TODO Take priorities into account
            // prepend the entry
            activeContexts.unshift(contextId);
        }
    });
    fluid.log("Active contexts calculated to be: " + activeContexts);
    return activeContexts;
};