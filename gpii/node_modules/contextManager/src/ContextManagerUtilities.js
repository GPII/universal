/*!
GPII Context Manager Utilities

Copyright 2014 Raising the floor - international

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/* global require */
"use strict";

var fluid = fluid || require("infusion"),
    gpii = fluid.registerNamespace("gpii"),
    $ = fluid.registerNamespace("jQuery");

fluid.registerNamespace("gpii.contextManager.utils");
fluid.registerNamespace("gpii.contextManager.transforms");

gpii.contextManager.utils.transformTypeLookup = {
    "http://registry.gpii.net/conditions/inRange": "gpii.contextManager.transforms.inRange",
    "http://registry.gpii.net/conditions/timeInRange": "gpii.contextManager.transforms.timeInRange"

};

// Transforms required for condition evaluation:
fluid.defaults("gpii.contextManager.transforms.inRange", {
    gradeNames: "fluid.standardTransformFunction"
});

gpii.contextManager.transforms.inRange = function (value, transformSpec) {
    return (transformSpec.min && transformSpec.min > value) ||
        (transformSpec.max && transformSpec.max < value) ? false : true;
};

// Transforms required for condition evaluation:
fluid.defaults("gpii.contextManager.transforms.timeInRange", {
    gradeNames: "fluid.standardTransformFunction"
});


gpii.contextManager.transforms.timeInRange = function (value, transformSpec) {
    var isEarlier = gpii.contextManager.transforms.timeInRange.isEarlier;
    var currentTime = {
        hours: (new Date(value)).getHours(),
        minutes: (new Date(value)).getMinutes()
    };
    var fromTime = gpii.contextManager.transforms.timeInRange.timeParser(transformSpec.from);
    var toTime = gpii.contextManager.transforms.timeInRange.timeParser(transformSpec.to);

    if (isEarlier(toTime, fromTime)) { //if time wraps
        return (isEarlier(fromTime, currentTime) || isEarlier(currentTime, toTime));
    } else {
        return (isEarlier(fromTime, currentTime) && isEarlier(currentTime, toTime));
    }
};

gpii.contextManager.transforms.timeInRange.timeParser = function (time) {
    time = time.split(":");
    return {
        hours: parseInt(time[0], 10),
        minutes: parseInt(time[1], 10)
    };
};

// checks whether 'first' is earlier than 'second' - returns true if so
gpii.contextManager.transforms.timeInRange.isEarlier = function (first, second) {
    return (60 * (first.hours - second.hours) + first.minutes - second.minutes) < 0;
};

gpii.contextManager.utils.findActiveContexts = function (currentContext, matchData) {
    var activeContexts = [ "gpii-default" ];
    // do nothing if there is no NP set yet
    fluid.each(matchData.inferredConfiguration, function (content, contextId) {
        if (content.conditions === undefined) {
            return;
        }
        // massage conditions to be proper transform specs:
        var condArray = [];
        fluid.each(content.conditions, function (condition) {
            var entry = fluid.copy(condition);
            entry.type = gpii.contextManager.utils.transformTypeLookup[condition.type];
            if (entry.type === undefined) {
                console.log("ERROR: Failed to find the condition type: " + condition.type + " - Ignoring that conditional block");
                condArray = false;
                return;
            }
            condArray.push({
                transform: entry
            });
        });
        var result = fluid.model.transformWithRules(currentContext, { evaluations: condArray });
        // if we only have 'true' entries after evaluation
        if (result.evaluations && $.inArray(false, result.evaluations) === -1) {
            // TODO Take priorities into account
            // prepend the entry
            activeContexts.unshift(contextId);
        }
    });
    fluid.log("Active contexts calculated to be: " + activeContexts);
    return activeContexts;
};