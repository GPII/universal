/*!
 * GPII Context Manager Utilities
 *
 * Copyright 2014 Raising the floor - international
 * Copyright 2015 Ilunion Tecnologia y Accesibilidad
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

/* global require */
"use strict";

var fluid = fluid || require("infusion"),
    gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.contextManager.utils");

gpii.contextManager.utils.transformTypeLookup = {
    "http://registry.gpii.net/conditions/inRange": "gpii.transformer.inRange",
    "http://registry.gpii.net/conditions/timeInRange": "gpii.transformer.timeInRange"
};

/*
 * Function to return the preference sets that are feasible at the moment
 * In order to be feasible, the preference set conditions must be evaluated to true given the output of the 
 * Environmental Reporter. The sets are ordered by the priority value within them. Ideally two sets shouldn't
 * share the same priority, but in case this happens, then the set last evaluated is placed first among the ones
 * that have the same value for priority.
 * the special set "gpii-default" is always part of the returned sets, to reflect that if no conditions are satisfied,
 * gpii-default is applied
 *
 *
 * @return {Array} - an array of id's of preference sets that are feasible, ordered by the priority value.
  */
gpii.contextManager.utils.findActiveContexts = function (currentContext, matchData) {
    var activeContexts = {};
    activeContexts["indices"] = [];
    activeContexts["priorities"] = [];
    
    // do nothing if there is no NP set yet
    fluid.each(matchData.inferredConfiguration, function (content, contextId) {
        if (content.conditions === undefined) {
            return;
        }
        // message conditions to be proper transform specs:
        var isActive = true;
        fluid.each(content.conditions, function (condition) {
            var entry = fluid.copy(condition);
            entry.type = gpii.contextManager.utils.transformTypeLookup[condition.type];
            if (entry.type === undefined) {
                fluid.fail("ERROR: Failed to find the condition type: " + condition.type + " - Dropping attempt to find active contexts");
            }
            var result = fluid.model.transformWithRules(currentContext, { evaluations: { transform: entry }});
            if (result.evaluations !== true) {
                isActive = false;
            }
        });
        if (isActive) {
            if (activeContexts["indices"].length < 1){
                activeContexts["indices"].push(contextId);
                activeContexts["priorities"].push(content["priority"]);
                
            } else {
                var pos = 0;
                while ((activeContexts["priorities"][pos])&&(activeContexts["priorities"][pos] > content["priority"])){
                    pos++;
                }
                activeContexts["indices"].splice(pos,0,contextId);
                activeContexts["priorities"].splice(pos,0,content["priority"]);
                
                
            };
        }
    });
    activeContexts["indices"].push("gpii-default");
    fluid.log("Active contexts calculated to be: " + activeContexts);
    return activeContexts["indices"];
    // swap the return with the commented one if you want to check the array order with the priorities
    // return activeContexts;
};