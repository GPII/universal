/*
 * GPII Flow Manager Save Preferences Tests
 *
 * Copyright 2013 OCAD University
 * Copyright 2018 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    jqUnit = fluid.require("node-jqunit", require, "jqUnit"),
    gpii = fluid.registerNamespace("gpii");

fluid.require("%gpii-universal");

gpii.loadTestingSupport();

fluid.registerNamespace("gpii.tests.flowManager.savePrefs");

gpii.tests.flowManager.savePrefs.configRecord = {
    configName: "gpii.flowManager.tests.save.config",
    configPath: "%flowManager/test/configs"
};

gpii.tests.flowManager.savePrefs.gpiiKey = "chrome_font_size";
gpii.tests.flowManager.savePrefs.nonExistentGpiiKey = "nonexistent-gpii-key";
gpii.tests.flowManager.savePrefs.testPreferences = {
    test: "test"
};

gpii.tests.flowManager.savePrefs.testSuccessResponse = function (responseText, expectedPrefs, expectedGpiiKey) {
    var response = JSON.parse(responseText);
    if (expectedGpiiKey) {
        jqUnit.assertEquals("The response contains the correct GPII key", expectedGpiiKey, response.gpiiKey);
    } else {
        jqUnit.assertNotUndefined("A GPII key is created", response.gpiiKey);
    }
    jqUnit.assertDeepEq("The saved preferences are correct", expectedPrefs, response.preferences);
};

gpii.tests.flowManager.savePrefs.testFailedResponse = function (responseText, expectedErrorMsg) {
    var response = JSON.parse(responseText);
    jqUnit.assertTrue("Received an error", response.isError);
    jqUnit.assertTrue("The error message is expected", response.message.indexOf(expectedErrorMsg) !== -1);
};

gpii.tests.flowManager.savePrefs.testDefs = [{
    name: "Flow Manager create new preferences - success cases",
    expect: 4,
    config: gpii.tests.flowManager.savePrefs.configRecord,
    components: {
        createNewRequest: {
            type: "kettle.test.request.http",
            options: {
                port: "{configuration}.options.mainServerPort",
                path: "/user/preferences",
                method: "POST"
            }
        },
        createNewRequestWithoutPrefs: {
            type: "kettle.test.request.http",
            options: {
                port: "{configuration}.options.mainServerPort",
                path: "/user/preferences",
                method: "POST"
            }
        }
    },
    sequence: [{
        func: "{createNewRequest}.send",
        args: gpii.tests.flowManager.savePrefs.testPreferences
    }, {
        event: "{createNewRequest}.events.onComplete",
        listener: "gpii.tests.flowManager.savePrefs.testSuccessResponse",
        args: ["{arguments}.0", gpii.tests.flowManager.savePrefs.testPreferences]
    }, {
        func: "{createNewRequestWithoutPrefs}.send"
    }, {
        event: "{createNewRequestWithoutPrefs}.events.onComplete",
        listener: "gpii.tests.flowManager.savePrefs.testSuccessResponse",
        args: ["{arguments}.0", {}]
    }]
}, {
    name: "Flow Manager update tests - success cases",
    expect: 2,
    config: gpii.tests.flowManager.savePrefs.configRecord,
    components: {
        updateRequest: {
            type: "kettle.test.request.http",
            options: {
                port: "{configuration}.options.mainServerPort",
                path: "/user/preferences/%gpiiKey",
                method: "PUT",
                termMap: {
                    gpiiKey: gpii.tests.flowManager.savePrefs.gpiiKey
                }
            }
        }
    },
    sequence: [{
        func: "{updateRequest}.send",
        args: gpii.tests.flowManager.savePrefs.testPreferences
    }, {
        event: "{updateRequest}.events.onComplete",
        listener: "gpii.tests.flowManager.savePrefs.testSuccessResponse",
        args: ["{arguments}.0", gpii.tests.flowManager.savePrefs.testPreferences, gpii.tests.flowManager.savePrefs.gpiiKey]
    }]
}, {
    name: "Flow Manager update tests - failed cases",
    expect: 2,
    config: gpii.tests.flowManager.savePrefs.configRecord,
    components: {
        updateRequest: {
            type: "kettle.test.request.http",
            options: {
                port: "{configuration}.options.mainServerPort",
                path: "/user/preferences/%gpiiKey",
                method: "PUT",
                termMap: {
                    gpiiKey: gpii.tests.flowManager.savePrefs.nonExistentGpiiKey
                }
            }
        }
    },
    sequence: [{
        func: "{updateRequest}.send",
        args: gpii.tests.flowManager.savePrefs.testPreferences
    }, {
        event: "{updateRequest}.events.onComplete",
        listener: "gpii.tests.flowManager.savePrefs.testFailedResponse",
        args: ["{arguments}.0", "Cannot find the GPII key \"" + gpii.tests.flowManager.savePrefs.nonExistentGpiiKey + "\""]
    }]
}];


module.exports = gpii.test.bootstrapServer(gpii.tests.flowManager.savePrefs.testDefs);
