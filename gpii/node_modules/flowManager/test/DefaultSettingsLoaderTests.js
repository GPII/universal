/*!
Default Settings Loader Tests

Copyright 2018 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii"),
    kettle = require("kettle"),
    jqUnit = fluid.registerNamespace("jqUnit"),
    fs = require("fs"),
    rimraf = require("rimraf");

kettle.loadTestingSupport();

require("journal");
fluid.require("%flowManager/src/DefaultSettingsLoader.js");

fluid.registerNamespace("gpii.tests.defaultSettingsLoader");

gpii.tests.defaultSettingsLoader.testData = {
    gpiiSettingsDir: "%flowManager/test/data/temp",
    defaultSettingsInCodeBase: "%flowManager/test/data/defaultSettings.json5",
    defaultSettings: {
        "solution1": "mock default settings"
    }
};

fluid.defaults("gpii.tests.defaultSettingsLoader", {
    gradeNames: ["gpii.defaultSettingsLoader"],
    members: {
        // Use a temp dir to not disturb the data in the real GPII settings dir
        gpiiSettingsDir: gpii.tests.defaultSettingsLoader.testData.gpiiSettingsDir
    },
    defaultSettingsInCodeBase: gpii.tests.defaultSettingsLoader.testData.defaultSettingsInCodeBase,
    defaultSettings: gpii.tests.defaultSettingsLoader.testData.defaultSettings,
    listeners: {
        "onDestroy.cleanup": {
            listener: "gpii.tests.defaultSettingsLoader.cleanup",
            args: ["{that}.gpiiSettingsDir"]
        }
    }
});

gpii.tests.defaultSettingsLoader.prepare = function (gpiiSettingsDir, defaultSettingsInCodeBase, defaultSettings, onPreparedEvent) {
    // Create the settings dir for the test
    var fullDir = fluid.module.resolvePath(gpiiSettingsDir);
    if (!fs.existsSync(fullDir)) {
        fs.mkdirSync(fullDir);
    }

    // Prepare the test by writing an initial settings file to the settings dir
    var sourceSettingsFile = fluid.module.resolvePath(defaultSettingsInCodeBase);
    gpii.tests.defaultSettingsLoader.createFile(sourceSettingsFile, defaultSettings);
    onPreparedEvent.fire();
};

gpii.tests.defaultSettingsLoader.cleanup = function (gpiiSettingsDir) {
    var fullDir = fluid.module.resolvePath(gpiiSettingsDir);
    rimraf(fullDir, function () {
        fluid.log("Cleanup: removed ", fullDir);
    });
};

gpii.tests.defaultSettingsLoader.createFile = function (fileLocation, jsonContent) {
    fs.writeFileSync(fileLocation, JSON.stringify(jsonContent));
};

// Test that copies the settings file from the code base to the settings dir
gpii.tests.defaultSettingsLoader.withCopyAction = function (defaultSettingsLoader) {
    // Prepare by creating the default settings file in the code base
    var sourceSettingsFile = fluid.module.resolvePath(defaultSettingsLoader.options.defaultSettingsInCodeBase);
    var defaultSettings = {
        "solution1": "mock default settings"
    };
    gpii.tests.defaultSettingsLoader.createFile(sourceSettingsFile, defaultSettings);

    // Perform test
    var result = defaultSettingsLoader.get();

    jqUnit.assertTrue("The settings file has been copied to the settings dir", fs.existsSync(defaultSettingsLoader.defaultSettingsFile));
    jqUnit.assertDeepEq("get() returns the expected settings", defaultSettingsLoader.options.defaultSettings, result);

    // Clean up
    fs.unlinkSync(sourceSettingsFile);
};

// Test that the settings file already exists in the settings dir
gpii.tests.defaultSettingsLoader.withoutCopyAction = function (defaultSettingsLoader) {
    // Prepare the test by writing a initial settings file to the settings dir
    var sourceSettingsFile = fluid.module.resolvePath(defaultSettingsLoader.options.defaultSettingsInCodeBase);
    var defaultSettings = {
        "solution1": "mock default settings"
    };
    gpii.tests.defaultSettingsLoader.createFile(sourceSettingsFile, defaultSettings);

    var modifiedSettings = {
        "initial": "value"
    };

    fs.writeFileSync(defaultSettingsLoader.defaultSettingsFile, JSON.stringify(modifiedSettings));

    // Perform test
    var result = defaultSettingsLoader.get();

    jqUnit.assertDeepNeq("The loaded settings is as expected", JSON.stringify(modifiedSettings), result);
    jqUnit.assertDeepNeq("The expected settings is different from default settings in the code base", defaultSettingsLoader.options.defaultSettings, result);

    // Clean up
    fs.unlinkSync(sourceSettingsFile);
};

// 1st test set when the default settings file does exist in the code base
fluid.defaults("gpii.tests.defaultSettingsLoader.testCaseHolder", {
    gradeNames: ["fluid.test.testCaseHolder"],
    components: {
        defaultSettingsLoader: {
            type: "gpii.tests.defaultSettingsLoader",
            createOnEvent: "onPrepared"
        },
        prepare: {
            type: "fluid.component",
            options: {
                listeners: {
                    "onCreate.prepare": {
                        listener: "gpii.tests.defaultSettingsLoader.prepare",
                        args: [
                            gpii.tests.defaultSettingsLoader.testData.gpiiSettingsDir,
                            gpii.tests.defaultSettingsLoader.testData.defaultSettingsInCodeBase,
                            gpii.tests.defaultSettingsLoader.testData.defaultSettings,
                            "{testCaseHolder}.events.onPrepared"
                        ]
                    }
                }
            }
        }
    },
    events: {
        onPrepared: null
    },
    modules: [{
        name: "gpii.defaultSettingsLoader Tests",
        tests: [{
            expect: 2,
            name: "Tests when the settings file is not initially copied to the settings dir",
            func: "gpii.tests.defaultSettingsLoader.withCopyAction",
            args: ["{defaultSettingsLoader}"]
        }, {
            expect: 2,
            name: "Test the settings file in the settings dir will not be overwritten when it's already there",
            func: "gpii.tests.defaultSettingsLoader.withoutCopyAction",
            args: ["{defaultSettingsLoader}"]
        }]
    }]
});

fluid.defaults("gpii.tests.defaultSettingsLoader.existInCodeBase", {
    gradeNames: ["fluid.test.testEnvironment"],
    components: {
        tester: {
            type: "gpii.tests.defaultSettingsLoader.testCaseHolder"
        }
    }
});

module.exports = kettle.test.bootstrap("gpii.tests.defaultSettingsLoader.existInCodeBase");

// 2nd test set when the default settings file doesn't exist in the code base
fluid.defaults("gpii.tests.defaultSettingsLoader.testCaseHolder.nonExistentInCodeBase", {
    gradeNames: ["fluid.test.testCaseHolder"],
    components: {
        defaultSettingsLoader: {
            type: "gpii.tests.defaultSettingsLoader",
            options: {
                listeners: {
                    "onCreate.prepare": "fluid.identity"
                }
            }
        }
    },
    modules: [{
        name: "gpii.defaultSettingsLoader Tests",
        tests: [{
            expect: 1,
            name: "Tests when the settings file in the code base does not exist",
            func: "jqUnit.assertUndefined",
            args: ["Receive undefined when the settings file in the code base does not exist", "@expand:{defaultSettingsLoader}.get()"]
        }]
    }]
});

fluid.defaults("gpii.tests.defaultSettingsLoader.nonExistentInCodeBase", {
    gradeNames: ["fluid.test.testEnvironment"],
    components: {
        tester: {
            type: "gpii.tests.defaultSettingsLoader.testCaseHolder.nonExistentInCodeBase"
        }
    }
});

module.exports = kettle.test.bootstrap("gpii.tests.defaultSettingsLoader.nonExistentInCodeBase");
