/*!
GPII download and save solutions registry from source code repositoyr

Copyright 2020 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = fluid || require("infusion"),
    kettle = require("kettle"),
    jqUnit = fluid.registerNamespace("jqUnit"),
    gpii = fluid.registerNamespace("gpii");

kettle.loadTestingSupport();

fluid.require("%flowManager/src/SolutionsRegistryDataSource.js");
fluid.registerNamespace("gpii.tests.solutionsRegistry");

gpii.tests.solutionsRegistry = {
    path: "%gpii-universal/testData/solutions",
    platformIds: ["win32", "linux", "darwin", "android", "web"],
    localPlatformId: "darwin",
    localDarwinSolutions: require("./data/darwin.json5"),
    requestOptions: { os: "darwin" }
};

gpii.tests.solutionsRegistry.checkAllRegistries = function (msg, platformIds, result) {
    jqUnit.assertValue(msg, result);
    jqUnit.assertDeepEq(msg, platformIds, fluid.keys(result));
};

gpii.tests.solutionsRegistry.checkOneRegistry = function (msg, platformId, result) {
    jqUnit.assertValue(msg, result);
    // The platformId should be stripped out
    jqUnit.assertFalse(msg, platformId in result);
};

gpii.tests.solutionsRegistry.checkNamedLocalRegistry = function (msg, localSolutions, result) {
    jqUnit.assertValue(msg, result);
    jqUnit.assertDeepEq(msg, localSolutions, result);
};

gpii.tests.solutionsRegistry.checkAllWithNamedRegistry = function (msg, platformIds, localPlatformId, localSolutions, result) {
    gpii.tests.solutionsRegistry.checkAllRegistries(msg, platformIds, result);
    jqUnit.assertDeepEq(msg, localSolutions, result[localPlatformId]);
};

// ======== Testing the solutions registry data source used by the CBFM ========

// Test solutions registry data source (CBFM)
fluid.defaults("gpii.tests.solutionsRegistry.dataSource.cloud", {
    gradeNames: ["gpii.flowManager.solutionsRegistry.dataSource.cloud"]
});

fluid.defaults("gpii.tests.solutionsRegistry.cloud.testCaseHolder", {
    gradeNames: "fluid.test.testCaseHolder",
    components: {
        solutionsRegistryDataSource: {
            type: "gpii.tests.solutionsRegistry.dataSource.cloud",
            options: {
                path: gpii.tests.solutionsRegistry.path
            }
        }
    },
    modules: [{
        name: "Solutions registry used by CBFM - file-based solutions",
        expect: 2,
        tests: [{
            name: "Solutions registry used with CBFM - retrieve all solutions",
            sequence: [{
                task: "{solutionsRegistryDataSource}.get",
                args: [{}],
                resolve: "gpii.tests.solutionsRegistry.checkAllRegistries",
                resolveArgs: [
                    "Expecting all solutions registries",
                    gpii.tests.solutionsRegistry.platformIds,
                    "{arguments}.0"
                ]
            }]
        }, {
            name: "Solutions registry used with CBFM - retrieve one solution",
            sequence: [{
                task: "{solutionsRegistryDataSource}.get",
                args: [gpii.tests.solutionsRegistry.requestOptions],
                resolve: "gpii.tests.solutionsRegistry.checkOneRegistry",
                resolveArgs: [
                    "Expecting one solutions registry",
                    gpii.tests.solutionsRegistry.requestOptions.os,
                    "{arguments}.0"
                ]
            }]
        }]
    }]
});

// Test environment for CLFM solutions registry data source
fluid.defaults("gpii.tests.solutionsRegistry.dataSource.cloud.env", {
    gradeNames: ["fluid.test.testEnvironment"],
    components: {
        tester: {
            type: "gpii.tests.solutionsRegistry.cloud.testCaseHolder"
        }
    }
});

kettle.test.bootstrap("gpii.tests.solutionsRegistry.dataSource.cloud.env");

// ======== Testing the solutions registry data source used by the LFM ========

// Test component for the LFM solutions registry data source mocking a load
// from the source code repository.
fluid.defaults("gpii.tests.solutionsRegistry.dataSource.local.mockLoadFromRepository", {
    gradeNames: ["gpii.flowManager.solutionsRegistry.dataSource.local"],
    components: {
        revisionRequester: {
            type: "gpii.flowmanager.revisionRequester",
            options: {
                cloudURL: "http://nowhere.com"
            }
        }
    },
    listeners: {
        "onCreate": {
            listener: "gpii.tests.solutionsRegistry.dataSource.local.mockRepoLoad",
            args: [
                "{that}",
                gpii.tests.solutionsRegistry.localPlatformId,
                gpii.tests.solutionsRegistry.localDarwinSolutions
            ],
            priority: "after:solutionsLoaded"
        }
    }
});

// Test component for the LFM solutions registry data source where it fails to
// load from the source code repository.
fluid.defaults("gpii.tests.solutionsRegistry.dataSource.local.failLoadFromRepository", {
    gradeNames: ["gpii.flowManager.solutionsRegistry.dataSource.local"],
    components: {
        revisionRequester: {
            type: "gpii.flowmanager.revisionRequester",
            options: {
                cloudURL: "http://nowhere.com"
            }
        }
    },
    listeners: {
        "onCreate": {
            listener: "gpii.tests.solutionsRegistry.dataSource.local.nullRepoLoad",
            args: ["{that}"],
            priority: "after:solutionsLoaded"
        }
    }
});

fluid.defaults("gpii.tests.solutionsRegistry.local.testCaseHolder", {
    gradeNames: "fluid.test.testCaseHolder",
    components: {
        solutionsRegistryMockRepoLoad: {
            type: "gpii.tests.solutionsRegistry.dataSource.local.mockLoadFromRepository",
            options: {
                path: gpii.tests.solutionsRegistry.path
            }
        },
        solutionsRegistryNullRepoLoad: {
            type: "gpii.tests.solutionsRegistry.dataSource.local.failLoadFromRepository",
            options: {
                path: gpii.tests.solutionsRegistry.path
            }
        }
    },
    modules: [{
        name: "Solutions registry used by LFM - repository + file system based solutions",
        expect: 2,
        tests: [{
            name: "Solutions registry LFM - solutions loaded from repository and looking for named local registry",
            sequence: [{
                task: "{solutionsRegistryMockRepoLoad}.get",
                args: [gpii.tests.solutionsRegistry.requestOptions],
                resolve: "gpii.tests.solutionsRegistry.checkNamedLocalRegistry",
                resolveArgs: [
                    "Expecting local named solutions registry",
                    gpii.tests.solutionsRegistry.localDarwinSolutions,
                    "{arguments}.0"
                ]
            }]
        }, {
            name: "Solutions registry used with LFM - solutions loaded from repository but looking for all registries",
            sequence: [{
                task: "{solutionsRegistryMockRepoLoad}.get",
                args: [{}],
                resolve: "gpii.tests.solutionsRegistry.checkAllWithNamedRegistry",
                resolveArgs: [
                    "Expecting all solutions registries, but with local registry",
                    gpii.tests.solutionsRegistry.platformIds,
                    gpii.tests.solutionsRegistry.localPlatformId,
                    gpii.tests.solutionsRegistry.localDarwinSolutions,
                    "{arguments}.0"
                ]
            }]
        }, {
            name: "Solutions registry used with LFM - no solutions loaded from repository; looking for named registry",
            sequence: [{
                task: "{solutionsRegistryNullRepoLoad}.get",
                args: [gpii.tests.solutionsRegistry.requestOptions],
                resolve: "gpii.tests.solutionsRegistry.checkOneRegistry",
                resolveArgs: [
                    "Expecting one solutions registry",
                    gpii.tests.solutionsRegistry.requestOptions.os,
                    "{arguments}.0"
                ]
            }]
        }, {
            name: "Solutions registry used with LFM - no solutions loaded from repository; looking for all registries",
            sequence: [{
                task: "{solutionsRegistryNullRepoLoad}.get",
                args: [{}],
                resolve: "gpii.tests.solutionsRegistry.checkAllRegistries",
                resolveArgs: [
                    "Expecting all solutions registries",
                    gpii.tests.solutionsRegistry.platformIds,
                    "{arguments}.0"
                ]
            }]
        }]
    }]
});

gpii.tests.solutionsRegistry.dataSource.local.mockRepoLoad = function (that, platformId, solutions) {
    var promise = fluid.promise();
    var solutionsRegistry = {};
    solutionsRegistry[platformId] = solutions;
    that.repositorySolutionsRegistry = solutionsRegistry;
    promise.resolve(that.repositorySolutionsRegistry);
    return promise;
};

gpii.tests.solutionsRegistry.dataSource.local.nullRepoLoad = function (that) {
    var promise = fluid.promise();
    that.repositorySolutionsRegistry = null;
    promise.resolve(that.repositorySolutionsRegistry);
    return promise;
};

// Test environment for LFM solutions registry data source
fluid.defaults("gpii.tests.solutionsRegistry.dataSource.local.env", {
    gradeNames: ["fluid.test.testEnvironment"],
    components: {
        tester: {
            type: "gpii.tests.solutionsRegistry.local.testCaseHolder"
        }
    }
});

kettle.test.bootstrap("gpii.tests.solutionsRegistry.dataSource.local.env");
