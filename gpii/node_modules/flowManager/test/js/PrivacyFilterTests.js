/**
 * GPII Flow Manager Privacy Filter Tests
 *
 * Copyright 2015 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

/* global jqUnit, jQuery, JSON5 */

"use strict";

var fluid = fluid || require("infusion");

(function ($) {

    var gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.tests.flowManager.privacy.testdata");

    gpii.tests.flowManager.privacy.testdata.payload = $.ajax({
        type: "GET",
        url: "../data/matchmaker.output.payload.json",
        async: false,
        dataType: "json"
    }).responseJSON;

    gpii.tests.flowManager.privacy.privacyToSettingsTransformRules = JSON5.parse($.ajax({
        type: "GET",
        url: "../../../../../testData/ontologies/mappings/privacy-flat.json5",
        async: false
    }).responseText);

    gpii.tests.flowManager.privacy.settingsToPrivacyTransformRules = fluid.model.transform.invertConfiguration(gpii.tests.flowManager.privacy.privacyToSettingsTransformRules);

    fluid.defaults("gpii.tests.flowManager.privacy.privacyFilter", {
        gradeNames: "gpii.flowManager.privacy.privacyFilter",
        members: {
            settingsToPrivacyTransformRules: gpii.tests.flowManager.privacy.settingsToPrivacyTransformRules,
            privacyToSettingsTransformRules: gpii.tests.flowManager.privacy.privacyToSettingsTransformRules
        }
    });

    gpii.tests.flowManager.privacy.testdata.tests = [
        {
            name: "No privacy settings",
            privacySettings: { },
            expected: {
                "inferredConfiguration": {
                    "gpii-default": {
                        "applications": { }
                    },
                    "turn-down-light": {
                        "applications": { },
                        "conditions": [
                            {
                                "type": "http://registry.gpii.net/conditions/inRange",
                                "min": 400,
                                "inputPath": "http://registry\\.gpii\\.net/common/environment/illuminance"
                            }
                        ]
                    }
                }
            }
        },
        {
            name: "Privacy settings for magnifier (share magnifier settings)",
            privacySettings: {
                "org.gnome.desktop.a11y.magnifier": {
                    "increase-size.magnifier": true
                }
            },
            expected: {
                "inferredConfiguration": {
                    "gpii-default": {
                        "applications": {
                            "org.gnome.desktop.a11y.magnifier": {
                                "active": true,
                                "settings": {
                                    "http://registry.gpii.net/common/magnifierEnabled": true,
                                    "http://registry.gpii.net/common/magnification": 1.5
                                }
                            }
                        }
                    },
                    "turn-down-light": {
                        "applications": {
                            "org.gnome.desktop.a11y.magnifier": {
                                "active": true,
                                "settings": {
                                    "http://registry.gpii.net/common/magnifierEnabled": true,
                                    "http://registry.gpii.net/common/magnification": 2
                                }
                            }
                        },
                        "conditions": [
                            {
                                "type": "http://registry.gpii.net/conditions/inRange",
                                "min": 400,
                                "inputPath": "http://registry\\.gpii\\.net/common/environment/illuminance"
                            }
                        ]
                    }
                }
            }
        },
        {
            name: "Privacy settings for magnifier (share all) and orca (share enable and rate)",
            privacySettings: {
                "org.gnome.desktop.a11y.magnifier": {
                    "": true
                },
                "org.gnome.orca": {
                    "visual-alternatives.speak-text.enable": true,
                    "visual-alternatives.speak-text.rate": true
                }
            },
            expected: {
                "inferredConfiguration": {
                    "gpii-default": {
                        "applications": {
                            "org.gnome.desktop.a11y.magnifier": {
                                "active": true,
                                "settings": {
                                    "http://registry.gpii.net/common/screenReaderTTSEnabled": true,
                                    "http://registry.gpii.net/common/speechRate": 200,
                                    "http://registry.gpii.net/common/magnifierEnabled": true,
                                    "http://registry.gpii.net/common/magnification": 1.5
                                }
                            },
                            "org.gnome.orca": {
                                "active": true,
                                "settings": {
                                    "http://registry.gpii.net/common/screenReaderTTSEnabled": true,
                                    "http://registry.gpii.net/common/speechRate": 200
                                }
                            }
                        }
                    },
                    "turn-down-light": {
                        "applications": {
                            "org.gnome.desktop.a11y.magnifier": {
                                "active": true,
                                "settings": {
                                    "http://registry.gpii.net/common/screenReaderTTSEnabled": true,
                                    "http://registry.gpii.net/common/speechRate": 200,
                                    "http://registry.gpii.net/common/magnifierEnabled": true,
                                    "http://registry.gpii.net/common/magnification": 2,
                                    "http://registry.gpii.net/common/highContrastEnabled": true
                                }
                            },
                            "org.gnome.orca": {
                                "active": true,
                                "settings": {
                                    "http://registry.gpii.net/common/screenReaderTTSEnabled": true,
                                    "http://registry.gpii.net/common/speechRate": 200
                                }
                            }
                        },
                        "conditions": [
                            {
                                "type": "http://registry.gpii.net/conditions/inRange",
                                "min": 400,
                                "inputPath": "http://registry\\.gpii\\.net/common/environment/illuminance"
                            }
                        ]
                    }
                }
            }
        }
    ];

    gpii.tests.flowManager.privacy.verifyPropertyUnchanged = function (property, before, after) {
        jqUnit.assertValue(property + " has a value", after[property]);
        jqUnit.assertEquals(property + " is as before", before[property], after[property]);
    };

    gpii.tests.flowManager.privacy.verifyNonMatchMakerOutputUnchanged = function (before, after) {
        fluid.each(before, function (value, property) {
            if (property !== "matchMakerOutput") {
                gpii.tests.flowManager.privacy.verifyPropertyUnchanged(property, before, after);
            }
        });
    };

    gpii.tests.flowManager.privacy.runTests = function () {
        jqUnit.module("Privacy Filter Tests");
        fluid.each(gpii.tests.flowManager.privacy.testdata.tests, function (test) {
            jqUnit.test(test.name, function () {
                jqUnit.expect(15);
                var privacyFilter = gpii.tests.flowManager.privacy.privacyFilter();
                var filteredPayload = privacyFilter.filter(
                    gpii.tests.flowManager.privacy.testdata.payload,
                    test.privacySettings
                );
                gpii.tests.flowManager.privacy.verifyNonMatchMakerOutputUnchanged(
                    gpii.tests.flowManager.privacy.testdata.payload,
                    filteredPayload
                );
                jqUnit.assertDeepEq("Verify expected matchMakerOutput",
                                    test.expected, filteredPayload.matchMakerOutput);
            });
        });
    };

})(jQuery);
