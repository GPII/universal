/*!
GPII revision request tests

Copyright 2020 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = fluid || require("infusion"),
    gpii = fluid.registerNamespace("gpii"),
    kettle = require("kettle"),
    nock = require("nock");

fluid.require("%gpii-universal/gpii/node_modules/testing/src/NockUtils.js");
fluid.require("%flowManager/src/GpiiRevisionRequester.js");

kettle.loadTestingSupport();

fluid.registerNamespace("gpii.tests.revisionRequester");

gpii.tests.revisionRequester.hostname = "http://gpii.net";
gpii.tests.revisionRequester.path = "/revision";

// Set up mock cloud request/response
gpii.tests.revisionRequester.setUpNock = function (config) {
    var cloudMock = nock(config.hostname);
    cloudMock.log(console.log);

    // mock GET request
    cloudMock.get(config.path)
        .reply(config.status, config.response);
};

// Revision requester customized for testing
fluid.defaults("gpii.tests.revisionRequester", {
    gradeNames: ["gpii.flowmanager.revisionRequester"],
    cloudURL: gpii.tests.revisionRequester.hostname
});

// Base testEnvironment
fluid.defaults("gpii.tests.revisionRequesterTests", {
    gradeNames: ["fluid.test.testEnvironment"],
    testCaseHolderGrade: null,   // supplied by individual tests
    distributeOptions: {
        testCaseHolderGrade: {
            source: "{that}.options.testCaseHolderGrade",
            target: "{that > testCaseHolder}.type"
        }
    },
    components: {
        revisionRequester: {
            type: "gpii.tests.revisionRequester"
        },
        testCaseHolder: {
            type: "fluid.test.testCaseHolder"
        }
    }
});

// 1. Successful retrieval
gpii.tests.revisionRequester.success = {
    nockConfig: {
        hostname: gpii.tests.revisionRequester.hostname,
        path: gpii.tests.revisionRequester.path,
        type: "get",
        status: 200,
        response: {"sha256": "2602bdf868aec49993d8780feec42d4e9f995e21"}
    }
};

fluid.defaults("gpii.tests.revisionRequester.testCaseHolder.success", {
    gradeNames: "fluid.test.testCaseHolder",
    modules: [{
        name: "Revision requester module tests - successful retrieval",
        expect: 1,
        tests: [{
            name: "Response: valid revision",
            sequence: [{
                task: "{revisionRequester}.getRevision",
                resolve: "jqUnit.assertDeepEq",
                resolveArgs: [
                    "The response is the expected revision",
                    gpii.tests.revisionRequester.success.nockConfig.response,
                    "{arguments}.0"
                ]
            }]
        }]
    }]
});

fluid.defaults("gpii.tests.revisionRequesterTests.success", {
    gradeNames: ["gpii.tests.revisionRequesterTests", "gpii.test.testWithNock"],
    testCaseHolderGrade: "gpii.tests.revisionRequester.testCaseHolder.success",
    invokers: {
        setUpNock: {
            funcName: "gpii.tests.revisionRequester.setUpNock",
            args: gpii.tests.revisionRequester.success.nockConfig
        }
    }
});

// 2. Retrieval of malformed or missing revision
gpii.tests.revisionRequester.missingRevision = {
    nockConfig: {
        hostname: gpii.tests.revisionRequester.hostname,
        path: gpii.tests.revisionRequester.path,
        type: "get",
        status: 404,
        response: {
            isError: true,
            statusCode: 404,
            message: "Error retrieving full git revision: Missing revision value"
        }
    },
    expected: {
        isError: true,
        statusCode: 404,
        // FIXME:  Find out where in nock "while executing HTTP GET on url http://gpii.net/revision"
        // is coming from, and get rid of it.
        message: "Error retrieving full git revision: Missing revision value while executing HTTP GET on url http://gpii.net/revision"
    }
};

fluid.defaults("gpii.tests.revisionRequester.testCaseHolder.missingRevision", {
    gradeNames: "fluid.test.testCaseHolder",
    modules: [{
        name: "Revision requester module tests - missing revision",
        expect: 1,
        tests: [{
            name: "Response: missing revision",
            sequence: [{
                task: "{revisionRequester}.getRevision",
                resolve: "jqUnit.assertDeepEq",
                resolveArgs: [
                    "The response is expected as missing",
                    gpii.tests.revisionRequester.missingRevision.expected,
                    "{arguments}.0"
                ]
            }]
        }]
    }]
});

fluid.defaults("gpii.tests.revisionRequesterTests.missingRevision", {
    gradeNames: ["gpii.tests.revisionRequesterTests", "gpii.test.testWithNock"],
    testCaseHolderGrade: "gpii.tests.revisionRequester.testCaseHolder.missingRevision",
    invokers: {
        setUpNock: {
            funcName: "gpii.tests.revisionRequester.setUpNock",
            args: gpii.tests.revisionRequester.missingRevision.nockConfig
        }
    }
});

// 3. Null cloudURL for the revision request
gpii.tests.revisionRequester.nullCloudUrl = {
    nockConfig: {
        // The hostname should be null here, but nock can't handle it.  Taken
        // care of in the setup of the GpiiRevisionRquester used in the test:
        // see the "components" block of
        // "gpii.tests.revisionRequesterTests.nullCloudUrl" below.
        hostname: gpii.tests.revisionRequester.hostname,
        path: null,
        type: "get"
    },
    expected: null
};

fluid.defaults("gpii.tests.revisionRequester.testCaseHolder.nullCloudUrl", {
    gradeNames: "fluid.test.testCaseHolder",
    modules: [{
        name: "Revision requester module tests - null cloudURL",
        expect: 1,
        tests: [{
            name: "No revision request with a null result",
            sequence: [{
                task: "{revisionRequester}.getRevision",
                resolve: "jqUnit.assertNull",
                resolveArgs: [
                    "A null result is expected",
                    gpii.tests.revisionRequester.nullCloudUrl.expected,
                    "{arguments}.0"
                ]
            }]
        }]
    }]
});

fluid.defaults("gpii.tests.revisionRequesterTests.nullCloudUrl", {
    gradeNames: ["gpii.tests.revisionRequesterTests", "gpii.test.testWithNock"],
    testCaseHolderGrade: "gpii.tests.revisionRequester.testCaseHolder.nullCloudUrl",
    invokers: {
        setUpNock: {
            funcName: "gpii.tests.revisionRequester.setUpNock",
            args: gpii.tests.revisionRequester.nullCloudUrl.nockConfig
        }
    },
    components: {
        revisionRequester: {
            type: "gpii.tests.revisionRequester",
            options: {
                cloudURL: null
            }
        }
    }
});

// Run all tests
fluid.test.runTests([
    "gpii.tests.revisionRequesterTests.success",
    "gpii.tests.revisionRequesterTests.missingRevision",
    "gpii.tests.revisionRequesterTests.nullCloudUrl"
]);
