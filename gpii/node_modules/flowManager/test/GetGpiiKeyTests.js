/*
GPII Flow Manager getGpiiKey Tests
Copyright 2014 Raising the Floor - International
Copyright 2013 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/


"use strict";

var fluid = require("infusion"),
    jqUnit = fluid.require("node-jqunit", require, "jqUnit"),
    gpii = fluid.registerNamespace("gpii");

fluid.require("%gpii-universal");

gpii.loadTestingSupport();

fluid.registerNamespace("gpii.tests.flowManager.getGpiiKey");

gpii.tests.flowManager.getGpiiKey.gpiiKey = "testUser1";

gpii.tests.flowManager.getGpiiKey.testLoginResponse = function (data) {
    jqUnit.assertEquals("Response is correct", "User with GPII key " +
        gpii.tests.flowManager.getGpiiKey.gpiiKey + " was successfully logged in.", data);
};

gpii.tests.flowManager.getGpiiKey.testLogoutResponse = function (data) {
    jqUnit.assertEquals("Response is correct", "User with GPII key " +
        gpii.tests.flowManager.getGpiiKey.gpiiKey + " was successfully logged out.", data);
};


fluid.defaults("gpii.tests.flowManager.getGpiiKeyRequest", {
    gradeNames: "kettle.test.request.http",
    port: "{configuration}.options.mainServerPort",
    path: "/gpiiKey"
});

gpii.tests.flowManager.getGpiiKey.testDefs = [{
    name: "Flow Manager getGpiiKey tests.",
    expect: 10,
    config: {
        configName: "gpii.config.development.local",
        configPath: "%gpii-universal/gpii/configs"
    },
    components: {
        getGpiiKeyRequest1: {
            type: "gpii.tests.flowManager.getGpiiKeyRequest"
        },
        getGpiiKeyRequest2: {
            type: "gpii.tests.flowManager.getGpiiKeyRequest"
        },
        getGpiiKeyRequest3: {
            type: "gpii.tests.flowManager.getGpiiKeyRequest"
        },
        loginRequest: {
            type: "kettle.test.request.http",
            options: {
                port: "{configuration}.options.mainServerPort",
                path: "/user/%gpiiKey/login",
                termMap: {
                    gpiiKey: gpii.tests.flowManager.getGpiiKey.gpiiKey
                }
            }
        },
        logoutRequest: {
            type: "kettle.test.request.http",
            options: {
                port: "{configuration}.options.mainServerPort",
                path: "/user/%gpiiKey/logout",
                termMap: {
                    gpiiKey: gpii.tests.flowManager.getGpiiKey.gpiiKey
                }
            }
        }
    },
    sequence: [{
        func: "{getGpiiKeyRequest1}.send"
    }, {
        event: "{getGpiiKeyRequest1}.events.onComplete",
        listener: "kettle.test.assertErrorResponse",
        args: {
            message: "Received 401 error when asking for GPII key when not logged on",
            errorTexts: "No user currently logged in to the system",
            statusCode: 401,
            string: "{arguments}.0",
            request: "{getGpiiKeyRequest1}"
        }
    }, {
        func: "{loginRequest}.send"
    }, {
        event: "{loginRequest}.events.onComplete",
        listener: "gpii.tests.flowManager.getGpiiKey.testLoginResponse"
    }, {
        func: "{getGpiiKeyRequest2}.send"
    }, {
        event: "{getGpiiKeyRequest2}.events.onComplete",
        listener: "kettle.test.assertJSONResponse",
        args: {
            message: "Expecting GPII key returned in payload",
            string: "{arguments}.0",
            request: "{getGpiiKeyRequest2}",
            expected: [gpii.tests.flowManager.getGpiiKey.gpiiKey]
        }
    }, {
        func: "{logoutRequest}.send"
    }, {
        event: "{logoutRequest}.events.onComplete",
        listener: "gpii.tests.flowManager.getGpiiKey.testLogoutResponse"
    }, {
        func: "{getGpiiKeyRequest3}.send"
    }, {
        event: "{getGpiiKeyRequest3}.events.onComplete",
        listener: "kettle.test.assertErrorResponse",
        args: {
            message: "Received 401 error when asking for GPII key when not logged on",
            errorTexts: "No user currently logged in to the system",
            statusCode: 401,
            string: "{arguments}.0",
            request: "{getGpiiKeyRequest1}"
        }
    }]
}];

module.exports = gpii.test.bootstrapServer(gpii.tests.flowManager.getGpiiKey.testDefs);
