/*!
GPII download and save solutions registry from source code repositoyr

Copyright 2020 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = fluid || require("infusion"),
    gpii = fluid.registerNamespace("gpii"),
    kettle = require("kettle"),
    nock = require("nock");

fluid.require("%gpii-universal/gpii/node_modules/testing/src/NockUtils.js");
fluid.require("%flowManager/src/RepositorySolutionsLoader.js");

kettle.loadTestingSupport();

fluid.registerNamespace("gpii.tests.repositorySolutionsLoader");

gpii.tests.repositorySolutionsLoader = {
    hostname: "http://gpii.net",
    prefix: "prefix",
    revision: "32759c38f9e1a5a38072f8c5e60b02a5d20969d7",
    suffix: "suffix",
    platformId: "darwin",
    fileName: "darwin.json5",
    solutionsRegistryFolderPath: "%flowManager/test/data/",
    taggedSolutions: {} // filled in below
};
gpii.tests.repositorySolutionsLoader.path = "/" +
    gpii.tests.repositorySolutionsLoader.prefix + "/" +
    gpii.tests.repositorySolutionsLoader.revision + "/" +
    gpii.tests.repositorySolutionsLoader.suffix + "/" +
    gpii.tests.repositorySolutionsLoader.fileName;

gpii.tests.repositorySolutionsLoader.solutions = fluid.require(
    gpii.tests.repositorySolutionsLoader.solutionsRegistryFolderPath +
    gpii.tests.repositorySolutionsLoader.fileName
);

// The solutions registry files contain a set of solutions as an object.  The
// RepositorySolutionsLoader tags the set with a platform ID and returns the
// tagged set as its payload.
fluid.set(
    gpii.tests.repositorySolutionsLoader.taggedSolutions,
    gpii.tests.repositorySolutionsLoader.platformId,
    gpii.tests.repositorySolutionsLoader.solutions
);

// Set up mock cloud request/response
gpii.tests.repositorySolutionsLoader.setUpNock = function (config) {
    var cloudMock = nock(gpii.tests.repositorySolutionsLoader.hostname);
    cloudMock.log(console.log);

    // mock GET request
    cloudMock.get(gpii.tests.repositorySolutionsLoader.path)
        .reply(config.status, config.response);
};

// Repository loader customized for testing
fluid.defaults("gpii.tests.repositorySolutionsLoader", {
    gradeNames: ["gpii.flowManager.repositorySolutionsLoader"],
    urlPrefix: gpii.tests.repositorySolutionsLoader.hostname + "/" + gpii.tests.repositorySolutionsLoader.prefix,
    urlSuffix: gpii.tests.repositorySolutionsLoader.suffix,
    protocol: "http:"
});

// Base testEnvironment
fluid.defaults("gpii.tests.repositorySolutionsLoaderTests", {
    gradeNames: ["fluid.test.testEnvironment"],
    testCaseHolderGrade: null,   // supplied by individual tests
    distributeOptions: {
        testCaseHolderGrade: {
            source: "{that}.options.testCaseHolderGrade",
            target: "{that > testCaseHolder}.type"
        }
    },
    components: {
        repositorySolutionsLoader: {
            type: "gpii.tests.repositorySolutionsLoader"
        },
        testCaseHolder: {
            type: "fluid.test.testCaseHolder"
        }
    }
});

// 1. Successful retrieval
gpii.tests.repositorySolutionsLoader.success = {
    nockConfig: {
        url: gpii.tests.repositorySolutionsLoader.hostname + gpii.tests.repositorySolutionsLoader.path,
        type: "get",
        status: 200,
        response: gpii.tests.repositorySolutionsLoader.solutions
    }
};

fluid.defaults("gpii.tests.repositorySolutionsLoader.testCaseHolder.success", {
    gradeNames: "fluid.test.testCaseHolder",
    modules: [{
        name: "Repository solutions loader module tests - successful retrieval",
        expect: 1,
        tests: [{
            name: "Response: solutions loaded",
            sequence: [{
                task: "{repositorySolutionsLoader}.getSolutions",
                args: [
                    gpii.tests.repositorySolutionsLoader.revision,
                    gpii.tests.repositorySolutionsLoader.platformId
                ],
                resolve: "jqUnit.assertDeepEq",
                resolveArgs: [
                    "Check response for tagged solutions",
                    gpii.tests.repositorySolutionsLoader.taggedSolutions,
                    "{arguments}.0"
                ]
            }]
        }]
    }]
});

fluid.defaults("gpii.tests.repositorySolutionsLoaderTests.success", {
    gradeNames: ["gpii.tests.repositorySolutionsLoaderTests", "gpii.test.testWithNock"],
    testCaseHolderGrade: "gpii.tests.repositorySolutionsLoader.testCaseHolder.success",
    invokers: {
        setUpNock: {
            funcName: "gpii.tests.repositorySolutionsLoader.setUpNock",
            args: gpii.tests.repositorySolutionsLoader.success.nockConfig
        }
    }
});

// 2. Failure due to missing revision
gpii.tests.repositorySolutionsLoader.missingRevision = {
    nockConfig: {
        url: gpii.tests.repositorySolutionsLoader.hostname + gpii.tests.repositorySolutionsLoader.path,
        type: "get",
        status: 404,
        response: {
            isError: true,
            statusCode: 404,
            message: "Error retrieving solutions from repository: missing revision"
        }
    },
    expected: {
        isError: true,
        statusCode: 404,
        message: "Error retrieving solutions from repository: missing revision"
    }
};

fluid.defaults("gpii.tests.repositorySolutionsLoader.testCaseHolder.missingRevision", {
    gradeNames: "fluid.test.testCaseHolder",
    modules: [{
        name: "Revision requester module tests - missing revision",
        expect: 1,
        tests: [{
            name: "Response: missing revision",
            sequence: [{
                task: "{repositorySolutionsLoader}.getSolutions",
                args: [
                    null,
                    gpii.tests.repositorySolutionsLoader.platformId
                ],
                reject: "jqUnit.assertDeepEq",
                rejectArgs: [
                    "Check missing revision",
                    gpii.tests.repositorySolutionsLoader.missingRevision.expected,
                    "{arguments}.0"
                ]
            }]
        }]
    }]
});

fluid.defaults("gpii.tests.repositorySolutionsLoaderTests.missingRevision", {
    gradeNames: ["gpii.tests.repositorySolutionsLoaderTests", "gpii.test.testWithNock"],
    testCaseHolderGrade: "gpii.tests.repositorySolutionsLoader.testCaseHolder.missingRevision",
    invokers: {
        setUpNock: {
            funcName: "gpii.tests.repositorySolutionsLoader.setUpNock",
            args: gpii.tests.repositorySolutionsLoader.missingRevision.nockConfig
        }
    }
});

// 3. Failure due to missing platform ID
gpii.tests.repositorySolutionsLoader.missingPlatformId = {
    nockConfig: {
        url: gpii.tests.repositorySolutionsLoader.hostname + gpii.tests.repositorySolutionsLoader.path,
        type: "get",
        status: 404,
        response: {
            isError: true,
            statusCode: 404,
            message: "Error retrieving solutions from repository: missing platform ID"
        }
    },
    expected: {
        isError: true,
        statusCode: 404,
        message: "Error retrieving solutions from repository: missing platform ID"
    }
};

fluid.defaults("gpii.tests.repositorySolutionsLoader.testCaseHolder.missingPlatformId", {
    gradeNames: "fluid.test.testCaseHolder",
    modules: [{
        name: "Revision requester module tests - missing platform ID",
        expect: 1,
        tests: [{
            name: "Response: missing platform ID",
            sequence: [{
                task: "{repositorySolutionsLoader}.getSolutions",
                args: [
                    gpii.tests.repositorySolutionsLoader.revision,
                    null
                ],
                reject: "jqUnit.assertDeepEq",
                rejectArgs: [
                    "Check missing platform ID",
                    gpii.tests.repositorySolutionsLoader.missingPlatformId.expected,
                    "{arguments}.0"
                ]
            }]
        }]
    }]
});

fluid.defaults("gpii.tests.repositorySolutionsLoaderTests.missingPlatformId", {
    gradeNames: ["gpii.tests.repositorySolutionsLoaderTests", "gpii.test.testWithNock"],
    testCaseHolderGrade: "gpii.tests.repositorySolutionsLoader.testCaseHolder.missingPlatformId",
    invokers: {
        setUpNock: {
            funcName: "gpii.tests.repositorySolutionsLoader.setUpNock",
            args: gpii.tests.repositorySolutionsLoader.missingPlatformId.nockConfig
        }
    }
});

// 4. Failure due to missing revision and platform ID
gpii.tests.repositorySolutionsLoader.missingRevisionAndPlatformId = {
    nockConfig: {
        url: gpii.tests.repositorySolutionsLoader.hostname + gpii.tests.repositorySolutionsLoader.path,
        type: "get",
        status: 404,
        response: {
            isError: true,
            statusCode: 404,
            message: "Error retrieving solutions from repository: missing revision and platform ID"
        }
    },
    expected: {
        isError: true,
        statusCode: 404,
        message: "Error retrieving solutions from repository: missing revision and platform ID"
    }
};

fluid.defaults("gpii.tests.repositorySolutionsLoader.testCaseHolder.missingRevisionAndPlatformId", {
    gradeNames: "fluid.test.testCaseHolder",
    modules: [{
        name: "Revision requester module tests - missing revision and platform ID",
        expect: 1,
        tests: [{
            name: "Response: missing revision and platform ID",
            sequence: [{
                task: "{repositorySolutionsLoader}.getSolutions",
                args: [null, null],
                reject: "jqUnit.assertDeepEq",
                rejectArgs: [
                    "Check missing both revision and platform ID",
                    gpii.tests.repositorySolutionsLoader.missingRevisionAndPlatformId.expected,
                    "{arguments}.0"
                ]
            }]
        }]
    }]
});

fluid.defaults("gpii.tests.repositorySolutionsLoaderTests.missingRevisionAndPlatformId", {
    gradeNames: ["gpii.tests.repositorySolutionsLoaderTests", "gpii.test.testWithNock"],
    testCaseHolderGrade: "gpii.tests.repositorySolutionsLoader.testCaseHolder.missingRevisionAndPlatformId",
    invokers: {
        setUpNock: {
            funcName: "gpii.tests.repositorySolutionsLoader.setUpNock",
            args: gpii.tests.repositorySolutionsLoader.missingRevisionAndPlatformId.nockConfig
        }
    }
});

// Run all tests
fluid.test.runTests([
    "gpii.tests.repositorySolutionsLoaderTests.success",
    "gpii.tests.repositorySolutionsLoaderTests.missingRevision",
    "gpii.tests.repositorySolutionsLoaderTests.missingPlatformId",
    "gpii.tests.repositorySolutionsLoaderTests.missingRevisionAndPlatformId"
]);
