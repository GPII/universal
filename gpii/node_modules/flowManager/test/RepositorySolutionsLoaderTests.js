/*!
GPII download and save solutions registry from source code repositoyr

Copyright 2020 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = fluid || require("infusion"),
    gpii = fluid.registerNamespace("gpii"),
    kettle = require("kettle"),
    nock = require("nock");

fluid.require("%gpii-universal/gpii/node_modules/testing/src/NockUtils.js");
fluid.require("%flowManager/src/RepositorySolutionsLoader.js");

kettle.loadTestingSupport();

fluid.registerNamespace("gpii.tests.repositorySolutionsLoader");

gpii.tests.repositorySolutionsLoader.hostname = "http://gpii.net";
gpii.tests.repositorySolutionsLoader.prefix = "prefix",
gpii.tests.repositorySolutionsLoader.revision = "32759c38f9e1a5a38072f8c5e60b02a5d20969d7";
gpii.tests.repositorySolutionsLoader.suffix = "suffix";
gpii.tests.repositorySolutionsLoader.fileName = "darwin.json5";
gpii.tests.repositorySolutionsLoader.path = "/" +
    gpii.tests.repositorySolutionsLoader.prefix + "/" +
    gpii.tests.repositorySolutionsLoader.revision + "/" +
    gpii.tests.repositorySolutionsLoader.suffix + "/" +
    gpii.tests.repositorySolutionsLoader.fileName;

gpii.tests.repositorySolutionsLoader.folderPath = "%flowManager/test/data/"
gpii.tests.repositorySolutionsLoader.solutions = fluid.require(
    gpii.tests.repositorySolutionsLoader.folderPath +
    gpii.tests.repositorySolutionsLoader.fileName
);

// Set up mock cloud request/response
gpii.tests.repositorySolutionsLoader.setUpNock = function (config) {
    debugger;
    var cloudMock = nock(gpii.tests.repositorySolutionsLoader.hostname);
    cloudMock.log(console.log);

    // mock GET request
    var foo = cloudMock.get(gpii.tests.repositorySolutionsLoader.path)
        .reply(config.status, config.response);
};

// Repository loader customized for testing
fluid.defaults("gpii.tests.repositorySolutionsLoader", {
    gradeNames: ["gpii.flowManager.repositorySolutionsLoader"],
    urlPrefix: "http://gpii.net/" + gpii.tests.repositorySolutionsLoader.prefix,
    urlSuffix: gpii.tests.repositorySolutionsLoader.suffix,
    folderPath: gpii.tests.repositorySolutionsLoader.folderPath,
    members: {
        gpiiRevision: gpii.tests.repositorySolutionsLoader.revision,
        fileName: gpii.tests.repositorySolutionsLoader.fileName
    }
});

// Base testEnvironment
fluid.defaults("gpii.tests.repositorySolutionsLoaderTests", {
    gradeNames: ["fluid.test.testEnvironment"],
    testCaseHolderGrade: null,   // supplied by individual tests
    distributeOptions: {
        testCaseHolderGrade: {
            source: "{that}.options.testCaseHolderGrade",
            target: "{that > testCaseHolder}.type"
        }
    },
    components: {
        repositorySolutionsLoader: {
            type: "gpii.tests.repositorySolutionsLoader"
        },
        testCaseHolder: {
            type: "fluid.test.testCaseHolder"
        }
    }
});

// 1. Successful retrieval
gpii.tests.repositorySolutionsLoader.success = {
    nockConfig: {
        url: gpii.tests.repositorySolutionsLoader.hostname + gpii.tests.repositorySolutionsLoader.path,
        type: "get",
        status: 200,
        response: gpii.tests.repositorySolutionsLoader.solutions
    }
};

fluid.defaults("gpii.tests.repositorySolutionsLoader.testCaseHolder.success", {
    gradeNames: "fluid.test.testCaseHolder",
    modules: [{
        name: "Repository solutions loader module tests - successful retrieval",
        expect: 1,
        tests: [{
            name: "Response: solutions loaded",
            sequence: [{
                task: "{repositorySolutionsLoader}.getSolutions",
                resolve: "jqUnit.assertDeepEq",
                resolveArgs: [
                    "The response is the expected solutions",
                    gpii.tests.repositorySolutionsLoader.success.nockConfig.response,
                    "{arguments}.0"
                ]
            }]
        }]
    }]
});

fluid.defaults("gpii.tests.repositorySolutionsLoaderTests.success", {
    gradeNames: ["gpii.tests.repositorySolutionsLoaderTests", "gpii.test.testWithNock"],
    testCaseHolderGrade: "gpii.tests.repositorySolutionsLoader.testCaseHolder.success",
    invokers: {
        setUpNock: {
            funcName: "gpii.tests.repositorySolutionsLoader.setUpNock",
            args: gpii.tests.repositorySolutionsLoader.success.nockConfig
        }
    }
});

// 2. Retrieval of malformed or missing revision
gpii.tests.repositorySolutionsLoader.missingRevision = {
    nockConfig: {
        url: gpii.tests.repositorySolutionsLoader.hostname + gpii.tests.repositorySolutionsLoader.path,
        type: "get",
        status: 404,
        response: {
            isError: true,
            statusCode: 404,
            message: "Error retrieving full git revision: Missing revision value"
        }
    },
    expected: {
        isError: true,
        statusCode: 404,
        // FIXME:  Find out where in nock "while executing HTTP GET on url http://gpii.net/revision"
        // is coming from, and get rid of it.
        message: "Error retrieving full git revision: Missing revision value while executing HTTP GET on url http://gpii.net/revision"
    }
};

fluid.defaults("gpii.tests.repositorySolutionsLoader.testCaseHolder.missingRevision", {
    gradeNames: "fluid.test.testCaseHolder",
    modules: [{
        name: "Revision requester module tests - missing revision",
        expect: 1,
        tests: [{
            name: "Response: missing revision",
            sequence: [{
                task: "{repositorySolutionsLoader}.getRevision",
                resolve: "jqUnit.assertDeepEq",
                resolveArgs: [
                    "The response is expected as missing",
                    gpii.tests.repositorySolutionsLoader.missingRevision.expected,
                    "{arguments}.0"
                ]
            }]
        }]
    }]
});

fluid.defaults("gpii.tests.repositorySolutionsLoaderTests.missingRevision", {
    gradeNames: ["gpii.tests.repositorySolutionsLoaderTests", "gpii.test.testWithNock"],
    testCaseHolderGrade: "gpii.tests.repositorySolutionsLoader.testCaseHolder.missingRevision",
    invokers: {
        setUpNock: {
            funcName: "gpii.tests.repositorySolutionsLoader.setUpNock",
            args: gpii.tests.repositorySolutionsLoader.missingRevision.nockConfig
        }
    }
});

// Run all tests
fluid.test.runTests([
    "gpii.tests.repositorySolutionsLoaderTests.success"/*,
    "gpii.tests.repositorySolutionsLoaderTests.missingRevision"*/
]);
