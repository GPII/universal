/**
 * GPII PCP Channel Tests
 *
 * Copyright 2017 Raising the Floor - International
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    jqUnit = fluid.require("node-jqunit", require, "jqUnit"),
    gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.tests.flowManager.pcpChannel");

gpii.tests.flowManager.pcpChannel.payloads = {
    "noLoggedInUsers": {
        "path": ""
    },
    "chrome2LoggedIn": {
        "path": "",
        "value": {
            "appliedSolutions": {
                "org.chrome.cloud4chrome": {
                    "name": "Dummy solution registry entry",
                    "settingsHandlers": {
                        "conf": {
                            "type": "gpii.settingsHandlers.webSockets",
                            "options": {
                                "path": "org.chrome.cloud4chrome"
                            },
                            "settings": {
                                "screenReaderTTSEnabled": false,
                                "highContrastEnabled": true,
                                "invertColours": false,
                                "magnifierEnabled": true,
                                "magnification": 2,
                                "fontSize": "medium",
                                "simplifier": false,
                                "highContrastTheme": "white-black"
                            }
                        }
                    },
                    "configure": [
                        "settings.conf"
                    ],
                    "restore": [
                        "settings.conf"
                    ],
                    "active": true
                }
            },
            "userToken": "chrome2",
            "matchMakerOutput": {
                "inferredConfiguration": {
                    "gpii-default": {
                        "lifecycleInstructions": {
                            "org.chrome.cloud4chrome": {
                                "name": "Dummy solution registry entry",
                                "settingsHandlers": {
                                    "conf": {
                                        "type": "gpii.settingsHandlers.webSockets",
                                        "options": {
                                            "path": "org.chrome.cloud4chrome"
                                        },
                                        "settings": {
                                            "screenReaderTTSEnabled": false,
                                            "highContrastEnabled": true,
                                            "invertColours": false,
                                            "magnifierEnabled": true,
                                            "magnification": 2,
                                            "fontSize": "medium",
                                            "simplifier": false,
                                            "highContrastTheme": "white-black"
                                        }
                                    }
                                },
                                "configure": [
                                    "settings.conf"
                                ],
                                "restore": [
                                    "settings.conf"
                                ],
                                "active": true
                            }
                        }
                    }
                }
            },
            "activeContextName": "gpii-default",
            "activeConfiguration": {
                "lifecycleInstructions": {
                    "org.chrome.cloud4chrome": {
                        "name": "Dummy solution registry entry",
                        "settingsHandlers": {
                            "conf": {
                                "type": "gpii.settingsHandlers.webSockets",
                                "options": {
                                    "path": "org.chrome.cloud4chrome"
                                },
                                "settings": {
                                    "screenReaderTTSEnabled": false,
                                    "highContrastEnabled": true,
                                    "invertColours": false,
                                    "magnifierEnabled": true,
                                    "magnification": 2,
                                    "fontSize": "medium",
                                    "simplifier": false,
                                    "highContrastTheme": "white-black"
                                }
                            }
                        },
                        "configure": [
                            "settings.conf"
                        ],
                        "restore": [
                            "settings.conf"
                        ],
                        "active": true
                    }
                }
            }
        }
    }
};

gpii.tests.flowManager.pcpChannel.reportPlatform = function () {
    return {
        id: "win32",
        version: "x86-64"
    };
};

gpii.tests.flowManager.pcpChannel.connectionSucceeded = function (data) {
    console.log("## connectionSucceeded ");
    jqUnit.assertTrue("Connection between client and server can be established",
        data
    );
};

gpii.tests.flowManager.pcpChannel.onReceiveMessage = function (data, expected) {
    console.log("## onReceiveMessage");
    jqUnit.assertDeepEq("Check message is as expected", gpii.tests.flowManager.pcpChannel.payloads[expected], data)
};

fluid.defaults("gpii.tests.flowManager.pcpChannel.clientHolder", {
    gradeNames: "kettle.test.request.ws",
    path: "/pcpChannel",
    port: "{configuration}.options.mainServerPort",
    events: {
        connectionSucceeded: null
    },
    listeners: {
        connectionSucceeded: {
            funcName: "gpii.tests.flowManager.pcpChannel.connectionSucceeded",
            args: ["{arguments}.0"]
        }
    }
});


fluid.defaults("gpii.tests.flowManager.pcpChannel.clientOne", {
    gradeNames: "gpii.tests.flowManager.pcpChannel.clientHolder"
});

fluid.defaults("gpii.tests.flowManager.pcpChannel.tokenRequest", {
    gradeNames: "kettle.test.request.http",
    termMap: {
        userToken: "{that}.options.tokenName"
    }
});

fluid.defaults("gpii.tests.flowManager.pcpChannel.loginRequest", {
    gradeNames: "gpii.tests.flowManager.pcpChannel.tokenRequest",
    path: "/user/%userToken/login"
});

fluid.defaults("gpii.tests.flowManager.pcpChannel.logoutRequest", {
    gradeNames: "gpii.tests.flowManager.pcpChannel.tokenRequest",
    path: "/user/%userToken/logout"
});

gpii.tests.flowManager.pcpChannel.testLogoutResponse = function (data, tokenName) {
    jqUnit.assertEquals("Response is correct", "User with token " + tokenName + " was successfully logged out.", data);
};

gpii.tests.flowManager.pcpChannel.testLoginResponse = function (data, spec) {
    console.log("## on testLoginResponse " + data);
};

gpii.tests.flowManager.pcpChannel.testDefs = [{
    name: "PCP Channel - Basic user login/logout and client connect/disconnect tests",
    expect: 6,
    config: {
        configName: "gpii.flowManager.tests.pcpChannel.config",
        configPath: "%flowManager/test/configs"
    },
    components: {
        clientOne: {
            type: "gpii.tests.flowManager.pcpChannel.clientOne"
        },
        clientTwo: {
            type: "gpii.tests.flowManager.pcpChannel.clientOne"
        },
        loginUser: {
            type: "gpii.tests.flowManager.pcpChannel.loginRequest",
            options: {
                tokenName: "chrome2"
            }
        },
        logoutUser: {
            type: "gpii.tests.flowManager.pcpChannel.logoutRequest",
            options: {
                tokenName: "chrome2"
            }
        }
    },
    sequence: [{
        func: "{clientOne}.connect"
    }, {
        event: "{clientOne}.events.onConnect",
        listener: "gpii.tests.flowManager.pcpChannel.connectionSucceeded"
    }, {
        event: "{clientOne}.events.onReceiveMessage",
        listener: "gpii.tests.flowManager.pcpChannel.onReceiveMessage",
        args: ["{arguments}.0", "noLoggedInUsers"]
    }, {
        func: "{loginUser}.send"
    }, {
        event: "{clientOne}.events.onReceiveMessage",
        listener: "gpii.tests.flowManager.pcpChannel.onReceiveMessage",
        args: ["{arguments}.0", "chrome2LoggedIn"]
    }, {
        func: "{clientOne}.disconnect"
    }, {
        func: "{clientTwo}.connect"
    }, {
        event: "{clientTwo}.events.onConnect",
        listener: "gpii.tests.flowManager.pcpChannel.connectionSucceeded"
    }, {
        event: "{clientTwo}.events.onReceiveMessage",
        listener: "gpii.tests.flowManager.pcpChannel.onReceiveMessage",
        args: ["{arguments}.0", "chrome2LoggedIn"]
    }, {
        func: "{logoutUser}.send"
    }, {
        event: "{clientTwo}.events.onReceiveMessage",
        listener: "gpii.tests.flowManager.pcpChannel.onReceiveMessage",
        args: ["{arguments}.0", "noLoggedInUsers"]
    }]
}];
