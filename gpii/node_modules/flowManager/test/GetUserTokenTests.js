/*
GPII Flow Manager getUserToken Tests
Copyright 2014 Raising the Floor - International
Copyright 2013 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

The research leading to these results has received funding from the European Union's
Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 289016.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/


"use strict";

var fluid = require("infusion"),
    jqUnit = fluid.require("node-jqunit", require, "jqUnit"),
    gpii = fluid.registerNamespace("gpii"),
    kettle = fluid.require("kettle");

fluid.require("%universal");

kettle.loadTestingSupport();

fluid.registerNamespace("gpii.tests.flowManager.getUserToken");

gpii.tests.flowManager.getUserToken.userToken = "testUser1";

gpii.tests.flowManager.getUserToken.testLoginResponse = function (data) {
    jqUnit.assertEquals("Response is correct", "User with token " +
        gpii.tests.flowManager.getUserToken.userToken + " was successfully logged in.", data);
};

gpii.tests.flowManager.getUserToken.testLogoutResponse = function (data) {
    jqUnit.assertEquals("Response is correct", "User with token " +
        gpii.tests.flowManager.getUserToken.userToken + " was successfully logged out.", data);
};


fluid.defaults("gpii.tests.flowManager.getUserTokenRequest", {
    gradeNames: "kettle.test.request.http",
    port: "{configuration}.options.mainServerPort",
    path: "/userToken"
});

gpii.tests.flowManager.getUserToken.testDefs = [{
    name: "Flow Manager getUserToken tests.",
    expect: 10,
    config: {
        configName: "gpii.flowManager.tests.getUserToken.config",
        configPath: "%flowManager/test/configs"
    },
    components: {
        getUserTokenRequest1: {
            type: "gpii.tests.flowManager.getUserTokenRequest"
        },
        getUserTokenRequest2: {
            type: "gpii.tests.flowManager.getUserTokenRequest"
        },
        getUserTokenRequest3: {
            type: "gpii.tests.flowManager.getUserTokenRequest"
        },
        loginRequest: {
            type: "kettle.test.request.http",
            options: {
                port: "{configuration}.options.mainServerPort",
                path: "/user/%userToken/login",
                termMap: {
                    userToken: gpii.tests.flowManager.getUserToken.userToken
                }
            }
        },
        logoutRequest: {
            type: "kettle.test.request.http",
            options: {
                port: "{configuration}.options.mainServerPort",
                path: "/user/%userToken/logout",
                termMap: {
                    userToken: gpii.tests.flowManager.getUserToken.userToken
                }
            }
        }
    },
    sequence: [{
        func: "{getUserTokenRequest1}.send"
    }, {
        event: "{getUserTokenRequest1}.events.onComplete",
        listener: "kettle.test.assertErrorResponse",
        args: {
            message: "Received 401 error when asking for token when not logged on",
            errorTexts: "No user currently logged in to the system",
            statusCode: 401,
            string: "{arguments}.0",
            request: "{getUserTokenRequest1}"
        }
    }, {
        func: "{loginRequest}.send"
    }, {
        event: "{loginRequest}.events.onComplete",
        listener: "gpii.tests.flowManager.getUserToken.testLoginResponse"
    }, {
        func: "{getUserTokenRequest2}.send"
    }, {
        event: "{getUserTokenRequest2}.events.onComplete",
        listener: "kettle.test.assertJSONResponse",
        args: {
            message: "Expecting token returned in payload",
            string: "{arguments}.0",
            request: "{getUserTokenRequest2}",
            expected: [gpii.tests.flowManager.getUserToken.userToken]
        }
    }, {
        func: "{logoutRequest}.send"
    }, {
        event: "{logoutRequest}.events.onComplete",
        listener: "gpii.tests.flowManager.getUserToken.testLogoutResponse"
    }, {
        func: "{getUserTokenRequest3}.send"
    }, {
        event: "{getUserTokenRequest3}.events.onComplete",
        listener: "kettle.test.assertErrorResponse",
        args: {
            message: "Received 401 error when asking for token when not logged on",
            errorTexts: "No user currently logged in to the system",
            statusCode: 401,
            string: "{arguments}.0",
            request: "{getUserTokenRequest1}"
        }
    }]
}];

module.exports = kettle.test.bootstrapServer(gpii.tests.flowManager.getUserToken.testDefs);
