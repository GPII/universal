/**
 GPII Flow Manager Utilities.

 Copyright 2012 OCAD University

 Licensed under the New BSD license. You may not use this file except in
 compliance with this License.

 You may obtain a copy of the License at
 https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        request = fluid.registerNamespace("gpii.request.flowManager");

    request.logAndNotify = function (msg, event, callback) {
        return function (data) {
            fluid.log(msg, data);
            event.fire(callback ? callback(data) : data);
        };
    };

    request.getPreferences = function (preferencesDataSource, event, token) {
        preferencesDataSource.get({
            token: token
        }, request.logAndNotify("Fetched user preferences: ", event));
    };

    request.getDevice = function (deviceReporterDataSource, event) {
        deviceReporterDataSource.get(null, request.logAndNotify(
            "Fetched device reporter data: ", event));
    };

    request.getMatch = function (matchMakerDataSource, event, preferences, device) {
        matchMakerDataSource.set(null, {
            preferences: preferences,
            device: device
        }, request.logAndNotify(
            "Matched preferences and device reporter data: ", event));
    };

    fluid.defaults("gpii.request.flowManager.token", {
        gradeNames: ["fluid.eventedComponent", "autoInit"],
        invokers: {
            getPreferences: {
                funcName: "gpii.request.flowManager.getPreferences",
                args: ["{flowManager}.preferencesDataSource", "{that}.events.onPreferences", "{that}.userToken"]
            },
            getMatch: {
                funcName: "gpii.request.flowManager.getMatch",
                args: ["{flowManager}.matchMakerDataSource", "{that}.events.onMatch", "{arguments}.0", "{arguments}.1"]
            }
        },
        events: {
            onUserListener: null,
            onPreferences: null,
            onReadyToMatch: null,
            onMatch: null
        },
        listeners: {
            onUserListener: "{that}.getPreferences",
            onReadyToMatch: "{that}.getMatch"
        }
    });

})();
