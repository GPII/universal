/**
* GPII PCP Render Handler
*
* Copyright 2014 Astea
* Copyright 2015 Raising the Floor - International
*
* Licensed under the New BSD license. You may not use this file except in
* compliance with this License.
*
* You may obtain a copy of the License at
* https://github.com/gpii/universal/LICENSE.txt
*/
(function () {
    "use strict";

    var fluid = require("infusion");
    var gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.request.flowManager");
    fluid.registerNamespace("gpii.pcpInterface");

    gpii.pcpInterface.sockets = [];

    fluid.defaults("gpii.pcpInterface", {
        gradeNames: ["autoInit", "fluid.eventedComponent"],
        members: {
            socket: null
        },
        invokers: {
            sendUserMessage: {
                funcName: "gpii.pcpInterface.sendUserMessage",
                args: ["{that}.socket", "{arguments}.0", "{arguments}.1" ]
            },
            notifyUserLogonStateChange: {
                funcName: "gpii.pcpInterface.notifyUserLogonStateChange",
                args: ["{that}", "{that}.socket", "{arguments}.0", "{arguments}.1" ]
                                        // user token, adjusters
            },
            initSocket: {
                funcName: "gpii.pcpInterface.initSocket",
                args: ["{that}", "{arguments}.0" ] // socket connection
            }
        },
        events: {
            sendUserMessage: null
        },
        listeners: {
            sendUserMessage: "{that}.sendUserMessage",
            "{flowManager}.events.onLogonStateChangeComplete": "{that}.notifyUserLogonStateChange"
        }
    });

    gpii.pcpInterface.initSocket = function (that, socket) {
        that.socket = socket;
        gpii.pcpInterface.sockets.push(socket);
    };

    /**
     * Send a message to the PCP client. If no client is connected, the message is discarded.
     *
     * @param socket {Object} client socket connection
     * @param text {String or Object} The text that the client should display. This should either
     *    be a simple string of English text or an object with texts, each keyed by a language code.
     * @param messageType {String} A string denoting the option type ("infoMessage", "warningMessage"
     *    or "errorMessage"). If this parameter is not given, it defaults to "infoMessage"
    */
    gpii.pcpInterface.sendUserMessage = function (socket, text, messageType) {
        console.log("User message sent: " + text);
        fluid.each(gpii.pcpInterface.sockets, function (s) {
            if ((s === null) || (s.disconnected === true)) {
                fluid.log("No PCP connected on this socket, so discarding message: " + text);
            } else {
                // Default to 'infoMessage'
                var message = {
                    type: (messageType === undefined) ? "infoMessage" : messageType,
                    message: text
                };
                s.emit("message", message, fluid.log);
            }
        });
    };

    /**
     * Notify the PCP client that a user has logged in or out
     *
     * @param that {Object} the pcpInterface
     * @param socket {Object} client socket connection
     * @param action {String} "login" or "logout"
     * @param userToken {String} the token of the user who has just logged in or out
     */
    gpii.pcpInterface.notifyUserLogonStateChange = function (that, socket, action, userToken) {
        fluid.each(gpii.pcpInterface.sockets, function (s) {
            if ((s === null) || (s.disconnected === true)) {
                fluid.log("No PCP connected, so is not attempting to notify of a logon change on this socket");
            } else {
                if (action === "logout") {
                    s.emit("logout");
                    that.sendUserMessage("The token " + userToken + " was logged out.");
                    return;
                }
                // else A user just logged in
                var defaultAdjusters = {
                    "http://registry.gpii.net/common/highContrastEnabled": false
                };
                // send login message
                s.emit("login", {
                    settings: defaultAdjusters,
                    userToken: userToken
                });
                that.sendUserMessage("The token " + userToken + " was logged in.");
            }
        });
    };

    fluid.defaults("kettle.requests.request.handler.pcpChannel", {
        gradeNames: ["gpii.request.flowManager.sessionAware", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.pcpChannelHandle",
                args: ["{request}.socket", "{requestProxy}.events", "{flowManager}.pcpInterface" ],
                dynamic: true
            }
        }
    });

    gpii.request.flowManager.pcpChannelHandle = function (socket, events, pcpInterface) {
        pcpInterface.initSocket(socket);
        events.onSuccess.fire("Client has successfully established connection to the PCP Channel");
    };
})();
