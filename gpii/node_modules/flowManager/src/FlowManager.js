/*
 * GPII Flow Manager
 *
 * Copyright 2012 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

require("kettle");

require("./UserLogonStateChange.js");
require("./UserSave.js");
require("./GetUserToken.js");
require("./UserUpdate.js");
require("./BrowserChannel.js");
require("./CloudBasedFlowManager.js"); // TODO: move this include to be operated by a config
require("./UntrustedFlowManager.js");

require("lifecycleManager");
require("transformer");
require("journal");
require("singleInstance");

fluid.defaults("gpii.flowManager", {
    gradeNames: ["kettle.app"],
    matchMakers: {},
    components: {
        solutionsRegistryDataSource: {
            type: "kettle.dataSource",
            options: {
                termMap: {
                    "os": "%os",
                    "version": "%version"
                },
                components: {
                    encoding: {
                        type: "kettle.dataSource.encoding.JSON5"
                    }
                }
            }
        },
        preferencesDataSource: {
            type: "kettle.dataSource",
            options: {
                termMap: {
                    userToken: "%userToken"
                }
            }
        },
        lifecycleManager: {
            type: "gpii.lifecycleManager"
        },
        transformer: {
            type: "gpii.transformer"
        },
        matchMakerFramework: {
            type: "gpii.matchMakerFramework",
            options: {
                matchMakers: "{gpii.flowManager}.options.matchMakers"
            }
        },
        browserChannel: {
            type: "gpii.flowManager.browserChannel"
        },
        ontologyHandler: {
            type: "gpii.ontologyHandler"
        }
    }
});


// Mixin grades for the FlowManager

fluid.defaults("gpii.flowManager.local", {
    components: {
        deviceReporterDataSource: {
            type: "kettle.dataSource"
        },
        journal: {
            type: "gpii.journal",
            options: {
                gradeNames: ["gpii.journalLifecycleManager", "gpii.journalApp"]
            }
        }
    },
    requestHandlers: {
        userLogin: {
            route: "/user/:userToken/login",
            method: "get",
            type: "gpii.flowManager.userLogin.handler",
            gradeNames: "gpii.flowManager.userLogonHandling.matchMakingStateChangeHandler"
        },
        userLogout: {
            route: "/user/:userToken/logout",
            method: "get",
            type: "gpii.flowManager.userLogout.handler"
        },
        proximityTriggered: {
            route: "/user/:userToken/proximityTriggered",
            method: "get",
            type: "gpii.flowManager.proximityTrigger.handler",
            gradeNames: "gpii.flowManager.userLogonHandling.matchMakingStateChangeHandler"
        },
        getUserToken: {
            route: "/userToken",
            method: "get",
            type: "gpii.flowManager.getUserToken.handler"
        }
    },
    listeners: {
        "onCreate": "gpii.singleInstance.registerInstance",
        "afterDestroy": "gpii.singleInstance.deregisterInstance"
    }
});

fluid.defaults("gpii.flowManager.save", {
    requestHandlers: {
        userSavePost: {
            route: "/user/preferences",
            method: "post",
            type: "gpii.flowManager.userSave.handler"
        },
        userSavePut: {
            route: "/user/preferences/:userToken",
            method: "put",
            type: "gpii.flowManager.userSave.handler"
        }
    },
    distributeOptions: {
        record: {
            writable: true,
            writeMethod: "POST"
        },
        target: "{that > preferencesDataSource}.options"
    }
});


fluid.defaults("gpii.flowManager.ws", {
    requestHandlers: {
        userUpdate: {
            route: "/update",
            type: "gpii.flowManager.userUpdate.handler"
        },
        browserChannel: {
            route: "/browserChannel",
            type: "gpii.flowManager.browserChannel.handler"
        }
    },
    components: {
        webSocketsSettingsHandlerComponent: {
            type: "gpii.settingsHandlers.webSockets.component"
        }
    },
    listeners: {
        onCreate: {
            funcName: "gpii.flowManager.mountWebSocketsSettingsHandler",
            args: ["{webSocketsSettingsHandlerComponent}"]
        }
    }
});


gpii.flowManager.mountWebSocketsSettingsHandler = function (webSocketsSettingsHandlerComponent) {
    gpii.settingsHandlers.webSockets.instance = webSocketsSettingsHandlerComponent;
};

