(function () {

    "use strict";
   
    var express = require("express"),
        fluid = require("infusion"),
        fs = require("fs"),
        path = require("path"),
        querystring = require("querystring");
        
    
    var gpii = fluid.registerNamespace("gpii");

    var findArgv = function (key) {
        return fluid.find(process.argv, function (arg) {
            if (arg.indexOf(key + "=") === 0) {
                return arg.substr(key.length + 1);
            }
        });
    };

    fluid.require("gpiiFramework", require);
    fluid.require("matchMaker", require);
    fluid.require("deviceReporter", require);
    fluid.require("configurationManager", require);

    fluid.defaults("gpii.flowManager", {
        gradeNames: ["fluid.eventedComponent", "autoInit"],
        preInitFunction: "gpii.flowManager.preInit",
        finalInitFunction: "gpii.flowManager.finalInit",
        components: {
            preferencesDataSource: {
                type: "gpii.dataSource",
                options: {
                    url: "{gpii.flowManager}.config.preferences.url",
                    termMap: {
                        token: "%token"
                    }
                }
            },
            deviceReporterDataSource: {
                type: "gpii.dataSource",
                options: {
                    url: "{gpii.flowManager}.config.deviceReporter.url"
                }
            },
            matchMakerDataSource: {
                type: "gpii.dataSource",
                options: {
                    url: "{gpii.flowManager}.config.matchMaker.url",
                    writable: true
                }
            },
            transformerDataSource: {
                type: "gpii.dataSource",
                options: {
                    url: "{gpii.flowManager}.config.transformer.url",
                    termMap: {
                        query: "%query"
                    }
                }
            },
            launchManagerDataSource: {
                type: "gpii.dataSource",
                options: {
                    url: "{gpii.flowManager}.config.launchManager.url",
                    writable: true
                }
            }
        },
        events: {
            onUserListener: null,
            onPreferences: null,
            onDevice: null,
            onReadyToMatch: {
                events: {
                   preferences: "onPreferences",
                   device: "onDevice"
                },
                args: ["{arguments}.preferences.0", "{arguments}.device.0"]
            },
            onMatch: null,
            onTransformation: null
        },
        listeners: {
            onUserListener: [{
                listener: "{gpii.flowManager}.getPreferences"
            }, {
                listener: "{gpii.flowManager}.getDevice"
            }],
            onReadyToMatch: "{gpii.flowManager}.onReadyToMatchHandler",
            onMatch: "{gpii.flowManager}.onMatchHandler",
            onTransformation: "{gpii.flowManager}.onTransformationHandler"
        }
    });

    gpii.flowManager.preInit = function (that) {
        that.server = express.createServer();
        that.server.configure(function () {
            that.server.use(express.bodyParser());
        });
        that.server.configure("production", function () {
            // Set production options.
            fluid.staticEnvironment.production = fluid.typeTag("gpii.production");
            that.config = JSON.parse(fs.readFileSync(path.join(__dirname, "../config.production.json")));
            fluid.setLogging(false);
        });
        that.server.configure("development", function () {
            // Set development options.
            fluid.staticEnvironment.production = fluid.typeTag("gpii.development");
            that.config = JSON.parse(fs.readFileSync(path.join(__dirname, "../config.development.json")));
            fluid.setLogging(true);
        });

        that.getPreferences = function (token) {
            that.preferencesDataSource.get({
                token: token
            }, function (preferences) {
                if (preferences && preferences.isError) {
                    fluid.log(preferences.message);
                    return;
                }
                fluid.log("Fetched user preferences: ", preferences);
                that.events.onPreferences.fire(preferences);
            });
        };
        that.getDevice = function () {
            that.deviceReporterDataSource.get(undefined, function (device) {
                if (device && device.isError) {
                    fluid.log(device.message);
                    return;
                }
                fluid.log("Fetched device reporter data: ", device);
                that.events.onDevice.fire(device);
            });
        };
        that.onReadyToMatchHandler = function (preferences, device) {
            that.matchMakerDataSource.set(undefined, {
                preferences: preferences,
                device: device
            }, function (match) {
                if (match && match.isError) {
                    fluid.log(match.message);
                    return;
                }
                fluid.log("Matched preferences and device reporter data: ", match);
                that.events.onMatch.fire(match);
            });
        };
        that.onMatchHandler = function (match) {
            that.transformerDataSource.get({
                query: querystring.stringify({
                    data: JSON.stringify(match)
                })
            }, function (transformation) {
                if (transformation && transformation.isError) {
                    fluid.log(transformation.message);
                    return;
                }
                fluid.log("Performed transformation: ", transformation);
                that.events.onTransformation.fire(transformation);
            });
        };
        that.onTransformationHandler = function (transformation) {
            that.launchManagerDataSource.set(undefined, transformation, function (response) {
                if (response && response.isError) {
                    fluid.log(response.message);
                    return;
                }
                fluid.log("Launch manager returned: ", response);
            });
        };
    };

    gpii.flowManager.finalInit = function (that) {

        that.server.get("/user/:token/login", function (req, res) {
            var token = req.params["token"];
            that.events.onUserListener.fire(token);
            res.send("User with token " + token + " was successfully logged in.", 200);
        });

        that.server.get("/user/:token/logout", function (req, res) {
            var token = req.params["token"];
            that.launchManagerDataSource.delete(undefined, function (response) {
                if (response && response.isError) {
                    fluid.log(response.message);
                    return;
                }
                fluid.log("Launch manager returned: ", response);
            });
            res.send("User with token " + token + " was successfully logged out.", 200);
        });

        var port = findArgv("port") || 8081;
        fluid.log("Flow Manager is running on port: " + port);
        that.server.listen(typeof port === "string" ? parseInt(port, 10) : port);
    };

    fluid.demands("gpii.urlExpander", ["gpii.development", "gpii.flowManager"], {
        options: {
            vars: {
                db: path.join(__dirname, ".."),
                root: path.join(__dirname, "..")
            }
        }
    });

    fluid.demands("gpii.dataSource", ["gpii.production"], {
        funcName: "gpii.dataSource.URL"
    });
    
    fluid.demands("gpii.dataSource", ["gpii.development"], {
        funcName: "gpii.dataSource.file"
    });
    
    fluid.demands("matchMakerDataSource", ["gpii.flowManager", "gpii.development"], {
        funcName: "gpii.matchMaker"
    });

    fluid.demands("deviceReporterDataSource", ["gpii.flowManager", "gpii.development"], {
        funcName: "gpii.deviceReporter"
    });

    fluid.demands("launchManagerDataSource", ["gpii.flowManager", "gpii.development"], {
        funcName: "gpii.configurationManager"
    })

})();