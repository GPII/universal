/*!
GPII Flow Manager

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        path = require("path");

    fluid.require("kettle", require);

    fluid.require("./UserLogin.js", require);
    fluid.require("./Settings.js", require);
    fluid.require("./UserLogout.js", require);
    fluid.require("./UserSave.js", require);
    fluid.require("./GetUserToken.js", require);
    fluid.require("./UserUpdate.js", require);

    fluid.require("lifecycleManager", require);
    fluid.require("transformer", require);

    fluid.defaults("gpii.flowManager", {
        gradeNames: ["kettle.app", "autoInit"],
        urls: {
            preferences: "",
            deviceReporter: "",
            solutionsReporter: ""
        },
        matchMakers: {},
        root: path.join(__dirname, ".."),
        solutionsRegistryUrl: "",
        components: {
            solutionsRegistryDataSource: {
                type: "kettle.dataSource.URL",
                options: {
                    url: "{gpii.flowManager}.options.urls.solutionsRegistry",
                    termMap: {
                        "os": "%os",
                        "version": "%version",
                        "root": path.join(__dirname, "..")
                    }
                }
            },
            preferencesDataSource: {
                type: "kettle.dataSource.URL",
                options: {
                    url: "{gpii.flowManager}.options.urls.preferences",
                    termMap: {
                        userToken: "%userToken"
                    }
                }
            },
            deviceReporterDataSource: {
                type: "kettle.dataSource.URL",
                options: {
                    url: "{gpii.flowManager}.options.urls.deviceReporter"
                }
            },
            contextManager: {
                type: "gpii.contextManager"
            },
            lifecycleManager: {
                type: "gpii.lifecycleManager"
            },
            transformer: {
                type: "gpii.transformer"
            },
            matchMakerFramework: {
                type: "gpii.matchMakerFramework"
            }
        },
        handlers: {
            userLogin: {
                route: "/user/:userToken/login",
                type: "get"
            },
            userLogout: {
                route: "/user/:userToken/logout",
                type: "get"
            },
            getUserToken: {
                route: "/userToken",
                type: "get"
            },
            environmentChanged: {
                route: "/environmentChanged",
                type: "put"
            }
        }
    });

    fluid.defaults("gpii.flowManager.dev", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        distributeOptions: {
            source: "{that}.options.urlExpanderGradeNames",
            target: "{that urlExpander}.options.gradeNames"
        },
        urlExpanderGradeNames: ["kettle.urlExpander.development"]
    });

    fluid.defaults("gpii.flowManager.save", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        handlers: {
            userSavePost: {
                route: "/user/preferences",
                type: "post"
            },
            userSavePut: {
                route: "/user/preferences/:userToken",
                type: "put"
            }
        },
        distributeOptions: {
            record: {
                writable: true,
                writeMethod: "POST"
            },
            target: "{that > preferencesDataSource}.options"
        }
    });


    fluid.defaults("gpii.flowManager.io", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        handlers: {
            userUpdate: {
                route: "/update",
                type: "io"
            },
            userLogin: {
            },
            userLogout: {
            },
            userSavePost: {
            },
            userSavePut: {
            },
            getUserToken: {
            }
        }
    });

    fluid.defaults("gpii.flowManager.cloudBased", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        mergePolicy: {
            handleUnsupported: "noexpand"
        },
        components: {
            deviceReporterDataSource: {
                type: "fluid.emptySubcomponent"
            }
        },
        urls: {
            deviceReporter: ""
        },
        handlers: {
            settings: {
                route: "/:userToken/settings/:device",
                type: "get"
            },
            userLogin: null,
            userLogout: null
        }
    });

})();