/*
 * GPII Flow Manager
 *
 * Copyright 2012 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */
 
"use strict";

var fluid = require("infusion"),
    path = require("path"),
    gpii = fluid.registerNamespace("gpii");

require("kettle");

require("./UserLogin.js");
require("./UserLogout.js");
require("./UserSave.js");
require("./GetUserToken.js");
require("./UserUpdate.js");
require("./BrowserChannel.js");
require("./CloudBasedFlowManager.js"); // TODO: move this include to be operated by a config

require("lifecycleManager");
require("transformer");

fluid.defaults("gpii.flowManager", {
    gradeNames: ["kettle.app", "autoInit"],
    urls: {
        preferences: "",
        deviceReporter: "",
        solutionsReporter: ""
    },
    matchMakers: {},
    root: path.join(__dirname, ".."),
    solutionsRegistryUrl: "",
    components: {
        solutionsRegistryDataSource: {
            type: "kettle.dataSource.URL",
            options: {
                url: "{gpii.flowManager}.options.urls.solutionsRegistry",
                termMap: {
                    "os": "%os",
                    "version": "%version"
                }
            }
        },
        preferencesDataSource: {
            type: "kettle.dataSource.URL",
            options: {
                url: "{gpii.flowManager}.options.urls.preferences",
                termMap: {
                    userToken: "%userToken"
                }
            }
        },
        deviceReporterDataSource: {
            type: "kettle.dataSource.URL",
            options: {
                url: "{gpii.flowManager}.options.urls.deviceReporter"
            }
        },
        contextManager: {
            type: "gpii.contextManager"
        },
        lifecycleManager: {
            type: "gpii.lifecycleManager"
        },
        transformer: {
            type: "gpii.transformer"
        },
        matchMakerFramework: {
            type: "gpii.matchMakerFramework"
        },
        browserChannel: {
            type: "gpii.flowManager.browserChannel"
        }
    },
    handlers: {
        userLogin: {
            route: "/user/:userToken/login",
            type: "get"
        },
        userLogout: {
            route: "/user/:userToken/logout",
            type: "get"
        },
        getUserToken: {
            route: "/userToken",
            type: "get"
        },
        environmentChanged: {
            route: "/environmentChanged",
            type: "put"
        }
    }
});

fluid.defaults("gpii.flowManager.save", {
    gradeNames: ["autoInit", "fluid.littleComponent"],
    handlers: {
        userSavePost: {
            route: "/user/preferences",
            type: "post"
        },
        userSavePut: {
            route: "/user/preferences/:userToken",
            type: "put"
        }
    },
    distributeOptions: {
        record: {
            writable: true,
            writeMethod: "POST"
        },
        target: "{that > preferencesDataSource}.options"
    }
});


fluid.defaults("gpii.flowManager.io", {
    gradeNames: ["autoInit", "fluid.littleComponent"],
    handlers: {
        userUpdate: {
            route: "/update",
            type: "io"
        },
        userLogin: {
        },
        userLogout: {
        },
        userSavePost: {
        },
        userSavePut: {
        },
        getUserToken: {
        },
        browserChannel: {
            route: "/browserChannel",
            type: "io"
        }
    },
    components: {
        webSocketsComponent: {
            type: "gpii.settingsHandlers.webSocketsComponent"
        }
    },
    listeners: {
        onCreate: {
            funcName: "gpii.flowManager.mountWebSocketsSettingsHandler",
            args: ["{webSocketsComponent}"]
        }
    }
});


gpii.flowManager.mountWebSocketsSettingsHandler = function (webSocketsComponent) {
    gpii.settingsHandlers.webSockets = webSocketsComponent;
};

