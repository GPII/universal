/*!
GPII Flow Manager

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        path = require("path"),
        gpii = fluid.registerNamespace("gpii");

    fluid.require("kettle", require);
    fluid.require("./UserLogin.js", require);
    fluid.require("./Settings.js", require);
    fluid.require("./UserLogout.js", require);

    fluid.require("lifecycleManager", require);

    fluid.defaults("gpii.flowManager", {
        gradeNames: ["kettle.app", "autoInit"],
        urls: {
            preferences: "",
            deviceReporter: "",
            matchMaker: "",
            solutionsReporter: "",
            lifecycleManagerServer: ""
        },
        root: path.join(__dirname, ".."),
        components: {
            preferencesDataSource: {
                type: "kettle.dataSource.URL",
                options: {
                    gradeNames: ["kettle.dataSource.simpleCallbackWrapper"],
                    url: "{gpii.flowManager}.options.urls.preferences",
                    termMap: {
                        token: "%token"
                    }
                }
            },
            deviceReporterDataSource: {
                type: "kettle.dataSource.URL",
                options: {
                    gradeNames: ["kettle.dataSource.simpleCallbackWrapper"],
                    url: "{gpii.flowManager}.options.urls.deviceReporter"
                }
            },
            matchMakerDataSource: {
                type: "kettle.dataSource.URL",
                options: {
                    gradeNames: ["kettle.dataSource.simpleCallbackWrapper"],
                    url: "{gpii.flowManager}.options.urls.matchMaker",
                    writable: true
                }
            },
            lifecycleManagerServerDataSource: {
                type: "kettle.dataSource.URL",
                options: {
                    gradeNames: ["kettle.dataSource.simpleCallbackWrapper"],
                    url: "{gpii.flowManager}.options.urls.lifecycleManagerServer",
                    writable: true,
                    termMap: {
                        operation: "%operation",
                        token: "%token"
                    }
                }
            }
        },
        handlers: {
            userLogin: {
                route: "/user/:token/login",
                type: "get"
            },
            userLogout: {
                route: "/user/:token/logout",
                type: "get"
            }
        }
    });

    fluid.defaults("gpii.flowManager.dev", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        distributeOptions: {
            source: "{that}.options.urlExpanderGradeNames",
            target: "{that urlExpander}.options.gradeNames"
        },
        urlExpanderGradeNames: ["kettle.urlExpander.development"]
    });

    fluid.defaults("gpii.flowManager.cloudBased", {
        gradeNames: ["autoInit", "gpii.flowManager"],
        mergePolicy: {
            handleUnsupported: "noexpand"
        },
        components: {
            deviceReporterDataSource: {
                type: "fluid.emptySubcomponent"
            },
            lifecycleManagerServerDataSource: {
                type: "fluid.emptySubcomponent"
            }
        },
        typeName: "flowManager.cloudBased",
        urls: {
            deviceReporter: "",
        },
        handlers: {
            settings: {
                route: "/:token/settings/:device",
                type: "get"
            },
            userLogin: null,
            userLogout: null
        }
    });

})();