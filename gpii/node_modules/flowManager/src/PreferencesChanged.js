(function () {

    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii");

    gpii.requests.request.handler.preferencesChangedPreInit = function (that) {
        // merge newPreferences into oldPreferences with overwriting
        that.mergePreferences = function (oldPreferences, newPreferences) {
            fluid.each(newPreferences, function (value, name) {
                oldPreferences[name] = value;
            });
            return oldPreferences;
        };

        that.parseValue = function (value) {
            if (parseFloat(value)) {
                return parseFloat(value);
            } else if (value === "true" || value === "false") {
                return value === "true";
            }
            return value;
        };

        that.parsePreferences = function (preferences) {
            var parsed = {};
            fluid.each(preferences, function (value, name) {
                parsed[name] = [ { value: that.parseValue(value) } ];
            });
            return parsed;
        };
    };

    gpii.requests.request.handler.preferencesChanged = function (requestProxy, token, handler, newPreferences) {
        token = handler.lifecycleManager.options.cache.token; // Insted of caching the token, the one sent in the request should be used.

        var options = {
            preferences: handler.lifecycleManager.options.cache.preferences,
            device: handler.lifecycleManager.options.cache.device
        };

        /* merge newPreferences into options.preferences here */
        options.preferences = handler.mergePreferences(options.preferences, handler.parsePreferences(newPreferences));

        handler.matchMakerDataSource.set(null, options, function (match) {
            handler.lifecycleManager.start({userToken: token}, match, function (response) {
                fluid.log("Lifecycle manager returned: ", response);
                requestProxy.events.onSuccess.fire("User with token " + token + " was successfully updated.\n");
            });
        });
    };

})();
