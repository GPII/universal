/*!
GPII Full SHA Revision DataSource

Copyright 2020 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

require("kettle");

fluid.registerNamespace("gpii.flowManager.repositorySolutionsLoader");

fluid.defaults("gpii.flowManager.repositorySolutionsLoader", {
    gradeNames: ["kettle.dataSource.URL"],
    urlTemplate: "%prefix/%revision/%suffix/%fileName",
    url: {
        expander: {
            funcName: "fluid.stringTemplate",
            args: ["{that}.options.urlTemplate", {
                prefix: "{that}.options.urlPrefix",
                suffix: "{that}.options.urlSuffix"
            }]
        }
    },
    termMap: {
        revision: "%directRevision",
        fileName: "%directFileName"
    },
    // The URL prefix and suffix are distributed from a config file such as
    // e.g., gpii.flowManager.config.local.base, as is the path to the local
    // folder in which to save the contents of the downloaded solutions registry
    // file.
    urlPrefix: "",
    urlSuffix: "",
    solutionsRegistryFolderPath: "",
    members: {
        // Contents of the solutions registry file downloaded from the source
        // code repository
        solutionsRegistry: null
    },
    components: {
        encoding: {
            type: "kettle.dataSource.encoding.JSON5"
        }
    },
    invokers: {
        getSolutions: {
            funcName: "gpii.flowManager.repositorySolutionsLoader.getSolutions",
            args: ["{that}", "{arguments}.0", "{arguments}.1"]
                             // gpii revision, base file name
        }
    }
});

/**
 * Retrieve the solutions registry JSON file from the source code repository.
 * @param {Component} that - An instance of gpii.flowManager.repositorySolutionsLoader:
 * @param {Component} that.solutionsRegistry - The contents of the solutions
 *      registry fetched from the source code repository.
 * @param {String} gpiiRevision - the SHA256 revision of the repository to fetch.
 * @param {String} fileName - the name of the json file containing the
 *                            solutions registry
 * @return {Promise} A promise whose resolved value is eiher the solutions
 *      registry, or, if there is an error, an object with an "isError: true"
 *      property.
 */
gpii.flowManager.repositorySolutionsLoader.getSolutions = function (that, gpiiRevision, fileName) {
    var togo = fluid.promise();
    if (gpiiRevision && fileName) {
        var solutionsPromise = that.get({
            directRevision: gpiiRevision,
            directFileName: fileName
        });
        solutionsPromise.then(function (solutions) {
            that.solutionsRegistry = solutions;
            fluid.promise.follow(solutionsPromise, togo);
        }, function (err) {
            fluid.log(
                "Error retrieving solutions from repository: " + err + that.options.url
            );
            togo.resolve(err);
        });
    } else {
        var msg = "Error retrieving solutions from repository: missing ";
        if (!gpiiRevision && !fileName) {
            msg += "revision and file name";
        }
        else if (!gpiiRevision) {
            msg += "revision";
        }
        else {
            msg += "file name";
        }
        fluid.log(msg);
        togo.resolve({isError: true, message: msg, statusCode: 404});
    }
    return togo;
};
