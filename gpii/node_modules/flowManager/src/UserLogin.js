/*!
GPII User Login Component

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        uuid = require("node-uuid"),
        gpii = fluid.registerNamespace("gpii");

    fluid.demands("gpii.requests.request.handler", "userLogin", {
        options: {
            preInitFunction: "gpii.requests.request.handler.userLoginPreInit",
            invokers: {
                handle: {
                    funcName: "gpii.requests.request.handler.userLogin",
                    args: ["{request}.req.params.token", "{gpii.requests.request.handler}"]
                }
            },
            components: {
                requestProxy: "{requestProxy}",
                preferencesDataSource: "{flowManager}.preferencesDataSource",
                deviceReporterDataSource: "{flowManager}.deviceReporterDataSource",
                matchMakerDataSource: "{flowManager}.matchMakerDataSource",
                lifecycleManager: "{flowManager}.lifecycleManager"
            },
            events: {
                onRequestEnd: "{request}.events.onRequestEnd",
                onUserListener: null,
                onPreferences: null,
                onDevice: null,
                onReadyToMatch: {
                    events: {
                       preferences: "onPreferences",
                       device: "onDevice"
                    },
                    args: ["{arguments}.preferences.0", "{arguments}.device.0"]
                },
                onMatch: null
            },
            listeners: {
                onUserListener: [{
                    listener: "{gpii.requests.request.handler}.getPreferences"
                }, {
                    listener: "{gpii.requests.request.handler}.getDevice"
                }],
                onReadyToMatch: "{gpii.requests.request.handler}.onReadyToMatchHandler",
                onMatch: "{gpii.requests.request.handler}.onMatchHandler",
                onRequestEnd: {
                    listener: "gpii.requests.request.handler.clearUserLogin",
                    args: "{that}"
                }
            }
        }
    });
    // TODO: fix the framework so that it doesn't attempt to clear injected components
    // TODO: fix the framework so that components whose creation is triggered by an invoker call are properly contextualised
    
    gpii.requests.request.handler.clearUserLogin = function (that) {
        fluid.each(that.options.components, function (config, name) {
            delete that[name];
        });
    };

    gpii.requests.request.handler.userLoginPreInit = function (that) {
        that.getPreferences = function (token) {
            that.preferencesDataSource.get({
                token: token
            }, function (preferences) {
                fluid.log("Fetched user preferences: ", preferences);
                that.events.onPreferences.fire(preferences);
            });
        };
        that.getDevice = function () {
            that.deviceReporterDataSource.get(null, function (device) {
                fluid.log("Fetched device reporter data: ", device);
                that.events.onDevice.fire(device);
            });
        };
        that.onReadyToMatchHandler = function (preferences, device) {
            that.matchMakerDataSource.set(null, {
                preferences: preferences,
                device: device
            }, function (match) {
                fluid.log("Matched preferences and device reporter data: ", match);
                that.events.onMatch.fire(match);
            });
        };
        that.onMatchHandler = function (match) {
            that.lifecycleManager.start({userToken: that.userToken}, match, function (response) {
                fluid.log("Lifecycle manager returned: ", response);
                that.requestProxy.events.onSuccess.fire("User with token " + that.userToken + " was successfully logged in.");
            });
        };
    };

    gpii.requests.request.handler.userLogin = function (token, handler) {
        handler.userToken = token;
        handler.events.onUserListener.fire(token);
    };

})();