/*!
GPII User Login Component

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion");
    var gpii = fluid.registerNamespace("gpii");
    fluid.registerNamespace("gpii.request.flowManager");

    gpii.request.flowManager.onUserLogin = function (userToken, handler) {
        handler.userToken = userToken;
        handler.events.onUserToken.fire(userToken);
    };

    gpii.request.flowManager.startLifecycle = function (lifecycleManager, lifecyclePayload, sessionData, event) {
        lifecycleManager.start(sessionData, lifecyclePayload,
            gpii.request.flowManager.logAndNotify("Lifecycle manager returned: ", event, function () {
                return "User with token " + sessionData.userToken + " was successfully logged in.";
            }
        ));
    };

    fluid.defaults("kettle.requests.request.handler.userLogin", {
        gradeNames: ["fluid.littleComponent", "gpii.request.flowManager.userToken", "autoInit"],
        invokers: {
            startLifecycle: {
                funcName: "gpii.request.flowManager.startLifecycle",
                args: [ "{flowManager}.lifecycleManager", "{arguments}.0", "{arguments}.1", "{requestProxy}.events.onSuccess" ]
                                                    // arg0: lifecycle Instructions,    arg1: data to be saved in session
            },
            getDevice: {
                funcName: "gpii.request.flowManager.getDevice",
                args: ["{flowManager}.deviceReporterDataSource", "{that}.events.onDevice"]
            },
            handle: {
                funcName: "gpii.request.flowManager.onUserLogin",
                args: ["{request}.req.params.userToken", "{that}"],
                dynamic: true
            },
            runContextManager: {
                funcName: "gpii.request.flowManager.runContextManager",
                args: ["{flowManager}.contextManager", "{arguments}.0", "{arguments}.1", "{that}.events.onReadyForLifecycle" ]
            }
        },
        listeners: {
            onUserToken: "{that}.getDevice",
            onMatch: "{that}.runContextManager",
            onReadyForLifecycle: "{that}.startLifecycle"
        }
    });

    gpii.request.flowManager.runContextManager = function (contextManager, matchData, fullMMData, event) {
        console.log("gpii.request.flowManager.runContextManager");
        contextManager.evaluateMatch(matchData, fullMMData, event);
    };
})();
