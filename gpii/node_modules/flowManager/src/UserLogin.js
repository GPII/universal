/*!
GPII User Login Component

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        request = fluid.registerNamespace("gpii.request.flowManager");

    request.onUserLogin = function (token, handler) {
        handler.userToken = token;
        handler.events.onUserListener.fire(token);
    };

    request.onMatchHandler = function (lifecycleManagerServerDataSource, event, token, match) {
        lifecycleManagerServerDataSource.set({
            operation: "start",
            token: token
        }, match, request.logAndNotify("Lifecycle manager returned: ", event,
            function () {
                return "User with token " + token +
                    " was successfully logged in.";
            }
        ));
    };

    fluid.defaults("kettle.requests.request.handler.userLogin", {
        gradeNames: ["fluid.littleComponent", "gpii.request.flowManager.token", "autoInit"],
        invokers: {
            onMatchHandler: {
                funcName: "gpii.request.flowManager.onMatchHandler",
                args: ["{flowManager}.lifecycleManagerServerDataSource", "{requestProxy}.events.onSuccess", "{that}.userToken", "{arguments}.0"]
            },
            getDevice: {
                funcName: "gpii.request.flowManager.getDevice",
                args: ["{flowManager}.deviceReporterDataSource", "{that}.events.onDevice"]
            },
            handle: {
                funcName: "gpii.request.flowManager.onUserLogin",
                args: ["{request}.req.params.token", "{that}"],
                dynamic: true
            }
        },
        events: {
            onDevice: null,
            onReadyToMatch: {
                events: {
                   preferences: "onPreferences",
                   device: "onDevice"
                },
                args: ["{arguments}.preferences.0", "{arguments}.device.0"]
            }
        },
        listeners: {
            onUserListener: "{that}.getDevice",
            onMatch: "{that}.onMatchHandler"
        }
    });

})();
