/*
 * GPII User Login Component
 *
 * Copyright 2012 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

(function () {

    "use strict";

    var fluid = require("infusion");
    var gpii = fluid.registerNamespace("gpii");
    fluid.registerNamespace("gpii.request.flowManager");

    gpii.request.flowManager.onUserLogin = function (userToken, handler) {
        handler.events.onUserToken.fire(userToken);
    };

    gpii.request.flowManager.startLifecycle = function (lifecycleManager, lifecyclePayload, event) {
        console.log("Got final payload " + JSON.stringify(lifecyclePayload, null, 2));
        lifecycleManager.start(lifecyclePayload,
            gpii.request.flowManager.logAndNotify("Lifecycle manager returned: ", event, function () {
                return "User with token " + lifecyclePayload.userToken + " was successfully logged in.";
            }
        ));
    };
    
    gpii.request.flowManager.getDeviceContext = function (deviceReporterDataSource, event) {
        fluid.log("gpii.request.flowManager.getDeviceContext called - fetching device info");
        deviceReporterDataSource.get(null, gpii.request.flowManager.logAndNotify(
            "Fetched device reporter data: ", event));
    };

    fluid.defaults("kettle.requests.request.handler.userLogin", {
        gradeNames: ["fluid.littleComponent", "gpii.request.flowManager.matchMakingRequest", "autoInit"],
        invokers: {
            startLifecycle: {
                funcName: "gpii.request.flowManager.startLifecycle",
                args: [ "{flowManager}.lifecycleManager", "{arguments}.0", "{requestProxy}.events.onSuccess" ]
                                                    // final payload from matchmaking process
            },
            getDeviceContext: {
                funcName: "gpii.request.flowManager.getDeviceContext",
                args: ["{flowManager}.deviceReporterDataSource", "{that}.events.onDeviceContext"]
            },
            handle: {
                funcName: "gpii.request.flowManager.onUserLogin",
                args: ["{request}.req.params.userToken", "{that}"]
            }
        },
        listeners: {
            onUserToken: "{that}.getDeviceContext",
            onMatchDone: "{that}.startLifecycle"
        }
    });

})();
