/*!
GPII User Logout Component

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        request = fluid.registerNamespace("gpii.request.flowManager");

    fluid.defaults("kettle.requests.request.handler.userLogout", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.onUserLogout",
                args: ["{requestProxy}", "{request}.req.params.token", "{flowManager}.lifecycleManager"],
                dynamic: true
            }
        }
    });

    request.onUserLogout = function (requestProxy, token, lifecycleManager) {
        // TODO: clarify semantics of multiple active start/stop cycles.
        lifecycleManager.stop({
            userToken: token
        }, function onSuccess(response) {
            fluid.log("Lifecycle manager returned: ", response);
            requestProxy.events.onSuccess.fire("User with token " + token +
                " was successfully logged out.");
        });
    };

})();
