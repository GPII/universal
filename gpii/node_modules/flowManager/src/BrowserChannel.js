(function () {

    "use strict";

    var fluid = require("infusion");
    var gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.request.flowManager");

    fluid.defaults("gpii.flowManager.browserChannel", {
        gradeNames: ["fluid.standardRelayComponent", "autoInit"]
    });

    fluid.defaults("kettle.requests.request.handler.browserChannel", {
        gradeNames: ["gpii.request.flowManager.sessionAware", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.browserChannelHandle",
                args: ["{request}", "{requestProxy}.events",
                       "{flowManager}.solutionsRegistryDataSource",
                       "{deviceReporter}.platformReporter"],
                dynamic: true
            }
        }
    });

    gpii.request.flowManager.browserChannelHandle = function (fluidRequest, events, solutionsRegistryDataSource, platformReporter) {
        var solutionId = fluidRequest.data;
        solutionsRegistryDataSource.get({os: platformReporter.reportPlatform().id}, function onSuccess(platformEntries) {
            if (!(solutionId in platformEntries)) {
                // According to https://github.com/GPII/universal/pull/413, we
                // also need to allow solutions from the web solutions registry
                // to connect to the browserChannel. This is an immediate way
                // of solving this issue for the review4 branch, so this issue
                // must be considered before keep working on the pull request
                // for master (as KASPARNET has already commented
                // https://github.com/GPII/universal/pull/399#issuecomment-149575589)
                //
                solutionsRegistryDataSource.get({os: "web"}, function onSuccess (webEntries) {
                    var solutionId = fluidRequest.data;

                    if (!(solutionId in webEntries)) {
                        var errMsg = "Rejecting a connection request from '" + solutionId +
                                  "'. The solution id was not found in the solutions registry";

                        gpii.request.flowManager.logAndNotify("Lifecycle manager returned: ", events.onError)(errMsg);
                    } else {
                        gpii.settingsHandlers.webSockets.addClient(solutionId, fluidRequest.socket);

                        var okMsg = "A request to browserChannel has been successfully processed";
                        gpii.request.flowManager.logAndNotify("Lifecycle manager returned: ", events.onSuccess)(okMsg);
                    }
                });
            } else {
                gpii.settingsHandlers.webSockets.addClient(solutionId, fluidRequest.socket);

                var okMsg = "A request to browserChannel has been successfully processed";
                gpii.request.flowManager.logAndNotify("Lifecycle manager returned: ", events.onSuccess)(okMsg);
            }
        });
    };

})();
