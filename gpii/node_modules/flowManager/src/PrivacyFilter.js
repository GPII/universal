/**
 * GPII Flow Manager Privacy Filter
 *
 * Copyright 2013 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = fluid || require("infusion");
var gpii = fluid.registerNamespace("gpii");

fluid.defaults("gpii.flowManager.privacy.privacyFilter", {
    gradeNames: "fluid.component",
    members: {
        settingsToPrivacyTransformRules: null, // Supplied by client
        privacyToSettingsTransformRules: null  // Supplied by client
    },
    invokers: {
        filter: {
            funcName: "gpii.flowManager.privacy.filter",
            args: [
                "{arguments}.0", // payload
                "{arguments}.1", // privacySettings
                "{that}.settingsToPrivacyTransformRules",
                "{that}.privacyToSettingsTransformRules"
            ]
        }
    }
});

gpii.flowManager.privacy.applyFilterRules = function (settings, rules) {
    var holder = {
        model: {}
    };
    var applier = fluid.makeHolderChangeApplier(holder);
    fluid.each(rules, function (value, path) {
        if (value) {
            var fetched = fluid.get(settings, path);
            applier.change(path, fetched); // TODO: Apparently fluid.set is not good enough to deal with change at root
        }
    });
    return holder.model;
};

gpii.flowManager.privacy.filterOneApplication = function (application, selectedPreferences, settingsToPrivacyTransformRules, privacyToSettingsTransformRules) {
    var settings = application.settings;
    var settingsInPrivacy = fluid.model.transformWithRules(settings, settingsToPrivacyTransformRules);
    fluid.log("GOT SETTINGS IN PRIVACY ONTOLOGY " + JSON.stringify(settingsInPrivacy, null, 2));
    var filteredSettings = gpii.flowManager.privacy.applyFilterRules(settingsInPrivacy, selectedPreferences);
    fluid.log("GOT FILTERED SETTINGS " + JSON.stringify(filteredSettings, null, 2));
    var backSettings = fluid.model.transformWithRules(filteredSettings, privacyToSettingsTransformRules);
    var filteredApplication = fluid.copy(fluid.censorKeys(application, ["settings"]));
    filteredApplication.settings = backSettings;
    fluid.log("RETURNING FILTERED APPLICATION " + JSON.stringify(filteredApplication, null, 2));
    return filteredApplication;
};

// TODO question: can matchMakerOutput have any children other than inferredConfiguration?

gpii.flowManager.privacy.filter = function (payload, privacySettings, settingsToPrivacyTransformRules, privacyToSettingsTransformRules) {
    fluid.log("|||||| PRIVACY FILTER executing with payload " + JSON.stringify(payload, null, 2) + "\n and privacySettings " + JSON.stringify(privacySettings, null, 2));

    // TODO: create helpful "copy-on-write" suite of utilities to help with all of this standard manipulation involving "megapayloadism"

    var filteredMatchMakerOutput = { inferredConfiguration: {} };

    var configurations = payload.matchMakerOutput.inferredConfiguration;
    fluid.each(configurations, function (config, configName) {
        fluid.log("|||||| PRIVACY FILTER configName: " + configName);
        var filteredApplications = fluid.copy(config.applications);
        fluid.remove_if(filteredApplications, function (application, solutionId) {
            // Filter out applications for which the user has no privacy settings
            return !privacySettings.hasOwnProperty(solutionId);
        });
        filteredApplications = fluid.transform(filteredApplications, function (application, solutionId) {
            var selectedPreferences = privacySettings[solutionId];
            return gpii.flowManager.privacy.filterOneApplication(application, selectedPreferences, settingsToPrivacyTransformRules, privacyToSettingsTransformRules);
        });
        var filteredConfig = { applications: filteredApplications };
        if (config.hasOwnProperty("conditions")) {
            // TODO copy here or re-using reference is fine?
            filteredConfig.conditions = config.conditions;
        }
        filteredMatchMakerOutput.inferredConfiguration[configName] = filteredConfig;
    });

    var filteredPayload = fluid.extend({}, payload);
    filteredPayload.matchMakerOutput = filteredMatchMakerOutput;
    return filteredPayload;
};
