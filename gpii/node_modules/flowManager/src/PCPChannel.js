"use strict";

// REMOVE ME //
var util = require("util");

var fluid = require("infusion");
var gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.flowManager");

fluid.defaults("gpii.flowManager.pcpChannel", {
    // I don't think it's a good idea to be a stateChangeHandler component
    gradeNames: ["fluid.modelComponent", "gpii.flowManager.userLogonHandling.stateChangeHandler"],
    model: null,
    listeners: {
        "{lifecycleManager}.events.onSessionSnapshotUpdate": {
           funcName: "gpii.flowManager.pcpChannel.sessionUpdate",
           args: ["{that}", "{arguments}.0", "{arguments}.1", "{arguments}.2", "{flowManager}.lifecycleManager.session"]
        },
        "{lifecycleManager}.events.onSessionStop": {
            funcName: "gpii.flowManager.pcpChannel.sessionStop",
            args: ["{that}", "{arguments}.0", "{arguments}.1", "{arguments}.2", "{flowManager}.lifecycleManager.session"]
        }
    },
    modelListeners: {
        "appliedSolutions": {
            "funcName": "gpii.flowManager.pcpChannel.updateSettings",
            "args": ["{change}"],
            "excludeSource": "lifecycleManager"
        },
        "userToken": {
            "funcName": "gpii.flowManager.pcpChannel.userTokenChanged",
            "args": ["{that}", "{change}", "{flowManager}.lifecycleManager"],
            "excludeSource": "lifecycleManager"
        },
        "activeContextName": {
            "funcName": "gpii.flowManager.pcpChannel.contextChanged",
            "args": ["{change}"],
            "excludeSource": "lifecycleManager"
        }
    }
});

gpii.flowManager.pcpChannel.updateSettings = function (c) {
    console.log("## on updateSettings " + util.inspect(c));
};

gpii.flowManager.pcpChannel.userTokenChanged = function (that, c, lifecycleManager) {
    //console.log("## on userTokenChanged " + util.inspect(c));
    // At this moment, there shouldn't come 'login' requests from the PCP
    if (c.oldValue)
        that.logoutUserWithoutResponse(c.oldValue);
};

gpii.flowManager.pcpChannel.contextChanged = function (c) {
    console.log("## on contextChanged " + util.inspect(c));
    // Looks like there's no update in the session's model after the active context changes.
    // When receiving context updates from the PCP, we should do something similar to what
    // 'gpii.contextManager.evaluateConditions' does.
};

gpii.flowManager.pcpChannel.modelChangeListener = function (handler, value, path, transaction) {
    console.log("## on modelChangeListener");
    if (transaction.sources.lifecycleManager) {
        console.log("## source is lifecycleManager");
        handler.sendMessage({path: fluid.pathUtil.composeSegments(path), value: value});
    }
};

gpii.flowManager.pcpChannel.sessionUpdate = function (that, lifecycleManager, arg1, arg2) {
    console.log("## on sessionUpdate: " + JSON.stringify(arg1.model, null, 4));
    var exclude = fluid.censorKeys(arg1.model, ["actionResults", "originalSettings", "solutionsRegistryEntries"]);
    gpii.flowManager.pcpInterface.applier.change("", exclude, "ADD", "lifecycleManager");
};

gpii.flowManager.pcpChannel.sessionStop = function (that, lifecycleManager, arg1, arg2) {
    console.log("## onSessionStop");
    gpii.flowManager.pcpInterface.applier.change("", arg2, "DELETE", "lifecycleManager");
};

fluid.defaults("gpii.flowManager.pcpChannel.handler", {
    gradeNames: ["kettle.request.ws"],
    invokers: {
        modelChangeListener: {
            funcName: "gpii.flowManager.pcpChannel.modelChangeListener",
            args: ["{that}", "{arguments}.0", "{arguments}.2", "{arguments}.4"]
        }
    },
    listeners: {
        onBindWs: {
            funcName: "gpii.flowManager.pcpChannel.bindWs",
            args: ["{that}"]
        },
        onReceiveMessage: {
            funcName: "gpii.flowManager.pcpChannel.receiveMessage",
            args: ["{that}", "{arguments}.1"]
        }
    }
});

gpii.flowManager.pcpChannel.bindWs = function (handler, pcpChannel) {
    console.log("## on bindWs");
    gpii.flowManager.pcpInterface.applier.modelChanged.addListener("", handler.modelChangeListener);
    handler.sendMessage({path: "", value: gpii.flowManager.pcpInterface.model});
};

gpii.flowManager.pcpChannel.receiveMessage = function (that, message, pcpChannel) {
    fluid.log("## pcpChannel received a message: " + util.inspect(message));
    //console.log("## gpii.flowManager.pcpInterface = " + util.inspect(gpii.flowManager.pcpInterface.model));
    gpii.flowManager.pcpInterface.applier.change(message.path, message.value, "ADD", "pcp");
    //console.log("#### gpii.flowManager.pcpInterface = " + util.inspect(gpii.flowManager.pcpInterface.model))
};
