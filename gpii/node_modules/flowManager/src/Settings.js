/**
 GPII Settings Component

 Copyright 2013 OCAD University

 Licensed under the New BSD license. You may not use this file except in
 compliance with this License.

 You may obtain a copy of the License at
 https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion");
    var gpii = fluid.registerNamespace("gpii");
    fluid.registerNamespace("gpii.request.flowManager");

    gpii.request.flowManager.onSettings = function (userToken, handler, device) {
        try {
            device = JSON.parse(device);
        } catch (ex) {
            handler.requestProxy.events.onError.fire({
                isError: true,
                message: "Cloud based flow manager requires device information."
            });
            return;
        } finally {
            handler.userToken = userToken;
            handler.events.onUserToken.fire(userToken);
            handler.events.onDevice.fire(device);
        }
    };

    gpii.request.flowManager.processMatch = function (event, match) {
        var settings = {};
        fluid.each(match, function processSolution(solution, solutionId) {
            if (!solution.settingsHandlers) {
                return;
            }
            fluid.each(solution.settingsHandlers, function (settingsHandler) {
                    if (!settingsHandler.settings) {
                        return;
                    }
                    settings[solutionId] = settingsHandler.settings;
                }
            );
        });
        event.fire(settings);
    };

    // TODO: This component is in an absurd namespace
    fluid.defaults("kettle.requests.request.handler.settings", {
        gradeNames: ["fluid.littleComponent", "gpii.request.flowManager.userToken", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.onSettings",
                args: ["{request}.req.params.userToken", "{that}", "{request}.req.params.device"],
                dynamic: true
            },
            processMatch: {
                funcName: "gpii.request.flowManager.processMatch",
                args: [ "{requestProxy}.events.onSuccess", "{arguments}.0", "{arguments}.1" ]
            },
            runContextManager: {
                funcName: "gpii.request.flowManager.runContextManager",
                args: ["{flowManager}.contextManager", "{arguments}.0", "{arguments}.1", "{that}.events.onReadyForLifecycle" ]
            }
        },
        listeners: {
            onMatch: "{that}.runContextManager",
            onReadyForLifecycle: "{that}.processMatch"
        }
    });

})();
