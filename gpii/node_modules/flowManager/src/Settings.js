/**
 GPII Settings Component

 Copyright 2013 OCAD University

 Licensed under the New BSD license. You may not use this file except in
 compliance with this License.

 You may obtain a copy of the License at
 https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        $ = fluid.registerNamespace("jQuery"),
        request = fluid.registerNamespace("gpii.request.flowManager");

    request.onSettings = function (token, handler, device) {
        try {
            device = JSON.parse(device);
        } catch (ex) {
            handler.requestProxy.events.onError.fire({
                isError: true,
                message: "Cloud based flow manager requires device information."
            });
            return;
        } finally {
            handler.device = device;
            handler.userToken = token;
            handler.events.onUserListener.fire(token);
        }
    };

    request.processMatch = function (match) {
        var settings = {};
        fluid.each(match, function processSolution(solution) {
            if (!solution.settingsHandlers) {
                return;
            }
            fluid.each(solution.settingsHandlers,
                function findSettings(settingsHandler) {
                    if (!settingsHandler.settings) {
                        return;
                    }
                    settings[solution.id] = settingsHandler.settings;
                }
            );
        });
        return settings;
    };

    request.getSettings = function (event, match) {
        request.logAndNotify(
            "Flow manager matched the following settings/solutions: ", event,
            request.processMatch)(match);
    };

    fluid.defaults("gpii.request.flowManager.settings", {
        gradeNames: ["fluid.littleComponent", "gpii.request.flowManager.token", "autoInit"],
        invokers: {
            onMatchHandler: {
                funcName: "gpii.request.flowManager.getSettings",
                args: ["{requestProxy}.events.onSuccess", "{arguments}.0"]
            }
        },
        listeners: {
            onPreferences: {
                listener: "{that}.events.onReadyToMatch.fire",
                args: [
                    "{arguments}.0",
                    "{that}.device"
                ]
            },
            onMatch: "{that}.onMatchHandler"
        }
    });

})();
