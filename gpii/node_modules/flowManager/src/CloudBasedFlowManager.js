/**
 * GPII Cloud-Based FlowManager
 *
 * Copyright 2013 OCAD University
 * Copyright 2017 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    kettle = require("kettle"),
    gpii = fluid.registerNamespace("gpii");

require("gpii-oauth2");

/** BASE, UNSECURED CLOUD-BASED FLOW MANAGER -
 * This will be maintained for a while in parallel with the OAuth2-secured API and eventually deprecated
 * This exposes an unsecured HTTP GET API of the form /:gpiiKey/settings/:device
 */

fluid.defaults("gpii.flowManager.cloudBased", {
    requestHandlers: {
        settings: {
            route: "/:gpiiKey/settings/:device",
            method: "get",
            type: "gpii.flowManager.cloudBased.settings.handler"
        },
        userLogin: null,
        userLogout: null,
        getGpiiKey: null
    }
});

gpii.flowManager.cloudBased.matchToSettings = function (flowManager, finalPayload, event) {
    var inferredConfiguration = fluid.get(finalPayload, [ "matchMakerOutput", "inferredConfiguration", "gpii-default"]) || {};
    var lifecycleInstructions = gpii.transformer.configurationToSettings(inferredConfiguration, finalPayload.solutionsRegistryEntries);
    var settings = {};
    fluid.each(lifecycleInstructions, function processSolution(solution, solutionId) {
        fluid.each(solution.settingsHandlers, function (settingsHandler) {
            if (settingsHandler.settings) {
                settings[solutionId] = settingsHandler.settings;
            }
        });
    });
    event.fire(settings);
};

fluid.defaults("gpii.flowManager.cloudBased.settings.handler", {
    gradeNames: ["kettle.request.http", "gpii.flowManager.matchMakingRequest"],
    invokers: {
        handleRequest: {
            funcName: "gpii.flowManager.cloudBased.settings.handleRequest",
            args: ["{request}.events.onError", "{request}.req.params.gpiiKey", "{that}", "{request}.req.params.device"]
        },
        matchToSettings: {
            funcName: "gpii.flowManager.cloudBased.matchToSettings",
            args: ["{flowManager}", "{arguments}.0", "{request}.events.onSuccess"]
        }
    },
    listeners: {
        onMatchDone: "{that}.matchToSettings"
    }
});

// unsecured endpoint - will be removed in time
// TODO: However, this now receives direct dispatch from untrusted workflow gpii.request.flowManager.onUntrustedSettings below
gpii.flowManager.cloudBased.settings.handleRequest = function (onError, gpiiKey, handler, deviceString) {
    var deviceContext;
    try {
        deviceContext = kettle.JSON.parse(deviceString);
    } catch (ex) {
        onError.fire({
            isError: true,
            message: "Cloud based flow manager requires device information - failed to parse " + ex.message
        });
        return;
    }
    handler.events.onGpiiKey.fire(gpiiKey);
    handler.events.onDeviceContext.fire(deviceContext);
};

/** BEGIN OAUTH2-SECURED CLOUD-BASED FLOW MANAGER */

fluid.defaults("gpii.flowManager.cloudBased.oauth2", {
    gradeNames: ["fluid.component"],
    components: {
        oauth2DataStore: {
            type: "gpii.dbOperation.dbDataStore"
        },
        authServer: {
            // note that this subcomponent directly attaches express routes to our underlying express app via its direct API -
            // e.g. at the paths /access_token
            type: "gpii.oauth2.authServer",
            options: {
                components: {
                    dataStore: "{gpii.dbOperation.dataStore}"
                },
                members: {
                    expressApp: "{kettle.server}.expressApp"
                },
                events: {
                    onContributeMiddleware: "{kettle.server}.events.onContributeMiddleware",
                    onContributeRouteHandlers: "{kettle.server}.events.onContributeRouteHandlers"
                }
            }
        },
        authGrantFinder: {
            type: "gpii.oauth2.authGrantFinder"
        }
    },
    distributeOptions: {
        setDataStoreOnAuthGrantFinder: {
            record: "{gpii.dbOperation.dataStore}",
            target: "{that gpii.oauth2.authorizationService}.options.components.dataStore"
        }
    },
    requestHandlers: {
        // The endpoint to request user settings
        untrustedSettingsGet: {
            route: "/:gpiiKey/untrusted-settings/:device",
            method: "get",
            type: "gpii.flowManager.cloudBased.untrustedSettings.get.handler"
        },
        // The endpoint to update user settings
        untrustedSettingsPut: {
            route: "/:gpiiKey/untrusted-settings",
            method: "put",
            type: "gpii.flowManager.cloudBased.untrustedSettings.put.handler"
        },
        userLogin: null,
        userLogout: null,
        getGpiiKey: null
    }
});

/**
 * This should be used as the last step of the matchmaking process in a cloudbased/Untrusted flowmanager setup.
 * It modifies the final payload by filtering out the irrelevant data before passing it on to the
 * given event.
 *
 * Note that we modify (filter) the users preference set before passing it on in the payload. This is done because
 * this function is meant for a configuration of the GPII where the local flowmanager is untrusted - therefore we do not
 * want to pass the full preference set back to it. On the other hand, the PSP need access to the users preferences to show and
 * modify them. Therefore the preference set is filtered to only contain the preferences and settings that are
 * relevant to the configuration of the device (i.e. in the inferredConfiguration), any preferences not present there
 * are removed. This means a compromised local flowmanager would not gain any further information from looking at
 * the preference set than it could have got by looking at the inferred configuration.
 */
gpii.flowManager.cloudBased.matchToUntrustedSettings = function (finalPayload, event) {
    // Note that we send the filtered preferences to assist a PSP - we may do more filtering here at some point
    var settings = fluid.filterKeys(finalPayload, [
        "gpiiKey", "activeContextName", "preferences",
        "activeConfiguration", "solutionsRegistryEntries", "matchMakerOutput"
    ]);
    settings.preferences = gpii.matchMakerFramework.utils.filterPreferencesFromInferredConfig(settings.preferences, settings.matchMakerOutput.inferredConfiguration);
    fluid.log("cloudBased flowManager sending settings ", settings);
    event.fire(settings);
};
