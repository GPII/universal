/**
 * GPII Cloud-Based FlowManager
 *
 * Copyright 2013 OCAD University
 * Copyright 2017 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion");

require("gpii-oauth2");

/**
 * OAUTH2 SECURED CLOUD-BASED FLOW MANAGER
 */

fluid.defaults("gpii.flowManager.cloudBased", {
    gradeNames: ["fluid.component"],
    components: {
        preferencesDataSource: {
            type: "kettle.dataSource",
            options: {
                termMap: {
                    gpiiKey: "%gpiiKey"
                },
                writable: true
            }
        },
        oauth2DataStore: {
            type: "gpii.dbOperation.dbDataStore"
        },
        authServer: {
            // note that this subcomponent directly attaches express routes to our underlying express app via its direct API -
            // e.g. at the paths /access_token
            type: "gpii.oauth2.authServer",
            options: {
                components: {
                    dataStore: "{gpii.dbOperation.dataStore}"
                },
                members: {
                    expressApp: "{kettle.server}.expressApp"
                },
                events: {
                    onContributeMiddleware: "{kettle.server}.events.onContributeMiddleware",
                    onContributeRouteHandlers: "{kettle.server}.events.onContributeRouteHandlers"
                }
            }
        },
        authGrantFinder: {
            type: "gpii.oauth2.authGrantFinder"
        }
    },
    distributeOptions: {
        setDataStoreOnAuthGrantFinder: {
            record: "{gpii.dbOperation.dataStore}",
            target: "{that gpii.oauth2.authorizationService}.options.components.dataStore"
        }
    },
    requestHandlers: {
        // The endpoint to request user settings
        settingsGet: {
            route: "/:gpiiKey/settings/:device",
            method: "get",
            type: "gpii.flowManager.cloudBased.settings.get.handler"
        },
        // The endpoint to update user settings
        settingsPut: {
            route: "/:gpiiKey/settings",
            method: "put",
            type: "gpii.flowManager.cloudBased.settings.put.handler"
        }
    }
});
