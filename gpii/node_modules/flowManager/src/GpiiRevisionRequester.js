/*!
GPII Full SHA Revision DataSource

Copyright 2020 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

require("kettle");

fluid.registerNamespace("gpii.flowmanager.revisionRequester");

fluid.defaults("gpii.flowmanager.revisionRequester", {
    gradeNames: ["fluid.component"],

    // Prepend CBFM host/port distributed down from, e.g., gpii.flowManager.config.untrusted
    cloudUrl: null,
    urlTemplate: "%cloudUrl/revision",

    // Compute url from CBFM base URL and template
    revisionGetUrl: {
        expander: {
            funcName: "fluid.stringTemplate",
            args: ["{that}.options.urlTemplate", {
                cloudUrl: "{that}.options.cloudUrl"
            }]
        }
    },
    components: {
        gpiiRevisionDataSource: {
            type: "kettle.dataSource.URL",
            options: {
                url: "{revisionRequester}.options.revisionGetUrl"
            }
        }
    },
    invokers: {
        getRevision: {
            funcName: "gpii.flowmanager.revisionRequester.getRevision",
            args: ["{that}"]
        }
    }
});

/**
 * Retrieve the respository revision's full SHA256 from the cloud.
 * @param {Component} that - An instance of gpii.flowManager.revisionRequester.
 * @return {Promise} A promise whose resolved value is eiher the revision or, if
 * there is an error, an object with an "isError: true" property.  The revision
 * has the form { "sha256": "86a83d2f93a6f8f954a4fef618ca6aea1399c980" }.
 */
gpii.flowmanager.revisionRequester.getRevision = function (that) {
    var togo = fluid.promise();

    var revisionPromise = that.gpiiRevisionDataSource.get();
    revisionPromise.then(function (/*revision*/) {
        fluid.promise.follow(revisionPromise, togo);
    }, function (err) {
        togo.resolve(err);
    });
    return togo;
};
