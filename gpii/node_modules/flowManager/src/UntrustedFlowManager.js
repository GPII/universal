/**
 * GPII Untrusted Local FlowManager
 *
 * Copyright 2015 OCAD University
 * Copyright 2017 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

require("accessRequester");
fluid.require("%gpii-universal/gpii/node_modules/gpii-oauth2/gpii-oauth2-utilities/src/OAuth2Utilities.js");

// The Untrusted or Hybrid (Local) FlowManager is a Local FlowManager which defers to the cloud for the matchMaking
// and Preferences fetch process. The architectural goal of the untrusted FlowManager is that the unfiltered
// user preferences never reach the local device. Therefore the userLogon stages of the "gpii.flowManager.matchMakingRequest"
// are all abridged, and instead we simply receive a final settings payload from a cloudBased flowManager which are
// then directly applied to the local device.

// Described at https://issues.gpii.net/browse/GPII-1224

// Overrides request handlers in "gpii.flowManager.local"

fluid.defaults("gpii.flowManager.untrusted", {
    components: {
        settingsDataSource: {
            type: "gpii.flowManager.settingsDataSource"
            // cloudURL: distributed down from, e.g., gpii.flowManager.untrusted.config.development
        }
    },
    requestHandlers: {
        userLogin: {
            // NOTE that these gradesNames do not merge as with standard components
            gradeNames: "gpii.flowManager.untrusted.stateChangeHandler"
        },
        proximityTriggered: {
            gradeNames: "gpii.flowManager.untrusted.stateChangeHandler"
        }
    },
    invokers: {
        setSettings: {
            func: "{that}.settingsDataSource.set",
            args: ["{arguments}.0", "{arguments}.1"]
        }
    },
    listeners: {
        "preferencesSavedSuccess.log": {
            listener: "fluid.log",
            args: ["FlowManager: preferences saved to the cloud for the GPII key: ", "{arguments}.0.gpiiKey", ": ", "{arguments}.0.message"]
        },
        "preferencesSavedError.reportSaveError": {
            listener: "gpii.flowManager.untrusted.reportSaveError",
            args: ["{that}.userErrors.events.userError", "{arguments}.0"]
        }
    }
});

gpii.flowManager.untrusted.reportSaveError = function (userErrorEvent, error) {
    userErrorEvent.fire({
        isError: true,
        messageKey: "SaveToCloudFail",
        originalError: error
    });
};

gpii.flowManager.untrusted.getSettings = function (settingsDataSource, gpiiKey, deviceReporterData, onMatchDone, onError) {
    var settings = settingsDataSource.get(gpiiKey, deviceReporterData);
    settings.then(onMatchDone.fire, onError.fire);
};

// Support local state change in untrusted settings. This grade communicate with GPII Cloud to read settings and write preferences.
fluid.defaults("gpii.flowManager.untrusted.stateChangeHandler", {
    gradeNames: ["fluid.component", "gpii.flowManager.userLogonHandling.stateChangeHandler"],
    invokers: {
        getSettings: {
            funcName: "gpii.flowManager.untrusted.getSettings",
            args: [
                "{flowManager}.settingsDataSource",
                "{that}.gpiiKey",
                "{arguments}.0", // device reporter data
                "{that}.events.onMatchDone",
                "{that}.events.onError"
            ]
        }
    },
    events: {
        onGpiiKey: null,
        onDeviceContext: null
    },
    listeners: {
        "onGpiiKey.setGpiiKey": {
            listener: "gpii.flowManager.setGpiiKey",
            args: ["{that}", "{arguments}.0"]
        },
        "onGpiiKey.getDeviceContext": {
            func: "{that}.getDeviceContext",
            priority: "after:setGpiiKey"
        },
        "onDeviceContext.getSettings": "{that}.getSettings"
    }
});
