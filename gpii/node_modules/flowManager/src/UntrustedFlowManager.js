/**
 * GPII Untrusted Local FlowManager
 *
 * Copyright 2015 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion");
var gpii = fluid.registerNamespace("gpii");

// TODO: For now, follow the approach of the cloudBased Flow Manager
// of extending flowManager and disabling/overriding pieces. In the
// future, refactor flowManager so that the base is smaller and use
// composition rather than overriding.

fluid.defaults("gpii.flowManager.untrusted", {
    components: {
        settingsDataSource: {
            type: "kettle.dataSource.URL",
            options: {
                // url: "{gpii.flowManager}.options.urls.settings",
                termMap: {
                    "userToken": "%userToken",
                    "device": "%device"
                }
            }
        }
    },
    requestHandlers: {
        userLogin: null,
        userLogonStateChanged: null,
        untrustedUserLogin: {
            route: "/user/:userToken/login",
            method: "get",
            type: "gpii.flowManager.untrusted.userLogin.handler"
        },
        untrustedUserLogonStateChange: {
            route: "/user/:userToken/logonChange",
            method: "get",
            type: "gpii.flowManager.untrusted.userLogonStateChange.handler"
        }
    }
});


gpii.flowManager.untrusted.getSettings = function (settingsDataSource, userToken, deviceReporterData, onSettings, onError) {
    var settings = settingsDataSource.get({
        userToken: userToken,
        device: JSON.stringify(deviceReporterData)
    });
    settings.then(onSettings.fire, onError.fire);
};


fluid.defaults("gpii.flowManager.untrusted.stateChangeHandler", {
    gradeNames: ["fluid.component", "gpii.flowManager.userLogonStateChange.stateChangeHandler"],
    invokers: {
        getSettings: {
            funcName: "gpii.flowManager.untrusted.getSettings",
            args: [
                "{flowManager}.settingsDataSource",
                "{that}.userToken",
                "{arguments}.0", // device reporter data
                "{that}.events.onSettings",
                "{that}.events.onError"
            ]
        },
        getDeviceContext: { // TODO factoring - duplicates a method from "gpii.flowManager.matchMakingRequest" 
            funcName: "gpii.flowManager.getDeviceContext",
            args: ["{flowManager}.deviceReporterDataSource", "{that}.events.onDeviceContext", "{request}.events.onError"]
        }
    },
    events: {
        onUserToken: null,
        onDeviceContext: null,
        onSettings: null
    },
    listeners: {
        "onUserToken.setUserToken": {
            listener: "gpii.flowManager.setUserToken",
            args: ["{that}", "{arguments}.0"]
        },
        "onUserToken.getDeviceContext": {
            func: "{that}.getDeviceContext",
            priority: "after:setUserToken"
        },
        onDeviceContext: "{that}.getSettings",
        onSettings: "{that}.startLifecycle"
    }
});

fluid.defaults("gpii.flowManager.untrusted.userLogin.handler", { // TODO: Duplicate other than parent grade
    gradeNames: ["kettle.request.http", "gpii.flowManager.untrusted.stateChangeHandler"],
    invokers: {
        handleRequest: {
            funcName: "gpii.flowManager.userLogin.handleRequest",
            args: ["{request}.req.params.userToken", "{flowManager}.lifecycleManager", "{that}"]
        }
    }
});

fluid.defaults("gpii.flowManager.untrusted.userLogonStateChange.handler", {
    gradeNames: ["kettle.request.http", "gpii.flowManager.untrusted.stateChangeHandler"],
    invokers: {
        handleRequest: {
            funcName: "gpii.flowManager.userLogonStateChange.handleRequest",
            args: ["{request}.req.params.userToken", "{flowManager}.lifecycleManager", "{that}"]
        }
    }
});
