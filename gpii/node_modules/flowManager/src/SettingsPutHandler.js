/*
 * GPII Untrusted Settings Put Handler
 *
 * Copyright 2017 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

// Update preferences by first ensuring the client that requests the update action does have the privilege
// to update, by verifying the access token embedded in the request "Authorization" header.
fluid.defaults("gpii.flowManager.cloudBased.settings.put.handler", {
    gradeNames: ["kettle.request.http"],
    invokers: {
        handleRequest: {
            funcName: "gpii.flowManager.cloudBased.settings.put.handleRequest",
            args: [
                "{flowManager}.prefsServerDataSource",
                "{that}",
                "{that}.req.params.gpiiKey",
                "{that}.req.body",
                "{gpii.flowManager.cloudBased}.authGrantFinder"
            ]
        }
    }
});

gpii.flowManager.cloudBased.settings.put.messages = {
    success: "Successfully updated."
};

gpii.flowManager.cloudBased.settings.put.handleRequest = function (prefsServerDataSource, request, gpiiKey, preferences, authGrantFinder) {
    var authorizationPromise = gpii.oauth2.getAuthorization(request.req, authGrantFinder);

    authorizationPromise.then(function (authorization) {
        if (authorization && authorization.gpiiKey === gpiiKey && authorization.allowSettingsPut) {
            // TODO: Verify the received preferences with metadata to make sure they are the ones that are allowed to be updated.
            // This is not supported at the first release of PSP

            var updatePromise = prefsServerDataSource.set(gpiiKey, "true", preferences);

            fluid.log("CloudBased flowManager: SettingsPutHandler - The preference set to be merged for the GPII key (", gpiiKey, ") is: ", preferences);
            updatePromise.then(function (response) {
                // The default success response from the preference server contains the updated preferences,
                request.events.onSuccess.fire({
                    gpiiKey: response.gpiiKey,
                    message: gpii.flowManager.cloudBased.settings.put.messages.success
                });
            }, request.events.onError.fire);
        } else {
            fluid.log("CloudBased flowManager: unauthorized PUT request at /settings due to one of these reasons: 1. authorization record is missing; 2. gpiiKey associated with the authorization does not match the in-used token " + gpiiKey + "; 3. the access token is unauthorized for using PUT method at /settings endpoint.");
            request.events.onError.fire(gpii.dbOperation.errors.unauthorized);
            return;
        }
    }, function (error) {
        fluid.log("CloudBased flowManager: PUT request at /settings failed with error ", error);
        request.events.onError.fire(gpii.dbOperation.errors.unauthorized);
        return;
    });
};
