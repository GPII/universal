/*
 * GPII Untrusted Settings Put Handler
 *
 * Copyright 2017 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

// Update preferences by first ensuring the client that requests the update action does have the privilege
// to update, by verifying the access token embedded in the request "Authorization" header.
fluid.defaults("gpii.flowManager.cloudBased.settings.put.handler", {
    gradeNames: ["kettle.request.http"],
    members: {
        prefsServerDataSource: "{flowManager}.prefsServerDataSource",
        authGrantFinder: "{gpii.flowManager.cloudBased}.authGrantFinder",
        dataStore: "{gpii.flowManager.cloudBased}.oauth2DataStore"
    },
    invokers: {
        handleRequest: {
            funcName: "gpii.flowManager.cloudBased.settings.put.handleRequest",
            args: [
                "{that}",
                "{that}.req.params.gpiiKey",
                "{that}.req.body"
            ]
        }
    }
});

gpii.flowManager.cloudBased.settings.put.messages = {
    success: "Successfully updated."
};

gpii.flowManager.cloudBased.settings.put.handleRequest = function (that, gpiiKey, preferences) {
    var authorizationPromise = gpii.oauth2.getAuthorization(that.req, that.authGrantFinder);

    authorizationPromise.then(function (authorization) {
        if (authorization && authorization.gpiiKey === gpiiKey && authorization.allowSettingsPut) {
            // TODO: Verify the received preferences with metadata to make sure they are the ones that are allowed to be updated.
            // This is not supported at the first release of PSP

            var handlerPromise;
            var gpiiKeyPromise = that.dataStore.findGpiiKey(gpiiKey);
            gpiiKeyPromise.then(function (data) {
                // GPII-3721: If the GPII key already exists, update its prefs safe. Otherwise, create the GPII key and its prefs safe.
                if (data) {
                    handlerPromise = that.prefsServerDataSource.update(gpiiKey, true, preferences);
                } else {
                    handlerPromise = that.prefsServerDataSource.create(gpiiKey, preferences);
                }

                fluid.log("CloudBased flowManager: SettingsPutHandler - Save the GPII key (", gpiiKey ,") with a preference set: ", preferences);
                handlerPromise.then(function (response) {
                    // The default success response from the preference server contains the updated preferences,
                    that.events.onSuccess.fire({
                        gpiiKey: response.gpiiKey,
                        message: gpii.flowManager.cloudBased.settings.put.messages.success
                    });
                }, that.events.onError.fire);
            }, that.events.onError.fire);
        } else {
            fluid.log("CloudBased flowManager: unauthorized PUT request at /settings due to one of these reasons: 1. authorization record is missing; 2. gpiiKey associated with the authorization does not match the in-used token " + gpiiKey + "; 3. the access token is unauthorized for using PUT method at /settings endpoint.");
            that.events.onError.fire(gpii.dbOperation.errors.unauthorized);
            return;
        }
    }, function (error) {
        fluid.log("CloudBased flowManager: PUT request at /settings failed with error ", error);
        that.events.onError.fire(gpii.dbOperation.errors.unauthorized);
        return;
    });
};
