/**
 * GPII User Update Handler
 *
 * Copyright 2013 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */

(function () {

    "use strict";

    var fluid = require("infusion"),
        $ = fluid.registerNamespace("jQuery"),
        request = fluid.registerNamespace("gpii.request.flowManager");

    fluid.defaults("kettle.requests.request.handler.userUpdate", {
        gradeNames: ["fluid.littleComponent", "gpii.request.flowManager.token", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.userUpdateHandle",
                args: [
                    "{flowManager}.matchMakerDataSource",
                    "{that}.events.onMatch",
                    "{request}"
                ],
                dynamic: true
            },
            onMatchHandler: {
                funcName: "gpii.request.flowManager.onMatchUpdateHandler",
                args: [
                    "{flowManager}.lifecycleManagerServerDataSource",
                    "{requestProxy}.events.onSuccess",
                    "{request}",
                    "{arguments}.0"
                ]
            }
        },
        listeners: {
            onMatch: "{that}.onMatchHandler"
        }
    });

    // TODO: this needs to be replaced with the implementation based on
    // FLUID-3674 once it's part of Infusion.
    request.deepEq = function (obj1, obj2) {
        var equal = true;
        if (!obj2) {
            return !equal;
        }
        fluid.each(obj1, function (val, key) {
            if (fluid.isPrimitive(val)) {
                equal = val === obj2[key];
            } else {
                equal = request.deepEq(val, obj2[key]);
            }
            return equal;
        });
        return equal;
    };

    request.getUpdatedPreferences = function (newPreferences, oldPreferences) {
        var togo = fluid.copy(newPreferences);
        fluid.remove_if(togo, function (val, key) {
            if (fluid.isPrimitive(val)) {
                return val === oldPreferences[key];
            } else {
                return request.deepEq(val, oldPreferences[key]);
            }
        });
        return togo;
    };

    request.userUpdateHandle = function (matchMakerDataSource, event, fluidRequest) {
        var session = fluidRequest.session.session;
        fluidRequest.updatedPreferences = request.getUpdatedPreferences(
            fluidRequest.data, session.preferences);
        request.getMatch(matchMakerDataSource, event,
            fluidRequest.updatedPreferences, session.device);
    };

    request.onMatchUpdateHandler = function (lifecycleManagerServerDataSource, event, fluidRequest, match) {
        var session = fluidRequest.session.session;
        lifecycleManagerServerDataSource.set({
            operation: "update",
            token: session.token
        }, match, function (response) {
            if (response.success) {
                // Update the session.
                session.preferences = fluidRequest.data;
            }
            request.logAndNotify("Lifecycle manager returned: ", event)(response);
        });
    };

})();
