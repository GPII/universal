/*
 * GPII User Update Handler
 *
 * Copyright 2013 OCAD University
 * Copyright 2014 Astea
 * Copyright 2014 Raising the Floor - international
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

fluid.defaults("gpii.flowManager.userUpdate.handler", {
    gradeNames: ["kettle.request.ws", "gpii.flowManager.sessionAware"],
    listeners: {
        onReceiveMessage: {
            funcName: "gpii.flowManager.userUpdate.handleUpdate",
            args: [
                "{that}",
                "{request}",
                "{arguments}.1",
                "{flowManager}.transformer",
                "{flowManager}.lifecycleManager"
            ]
        }
    }
});

// TODO: This endpoint does nothing useful in particular and has absolutely no useful tests

gpii.flowManager.userUpdate.handleUpdate = function (that, request, data, transformer, lifecycleManager) {
    fluid.log("userUpdate.handleUpdate with data ", data);
    that.withSession(function (session) {
        var updatedConfig = fluid.extend(true, {}, session.model.activeConfiguration, { applications: data });
        var lifecycleInstructions = transformer.configurationToSettings(updatedConfig, session.model.solutionsRegistryEntries);
        var finalPayload = {
            activeConfiguration: {
                lifecycleInstructions: lifecycleInstructions
            },
            userToken: session.model.userToken
        };
        var promise = lifecycleManager.update(finalPayload);
        promise.then(function (response) {
            fluid.log("userUpdate.handleUpdate Sending response ", response);
            that.sendMessage({ success: true });
        }, function (error) {
            request.events.onError.fire(error);
        });
    }, "Cannot update settings with no active users", that.sendMessage);
};
