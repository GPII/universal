/**
 * GPII User Update Handler
 *
 * Copyright 2013 OCAD University
 * Copyright 2014 Astea
 * Copyright 2014 Raising the Floor - international
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */

(function () {

    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii"),
        $ = fluid.registerNamespace("jQuery");

    fluid.registerNamespace("gpii.request.flowManager");

    fluid.defaults("kettle.requests.request.handler.userUpdate", {
        gradeNames: ["gpii.request.flowManager.sessionAware", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.userUpdateHandle",
                args: [
                    "{requestProxy}.events.onSuccess",
                    "{request}",
                    "{flowManager}.transformer",
                    "{flowManager}.lifecycleManager",
                    "{that}"
                ],
                dynamic: true
            }
        }
    });

    gpii.request.flowManager.userUpdateHandle = function (event, fluidRequest, transformer, lifecycleManager, that) {
        that.withSession(function (session) {
            var updatedConfig = $.extend(true, {}, session.activeConfiguration, { applications: fluidRequest.data });
            var lifecycleInstructions = transformer.configurationToSettings(updatedConfig, session.solutionsRegistryEntries);
            var finalPayload = {
                lifecycleInstructions: lifecycleInstructions,
                userToken: session.userToken
            };
            lifecycleManager.update(finalPayload, function (response) {

                if (response.success) {
                    // Update the session.
                    session.activeConfiguration = updatedConfig;
                }
                gpii.request.flowManager.logAndNotify("Lifecycle manager returned: ", event)(response);
            });
        });
    };
})();
