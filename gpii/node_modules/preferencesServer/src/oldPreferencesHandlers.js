/*!
GPII Prefernces Server Handlers for old-style preferences

Copyright 2014 Raising the floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

The research leading to these results has received funding from the European Union's
Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 289016.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

(function () {
    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii");


    // ----------- GET -------------
    fluid.defaults("gpii.preferencesServer.old.get.handler", {
        gradeNames: ["kettle.request.http"],
        invokers: {
            handleRequest: {
                funcName: "gpii.preferencesServer.get.getRawPreferences",
                args: [ "{that}", "{preferencesServer}"]
            },
            buildReturnPayload: {
                funcName: "gpii.preferencesServer.old.get.buildReturnPayload",
                args: [ "{arguments}.0", "{preferencesServer}.ontologyHandler", "{request}" ]
            }
        }
    });

    /*
     * translate preferences from the new (correct):
     * http://registry.gpii.net/common/term: "val1"
     * format into the old:
     * http://registry.gpii.net/common/term: [{ value: "val1" }]
     * format
     */
    gpii.preferencesServer.old.get.newFlatToOldFlat = function (prefs) {
        return fluid.transform(prefs, function (val) {
            return [{ value: val }];
        });
    };

    gpii.preferencesServer.old.get.buildReturnPayload = function (rawPrefs, ontologyHandler, request) {
        fluid.log("Raw preferences fetched by old PreferencesServer: " + JSON.stringify(rawPrefs, null, 2));
        var fullPrefs = ontologyHandler.rawPrefsToOntology(rawPrefs, "flat");
        var prefs = fluid.get(fullPrefs, "contexts.gpii-default.preferences");
        var togo = (!prefs) ? {} : {
            userToken: request.req.params.userToken,
            preferences: gpii.preferencesServer.old.get.newFlatToOldFlat(prefs)
        };
        request.events.onSuccess.fire(togo);
    };


    // ----------- POST -------------
    fluid.defaults("gpii.preferencesServer.old.post.handler", {
        gradeNames: ["kettle.request.http"],
        invokers: {
            handleRequest: {
                funcName: "gpii.preferencesServer.old.post.handleRequest",
                args: [ "{request}", "{preferencesServer}", "{that}.events.onPostRawPreferences"]
            },
            onPostRawPreferences: {
                funcName: "gpii.preferencesServer.old.post.onPostRawPreferences",
                args: [ "{arguments}.0", "{request}" ]
            }
        },
        events: {
            onPostRawPreferences: null
        },
        listeners: {
            onPostRawPreferences: "{that}.onPostRawPreferences"
        }
    });

    /*
     * translate preferences from the new (correct):
     * http://registry.gpii.net/common/term: [{ value: "val1" }]
     * format into the old:
     * http://registry.gpii.net/common/term: "val1"
     * format
     */
    gpii.preferencesServer.old.post.oldFlatToNewFlat = function (prefs) {
        return fluid.transform(prefs, function (val) {
            return val[0].value;
        });
    };

    gpii.preferencesServer.old.post.handleRequest = function (request, preferencesServer, event) {
        // True to the previous implementation of the preferences server, we only support post for
        // adding/updating preferences to the preferences server. It will work as both post/put (ie.
        // storing to already existing as well as new records)
        var body = {
            "flat": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": gpii.preferencesServer.old.post.oldFlatToNewFlat(request.req.body)
                    }
                }
            }
        };
        preferencesServer.setRawPreferences(event, body, request.req.params.userToken);
    };

    gpii.preferencesServer.old.post.onPostRawPreferences = function (reply, request) {
        var ret = {
            userToken: reply.userToken
        };
        request.events.onSuccess.fire(ret);
    };
})();