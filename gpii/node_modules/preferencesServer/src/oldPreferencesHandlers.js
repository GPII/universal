/*!
GPII Prefernces Server Handlers for old-style preferences

Copyright 2014 Raising the floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/* global require */
(function () {
    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.preferencesServer.old.get");
    fluid.registerNamespace("gpii.preferencesServer.old.post");

    // ----------- GET -------------
    fluid.defaults("kettle.requests.request.handler.oldPreferencesGet", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        invokers: {
            handle: {
                funcName: "gpii.preferencesServer.get.getRawPreferences",
                args: [ "{preferencesServer}", "{request}", "{that}.events.onRawPreferences"],
                dynamic: true
            },
            buildReturnPayload: {
                funcName: "gpii.preferencesServer.old.get.buildReturnPayload",
                args: [ "{arguments}.0", "{preferencesServer}.ontologyHandler", "{request}", "{requestProxy}" ]
            }
        },
        events: {
            onRawPreferences: null
        },
        listeners: {
            onRawPreferences: "{that}.buildReturnPayload"
        }
    });

    /*
     * translate preferences from the new (correct):
     * http://registry.gpii.net/common/term: "val1"
     * format into the old:
     * http://registry.gpii.net/common/term: [{ value: "val1" }]
     * format
     */
    gpii.preferencesServer.old.get.newFlatToOldFlat = function (prefs) {
        return fluid.transform(prefs, function (val) {
            return [{ value: val }];
        });
    };

    gpii.preferencesServer.old.get.buildReturnPayload = function (rawPrefs, ontologyHandler, request, requestProxy) {
        fluid.log("Raw preferences fetched by old PreferencesServer: " + rawPrefs);
        var fullPrefs = ontologyHandler.rawPrefsToOntology(rawPrefs, "flat");
        var prefs = fluid.get(fullPrefs, "contexts.gpii-default.preferences");
        var togo = (!prefs) ? {} : {
            userToken: request.req.params.userToken,
            preferences: gpii.preferencesServer.old.get.newFlatToOldFlat(prefs)
        };
        requestProxy.events.onSuccess.fire(togo);
    };


    // ----------- POST -------------
    fluid.defaults("kettle.requests.request.handler.oldPreferencesPost", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        invokers: {
            handle: {
                funcName: "gpii.preferencesServer.old.post.request",
                args: [ "{request}", "{preferencesServer}", "{that}.events.onPostRawPreferences"],
                dynamic: true
            },
            onPostRawPreferences: {
                funcName: "gpii.preferencesServer.old.post.onPostRawPreferences",
                args: [ "{arguments}.0", "{request}", "{requestProxy}" ]
            }
        },
        events: {
            onPostRawPreferences: null
        },
        listeners: {
            onPostRawPreferences: "{that}.onPostRawPreferences"
        }
    });

    /*
     * translate preferences from the new (correct):
     * http://registry.gpii.net/common/term: [{ value: "val1" }]
     * format into the old:
     * http://registry.gpii.net/common/term: "val1"
     * format
     */
    gpii.preferencesServer.old.post.oldFlatToNewFlat = function (prefs) {
        return fluid.transform(prefs, function (val) {
            return val[0].value;
        });
    };

    gpii.preferencesServer.old.post.request = function (request, preferencesServer, event) {
        // True to the previous implementation of the preferences server, we only support post for
        // adding/updating preferences to the preferences server. It will work as both post/put (ie.
        // storing to already existing as well as new records)
        var body = {
            "flat": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": gpii.preferencesServer.old.post.oldFlatToNewFlat(request.req.body)
                    }
                }
            }
        };
        preferencesServer.setRawPreferences(event, body, request.req.params.userToken);
    };

    gpii.preferencesServer.old.post.onPostRawPreferences = function (reply, request, requestProxy) {
        var ret = {
            userToken: reply.userToken
        };
        requestProxy.events.onSuccess.fire(ret);
    };
})();