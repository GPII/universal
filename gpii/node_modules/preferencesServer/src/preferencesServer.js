/*!
GPII Preferences Server

Copyright 2012 OCAD University
Copyright 2014 Raising The Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, __dirname */


(function () {

    "use strict";

    var fluid = require("infusion"),
        path = require("path"),
        gpii = fluid.registerNamespace("gpii");

    fluid.require("kettle", require);

    fluid.defaults("gpii.preferencesServer", {
        gradeNames: ["kettle.app", "autoInit"],
        handlers: {
            preferencesGet: {
                route: "/preferences/:token",
                type: "get"
            },
            preferencesPost: {
                route: "/preferences",
                type: "post"
            },
            preferencesPut: {
                route: "/preferences/:token",
                type: "put"
            },
            oldPreferencesGet: {
                route: "/oldPreferences/:token",
                type: "get"
            },
            oldPreferencesPost: {
                route: "/oldPreferences/:token?",
                type: "post"
            }
        },
        invokers: {
            getRawPreferences: {
                funcName: "gpii.preferencesServer.getRawPreferences",
                args: ["{gpii.preferencesServer}.rawPreferencesDataSource", "{arguments}.0", "{arguments}.1"]
            },
            setRawPreferences: {
                funcName: "gpii.preferencesServer.setRawPreferences",
                args: ["{gpii.preferencesServer}.rawPreferencesDataSource", "{requestProxy}", "{arguments}.0", "{arguments}.1", "{arguments}.2" ]
            }
        },
        root: path.join(__dirname, ".."),
        components: {
            rawPreferencesDataSource: {
                type: "kettle.dataSource.URL",
                options: {
                    gradeNames: ["kettle.dataSource.simpleCallbackWrapper"],
                    url: "{gpii.preferencesServer}.options.urls.rawPreferences",
                    termMap: {
                        token: "%token"
                    },
                    writable: true
                }
            },
            ontologyHandler: {
                type: "gpii.ontologyHandler"
            }
        }
    });

    fluid.defaults("gpii.preferencesServer.dev", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        components: {
            userSource: {
                type: "kettle.dataSource.URL",
                options: {
                    writeMethod: "POST"
                }
            }
        },
        distributeOptions: { // TODO: stolen from FlowManager.js:96 - perhaps it should be default in kettle
            source: "{that}.options.urlExpanderGradeNames",
            target: "{that urlExpander}.options.gradeNames"
        },
        urlExpanderGradeNames: ["kettle.urlExpander.development"]
    });

    gpii.preferencesServer.getRawPreferences = function (rawPreferencesDataSource, event, token) {
        if (token === undefined) {
            fluid.fail("Token for getting preferences is undefined - aborting");
            return;
        }

        rawPreferencesDataSource.get({
            token: token
        }, gpii.preferencesServer.logAndNotify("Fetched raw user preferences: ", event,
            function getPreferences(data) {
                return (data === undefined) ? {} : data.preferences || data;
            })
        );
    };

    gpii.preferencesServer.setRawPreferences = function (rawPreferencesDataSource, requestProxy, successEvent, body, token) {
        // if we were passed a token, that means we want to do an update, else we're creating a new NP set
        var writeMethod = (token) ? "PUT" : "POST";
        var promise = rawPreferencesDataSource.set({token: token || ""}, body, {writeMethod: writeMethod});
        promise.then(successEvent.fire, requestProxy.events.onError.fire);
    };

    // TODO - should be removed or factored - just copied from gpii.request.flowmanager.logAndNotify
    gpii.preferencesServer.logAndNotify = function (msg, event, callback) {
        return function (data) {
            fluid.log(msg, data);
            event.fire(callback ? callback(data) : data);
        };
    };

    /*
     * Simple function to get the 'view' parameter from the request object. In case none is given,
     * defaults to the "flat" ontology.
     *
     * @request (Object) a request object
     *
     * @return (String) the value of the 'view' parameter of the request object, or "flat" if
     *     none is given
     */
    gpii.preferencesServer.getRequestView = function (request) {
        return (request.req.query && request.req.query.view) ? request.req.query.view : "flat";
    };
})();
