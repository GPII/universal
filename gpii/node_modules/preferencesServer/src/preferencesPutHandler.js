/*!
GPII Preferences Server PUT Handler

Copyright 2014 Raising the floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/* global require */
(function () {
    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.preferencesServer.put");

    fluid.defaults("kettle.requests.request.handler.preferencesPut", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        invokers: {
            handle: {
                funcName: "gpii.preferencesServer.put.request",
                args: [ "{request}", "{preferencesServer}", "{that}.events.onGetRawPreferences"],
                dynamic: true
            },
            onGetRawPreferences: {
                funcName: "gpii.preferencesServer.put.onGetRawPreferences",
                args: [ "{preferencesServer}", "{preferencesServer}.ontologyHandler",
                     "{request}", "{arguments}.0", "{that}.events.onPutRawPreferences" ]
            },
            onPutRawPreferences: {
                funcName: "gpii.preferencesServer.put.onPutRawPreferences",
                args: [ "{arguments}.0", "{request}", "{requestProxy}" ]
            }
        },
        events: {
            onGetRawPreferences: null,
            onPutRawPreferences: null
        },
        listeners: {
            onGetRawPreferences: "{that}.onGetRawPreferences",
            onPutRawPreferences: "{that}.onPutRawPreferences"
        }
    });

    gpii.preferencesServer.put.request = function (request, preferencesServer, event) {
        preferencesServer.getRawPreferences(event, request.req.params.userToken);
    };

    gpii.preferencesServer.put.onGetRawPreferences = function (preferencesServer, ontologyHandler, request, rawPrefs, event) {
        // get the view of the given preferences (in body), update raw prefernces set and PUT it
        var prefsView = gpii.preferencesServer.getRequestView(request);
        // if prefs set isn't found, couchDB will throw an error: { isError: true, message: ".." }
        if (rawPrefs.isError) {
            rawPrefs = {};
        }
        rawPrefs = ontologyHandler.addPrefsToRawPrefs(request.req.body, prefsView, rawPrefs);
        preferencesServer.setRawPreferences(event, rawPrefs, request.req.params.userToken);
    };

    gpii.preferencesServer.put.onPutRawPreferences = function (reply, request, requestProxy) {
        // despite potentially having modified the entire raw preferences set, we only return the
        // preferences in the view that we originally got them
        var ret = {
            userToken: reply.userToken,
            preferences: reply.preferences[gpii.preferencesServer.getRequestView(request)]
        };
        requestProxy.events.onSuccess.fire(ret);
    };
})();