/*!
GPII Preferences Server PUT Handler

Copyright 2014 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

The research leading to these results has received funding from the European Union's
Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 289016.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

fluid.defaults("gpii.preferencesServer.put.handler", {
    gradeNames: ["kettle.request.http"],
    invokers: {
        handleRequest: {
            funcName: "gpii.preferencesServer.put.handleRequest",
            args: [ "{request}", "{preferencesServer}", "{that}.events.onGetRawPreferences"]
        },
        onGetRawPreferences: {
            funcName: "gpii.preferencesServer.put.onGetRawPreferences",
            args: [ "{preferencesServer}", "{preferencesServer}.ontologyHandler",
                 "{request}", "{arguments}.0", "{that}.events.onPutRawPreferences" ]
        },
        onPutRawPreferences: {
            func: "{preferencesServer}.setPrefsReturnHandler",
            args: [ "{arguments}.0", "{request}" ]
        }
    },
    events: {
        onGetRawPreferences: null,
        onPutRawPreferences: null
    },
    listeners: {
        onGetRawPreferences: "{that}.onGetRawPreferences",
        onPutRawPreferences: "{that}.onPutRawPreferences"
    }
});

gpii.preferencesServer.put.handleRequest = function (request, preferencesServer, event) {
    var promise = preferencesServer.getRawPreferences(request.req.params.userToken);
    promise.then(event.fire, function (data) {
        // If error stems from preference set not being found, continue putting the error set. Else pass on error
        if (data.statusCode === 404) {
            data = {};
        } else {
            request.events.onError.fire(data);
            return;
        }
        event.fire(data);
    });
};

gpii.preferencesServer.put.onGetRawPreferences = function (preferencesServer, ontologyHandler, request, rawPrefs, event) {
    // get the view of the given preferences (in body), update raw prefernces set and PUT it
    var prefsView = gpii.preferencesServer.getRequestView(request);
    rawPrefs = ontologyHandler.addPrefsToRawPrefs(request.req.body, prefsView, rawPrefs);
    preferencesServer.setRawPreferences(event, rawPrefs, request.req.params.userToken);
};

