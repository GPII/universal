/*!
GPII Preferences Server GET Handler

Copyright 2014 Raising the Floor - International
Copyright 2018 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

The research leading to these results has received funding from the European Union's
Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 289016.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

fluid.defaults("gpii.preferencesServer.prefsSafeGet.handler", {
    gradeNames: ["kettle.request.http"],
    invokers: {
        handleRequest: {
            funcName: "gpii.preferencesServer.prefsSafeGet.handler.getPrefsSafe",
            args: ["{gpii.preferencesServer.preferencesService}", "{preferencesServer}", "{that}", "{that}.req.params.prefsSafeId"]
        }
    }
});

gpii.preferencesServer.prefsSafeGet.handler.getPrefsSafe = function (prefsService, preferencesServer, request, gpiiKey) {
    prefsService.getPrefsSafe(gpiiKey).then(request.events.onSuccess.fire,
        function (err) {
            request.events.onError.fire({
                isError: true,
                message: err.message,
                errorCode: err.errorCode,
                statusCode: 404
            });
        }
    );
};

fluid.defaults("gpii.preferencesServer.prefsSafeList.handler", {
    gradeNames: ["kettle.request.http"],
    invokers: {
        handleRequest: {
            funcName: "gpii.preferencesServer.prefsSafeList.handler.getPrefsSafeList",
            args: ["{gpii.preferencesServer.preferencesService}", "{preferencesServer}", "{that}"]
        }
    }
});

gpii.preferencesServer.prefsSafeList.handler.getPrefsSafeList = function (prefsService, preferencesServer, request) {
    prefsService.getPrefsSafeList().then(request.events.onSuccess.fire,
        function (err) {
            request.events.onError.fire({
                isError: true,
                message: err.message,
                errorCode: err.errorCode,
                statusCode: 404
            });
        }
    );
};

fluid.defaults("gpii.preferencesServer.findRelatedDocsForPrefsSafe.handler", {
    gradeNames: ["kettle.request.http"],
    invokers: {
        handleRequest: {
            funcName: "gpii.preferencesServer.findRelatedDocsForPrefsSafe.handler.getKeysForPrefsSafe",
            args: ["{gpii.preferencesServer.preferencesService}", "{preferencesServer}", "{that}", "{that}.req.params.prefsSafeId"]
        }
    }
});

gpii.preferencesServer.findRelatedDocsForPrefsSafe.handler.getKeysForPrefsSafe = function (prefsService, preferencesServer, request, prefsSafeId) {
    prefsService.getPrefsSafe(prefsSafeId).then(
        function (/* prefsSafeData */) {
            prefsService.getKeysForPrefsSafe(prefsSafeId).then(request.events.onSuccess.fire, request.events.onError.fire);
        },
        function (err) {
            request.events.onError.fire({
                isError: true,
                message: err.message,
                errorCode: err.errorCode,
                statusCode: 404
            });
        }
    );
};

fluid.defaults("gpii.preferencesServer.prefsSafeWithKeysGet.handler", {
    gradeNames: ["kettle.request.http"],
    invokers: {
        handleRequest: {
            funcName: "gpii.preferencesServer.prefsSafeWithKeysGet.handler.get",
            args: ["{gpii.preferencesServer.preferencesService}", "{preferencesServer}", "{that}", "{that}.req.params.prefsSafeId"]
        }
    }
});

gpii.preferencesServer.prefsSafeWithKeysGet.handler.get = function (prefsService, preferencesServer, request, prefsSafeId) {
    prefsService.getPrefsSafe(prefsSafeId).then(
        function (prefsSafeData) {
            prefsService.getKeysForPrefsSafe(prefsSafeId).then(
                function (keysData) {
                    request.events.onSuccess.fire({
                        prefsSafe: prefsSafeData,
                        keys:  keysData.rows
                    });
                },
                request.events.onError.fire);
        },
        function (err) {
            request.events.onError.fire({
                isError: true,
                message: err.message,
                errorCode: err.errorCode,
                statusCode: 404
            });
        }
    );
};

fluid.defaults("gpii.preferencesServer.prefsSafePost.handler", {
    gradeNames: ["kettle.request.http"],
    invokers: {
        handleRequest: {
            funcName: "gpii.preferencesServer.prefsSafePost.handler.updatePrefsSafe",
            args: ["{preferencesService}", "{that}", "{that}.req.body"]
        }
    }
});

gpii.preferencesServer.prefsSafePost.handler.updatePrefsSafe = function (preferencesService, request, prefsSafe) {
    preferencesService.addPrefsSafe(prefsSafe).then(
        request.events.onSuccess.fire,
        function (err) {
            request.events.onError.fire({
                isError: true,
                message: err.message,
                errorCode: err.errorCode,
                statusCode: 404
            });
        }
    );
};

fluid.defaults("gpii.preferencesServer.prefsSafePut.handler", {
    gradeNames: ["kettle.request.http"],
    invokers: {
        handleRequest: {
            funcName: "gpii.preferencesServer.prefsSafePut.handler.updatePrefsSafe",
            args: ["{preferencesService}", "{that}", "{that}.req.params.prefsSafeId", "{that}.req.body"]
        }
    }
});

gpii.preferencesServer.prefsSafePut.handler.updatePrefsSafe = function (preferencesService, request, prefsSafeId, prefsSafe) {
    if (prefsSafeId !== prefsSafe.id) {
        request.events.onError.fire({
            isError: true,
            message: gpii.preferencesServer.errors.errorUrlPayloadIdMismatch.message,
            errorCode: gpii.preferencesServer.errors.errorUrlPayloadIdMismatch.errorCode,
            statusCode: 404
        });
    };

    preferencesService.updatePrefsSafe(prefsSafe).then(
        request.events.onSuccess.fire,
        function (err) {
            request.events.onError.fire({
                isError: true,
                message: err.message,
                errorCode: err.errorCode,
                statusCode: 404
            });
        }
    );
};

fluid.defaults("gpii.preferencesServer.prefsSafeKeyCreate.handler", {
    gradeNames: ["kettle.request.http"],
    invokers: {
        handleRequest: {
            funcName: "gpii.preferencesServer.prefsSafeKeyCreate.handler.addGpiiKey",
            args: ["{preferencesService}", "{that}.req.body", "{that}"]
        }
    }
});

gpii.preferencesServer.prefsSafeKeyCreate.handler.addGpiiKey = function (preferencesService, body, request) {
    preferencesService.addGpiiKey(body).then(request.events.onSuccess.fire,
        function (err) {
            request.events.onError.fire({
                isError: true,
                message: err.message,
                errorCode: err.errorCode,
                statusCode: 404
            });
        }
    );
};
