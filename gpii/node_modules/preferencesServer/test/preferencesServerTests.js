/**
GPII Preferences Server Tests

Copyright 2014 Raising the floor - international

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

The research leading to these results has received funding from the European Union's
Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 289016.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

/* global require, __dirname */
"use strict";

var fluid = require("infusion"),
    path = require("path"),
    jqUnit = fluid.require("jqUnit"),
    uuid = require("node-uuid"),
    configPath = path.resolve(__dirname, "./configs"),
    kettle = fluid.require("kettle"),
    gpii = fluid.registerNamespace("gpii"),
    fs = require("fs"),
    testDefs = [];

kettle.loadTestingSupport();

fluid.require("ontologyHandler", require);

fluid.registerNamespace("gpii.preferencesServer.tests");

gpii.preferencesServer.tests.prefsDir = path.resolve(__dirname, "../../../../testData/preferences/");

gpii.preferencesServer.tests.filesToDelete = [];

gpii.preferencesServer.tests.cleanUpTmpFiles = function () {
    var file;
    while ((file = gpii.preferencesServer.tests.filesToDelete.pop()) !== undefined) {
        fs.unlinkSync(file);
    }
};


fluid.defaults("gpii.preferencesServer.tests.testServerMock", {
    gradeNames: ["fluid.littleComponent", "autoInit"],
    invokers: {
        set: {
            funcName: "gpii.preferencesServer.tests.testServerMock.set",
            args: [ "{arguments}.0", "{arguments}.1", "{arguments}.2", "{that}.rawPreferencesDataSource"]
        },
        get: {
            funcName: "gpii.preferencesServer.tests.testServerMock.get",
            args: [ "{arguments}.0", "{arguments}.1", "{arguments}.2", "{that}.rawPreferencesDataSource"]
        }
    },
    components: {
        rawPreferencesDataSource: {
            type: "kettle.dataSource.URL",
            options: {
                url: "{gpii.preferencesServer}.options.urls.rawPreferences",
                termMap: {
                    userToken: "%userToken"
                },
                writable: true
            }
        }
    }
});

gpii.preferencesServer.tests.testServerMock.set = function (model, body, callback, rawPreferencesDataSource) {
    // assert that this function is called with a body:
    jqUnit.assertTrue("Set function of rawPreferencesServer mock is called", true);
    var userToken = model.userToken;
    if (userToken === "" || userToken === undefined) {
        userToken = uuid.v4();
    }

    gpii.preferencesServer.tests.filesToDelete.push(__dirname + "/data/" + userToken + ".json");

    var promise = fluid.promise();
    rawPreferencesDataSource.set({userToken: userToken}, body, callback).then(function () {
        promise.resolve({ userToken: userToken, preferences: body});
    });
    return promise;
};

gpii.preferencesServer.tests.testServerMock.get = function (model, body, callback, rawPreferencesDataSource) {
    rawPreferencesDataSource.get(model, body, callback);
};

/////////////////////// TESTING preferencesServer GET functionality ////////////////////////////
fluid.registerNamespace("gpii.preferencesServer.tests.get");

gpii.preferencesServer.tests.get.testRequestResponse = function (expected) {
    return function (data) {
        var retrievedData = JSON.parse(data);
        console.log(JSON.stringify(retrievedData, null, 4));
        jqUnit.assertDeepEq("Response is correct", expected, retrievedData);
    };
};

gpii.preferencesServer.tests.get.buildTestDef = function (fixture) {
    return {
        name: fixture.name,
        expect: 1,
        config: {
            configName: "standardConfig",
            configPath: configPath
        },
        components: {
            getRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/preferences/" + fixture.url,
                    method: "GET",
                    port: 8081,
                    termMap: {
                        userToken: fixture.userToken
                    }
                }
            }
        },
        sequence: [{
            func: "{getRequest}.send"
        }, {
            event: "{getRequest}.events.onComplete",
            listenerMaker: "gpii.preferencesServer.tests.get.testRequestResponse",
            makerArgs: [ fixture.expected ]
        }]
    };
};

var getFixtures = [
    {
        name: "GET: Basic retrieval of simple NP set in same ontology (no parameter)",
        userToken: "np_flatOnly_singleContext",
        url: "%userToken",
        expected: {
            "contexts": {
                "gpii-default": {
                    "name": "Default preferences",
                    "preferences": {
                        "http://registry.gpii.net/common/onScreenKeyboardEnabled": true,
                        "http://registry.gpii.net/common/initDelay": 0.120,
                        "http://registry.gpii.net/common/cursorSpeed": 0.850,
                        "http://registry.gpii.net/common/cursorAcceleration": 0.800,
                        "http://registry.gpii.net/common/mouseEmulationEnabled": true,
                        "http://registry.gpii.net/common/unknown": true,
                        "http://registry.gpii.net/applications/org.alsa-project": {
                            "volume": 14,
                            "pitch": 100
                        }
                    },
                    "metadata": [{
                        "type": "provenance",
                        "scope": ["http://registry\\.gpii\\.net/applications/org\\.alsa-project"],
                        "source": "snapshotter"
                    }, {
                        "type": "required",
                        "scope": ["*"]
                    }]
                }
            },
            "metadata": [
                {
                    "type": "doNotShare",
                    "scope": [ "http://registry\\.gpii\\.net/common/fontSize"]
                }
            ]
        }
    }, {
        name: "GET: Basic retrieval of simple NP set in same ontology (with parameter)",
        userToken: "np_flatOnly_singleContext",
        url: "%userToken?view=flat",
        expected: {
            "contexts": {
                "gpii-default": {
                    "name": "Default preferences",
                    "preferences": {
                        "http://registry.gpii.net/common/onScreenKeyboardEnabled": true,
                        "http://registry.gpii.net/common/initDelay": 0.120,
                        "http://registry.gpii.net/common/cursorSpeed": 0.850,
                        "http://registry.gpii.net/common/cursorAcceleration": 0.800,
                        "http://registry.gpii.net/common/mouseEmulationEnabled": true,
                        "http://registry.gpii.net/common/unknown": true,
                        "http://registry.gpii.net/applications/org.alsa-project": {
                            "volume": 14,
                            "pitch": 100
                        }
                    },
                    "metadata": [{
                        "type": "provenance",
                        "scope": ["http://registry\\.gpii\\.net/applications/org\\.alsa-project"],
                        "source": "snapshotter"
                    }, {
                        "type": "required",
                        "scope": ["*"]
                    }]
                }
            },
            "metadata": [
                {
                    "type": "doNotShare",
                    "scope": [ "http://registry\\.gpii\\.net/common/fontSize"]
                }
            ]
        }
    }, {
        name: "GET: Basic retrieval of simple NP set in different ontology (with parameter)",
        userToken: "np_ISO24751Only_singleContext",
        url: "%userToken?view=flat",
        expected: {
            "contexts": {
                "gpii-default": {
                    "name": "Default preferences",
                    "preferences": {
                        "http://registry.gpii.net/common/onScreenKeyboardEnabled": true,
                        "http://registry.gpii.net/common/initDelay": 0.120,
                        "http://registry.gpii.net/common/cursorSpeed": 0.850,
                        "http://registry.gpii.net/common/cursorAcceleration": 0.800,
                        "http://registry.gpii.net/common/mouseEmulationEnabled": true,
                        "http://registry.gpii.net/applications/org.alsa-project": {
                            "volume": 14,
                            "pitch": 100
                        }
                    },
                    "metadata": [{
                        "type": "provenance",
                        "scope": ["http://registry\\.gpii\\.net/applications/org\\.alsa-project"],
                        "source": "snapshotter"
                    }]
                }
            },
            "metadata": [
                {
                    "type": "doNotShare",
                    "scope": [ "http://registry\\.gpii\\.net/common/fontSize"]
                }
            ]
        }
    }, {
        name: "GET: Retrieval of simple NP set in different ontology plus non-translateable preference",
        userToken: "np_flatOnly_singleContext",
        url: "%userToken?view=ISO24751",
        expected: {
            "contexts": {
                "gpii-default": {
                    "name": "Default preferences",
                    "preferences": {
                        "control": {
                            "onscreenKeyboard": true,
                            "mouseEmulation": {
                                "cursorSpeed": 0.85,
                                "cursorAcceleration": 0.8,
                                "-provisional-initDelay": 0.12,
                                "-provisional-mouseEmulationEnabled": true
                            }
                        },
                        "applications": {
                            "org.alsa-project": {
                                "id": "org.alsa-project",
                                "parameters": {
                                    "volume": 14,
                                    "pitch": 100
                                }
                            }
                        }
                    },
                    "metadata": [
                        {
                            "type": "provenance",
                            "scope": ["applications.org\\.alsa-project.parameters"],
                            "source": "snapshotter"
                        }, {
                            "type": "required",
                            "scope": ["*"]
                        }
                    ]
                }
            },
            "metadata": [
                {
                    "type": "doNotShare",
                    "scope": [ "display.screenEnhancement.fontSize"]
                }
            ]
        }
    }, {
        name: "GET: Retrieval of single ontology, multi-context NP set in same ontology",
        userToken: "np_flatOnly_multiContext",
        url: "%userToken?view=flat",
        expected: {
            "contexts": {
                "gpii-default": {
                    "name": "Default preferences",
                    "preferences": {
                        "http://registry.gpii.net/common/cursorAcceleration": 0.800,
                        "http://registry.gpii.net/common/mouseEmulationEnabled": true,
                        "http://registry.gpii.net/common/unknown": true,
                        "http://registry.gpii.net/applications/org.alsa-project": {
                            "volume": 14,
                            "pitch": 100
                        }
                    },
                    "metadata": [
                        {
                            "type": "provenance",
                            "scope": ["http://registry\\.gpii\\.net/common/fontSize"],
                            "source": "snapshotter"
                        }
                    ]
                },
                "gpii-xyz1234": {
                    "name": "Nighttime at home",
                    "preferences": {
                        "http://registry.gpii.net/common/cursorSpeed": 1,
                        "http://registry.gpii.net/common/cursorAcceleration": 1
                    },
                    "conditions": [
                        {
                            "type": "http://registry.gpii.net/conditions/timeOfDay",
                            "range": {
                                "start": 1730,
                                "end": 730
                            }
                        }
                    ],
                    "priority": 100
                }
            },
            "metadata": [
                {
                    "type": "doNotShare",
                    "scope": [ "http://registry\\.gpii\\.net/common/fontSize"]
                }
            ]
        }
    }, {
        name: "GET: Retrieval of single ontology, multi-context NP set in a different ontology",
        userToken: "np_flatOnly_multiContext",
        url: "%userToken?view=ISO24751",
        expected: {
            "contexts": {
                "gpii-default": {
                    "name": "Default preferences",
                    "preferences": {
                        "control": {
                            "mouseEmulation": {
                                "cursorAcceleration": 0.8,
                                "-provisional-mouseEmulationEnabled": true
                            }
                        },
                        "applications": {
                            "org.alsa-project": {
                                "id": "org.alsa-project",
                                "parameters": {
                                    "volume": 14,
                                    "pitch": 100
                                }
                            }
                        }
                    },
                    "metadata": [
                        {
                            "type": "provenance",
                            "scope": ["display.screenEnhancement.fontSize"],
                            "source": "snapshotter"
                        }
                    ]
                },
                "gpii-xyz1234": {
                    "name": "Nighttime at home",
                    "preferences": {
                        "control": {
                            "mouseEmulation": {
                                "cursorSpeed": 1,
                                "cursorAcceleration": 1
                            }
                        }
                    },
                    "conditions": [
                        {
                            "type": "http://registry.gpii.net/conditions/timeOfDay",
                            "range": {
                                "start": 1730,
                                "end": 730
                            }
                        }
                    ],
                    "priority": 100
                }
            },
            "metadata": [
                {
                    "type": "doNotShare",
                    "scope": [ "display.screenEnhancement.fontSize"]
                }
            ]
        }
    }, {
        name: "GET: Retrieval of mixed NP set in flat (from multiple ontologies, single context)",
        userToken: "np_mixed_singleContext",
        url: "%userToken?view=flat",
        ontologyDir: path.resolve(__dirname, "../../../../testData/ontologies/"),
        expected: {
            "contexts": {
                "gpii-default": {
                    "name": "Default preferences",
                    "preferences": {
                        "http://registry.gpii.net/common/onScreenKeyboardEnabled": true,
                        "http://registry.gpii.net/common/initDelay": 0.120,
                        "http://registry.gpii.net/common/cursorSpeed": 0.850,
                        "http://registry.gpii.net/common/cursorAcceleration": 0.800,
                        "http://registry.gpii.net/common/mouseEmulationEnabled": true,
                        "http://registry.gpii.net/common/flatOnly": true,
                        "http://registry.gpii.net/common/fontSize": 24,
                        "http://registry.gpii.net/applications/org.alsa-project": {
                            "volume": 14
                        }
                    },
                    "metadata": [
                        {
                            "type": "required",
                            "scope": ["*"]
                        }, {
                            "type": "provenance",
                            "scope": ["http://registry\\.gpii\\.net/common/fontSize"],
                            "source": "snapshotter"
                        }
                    ]
                }
            }
        }
    }, {
        name: "GET: Retrieval of mixed NP set in flat (from multiple ontologies, multi context)",
        userToken: "np_mixed_multiContext",
        url: "%userToken?view=flat",
        ontologyDir: path.resolve(__dirname, "../../../../testData/ontologies/"),
        expected: {
            "contexts": {
                "gpii-default": {
                    "name": "Default preferences",
                    "preferences": {
                        "http://registry.gpii.net/common/initDelay": 0.120,
                        "http://registry.gpii.net/common/cursorSpeed": 0.850,
                        "http://registry.gpii.net/common/cursorAcceleration": 0.800,
                        "http://registry.gpii.net/common/mouseEmulationEnabled": true,
                        "http://registry.gpii.net/common/flatOnly": true,
                        "http://registry.gpii.net/common/onScreenKeyboardEnabled": true,
                        "http://registry.gpii.net/applications/org.alsa-project": {
                            "volume": 14,
                            "pitch": 100
                        },
                        "http://registry.gpii.net/applications/org.gnome.desktop.a11y.magnifier": {
                            "show-cross-hairs": true,
                            "lens-mode": false
                        }
                    },
                    "metadata": [
                        {
                            "type": "provenance",
                            "scope": ["http://registry\\.gpii\\.net/common/fontSize"],
                            "source": "snapshotter"
                        }
                    ]
                },
                "gpii-xyz1234": {
                    "name": "Nighttime at home",
                    "preferences": {
                        "http://registry.gpii.net/common/cursorSpeed": 1,
                        "http://registry.gpii.net/common/cursorAcceleration": 1
                    },
                    "conditions": [
                        {
                            "type": "http://registry.gpii.net/conditions/timeOfDay",
                            "range": {
                                "start": 1730,
                                "end": 730
                            }
                        }
                    ],
                    "priority": 100
                }
            },
            "metadata": [
                {
                    "type": "doNotShare",
                    "scope": [ "http://registry\\.gpii\\.net/common/fontSize"]
                }, {
                    "type": "doNotShare",
                    "scope": [ "http://registry\\.gpii\\.net/common/magnification"]
                }
            ]
        }
    }, {
        name: "GET: Retrieval of mixed NP set in ISO24751 (from multiple ontologies, multi context)",
        userToken: "np_mixed_multiContext",
        url: "%userToken?view=ISO24751",
        ontologyDir: path.resolve(__dirname, "../../../../testData/ontologies/"),
        expected: {
            "contexts": {
                "gpii-default": {
                    "name": "Default preferences",
                    "preferences": {
                        "control": {
                            "onscreenKeyboard": true,
                            "mouseEmulation": {
                                "cursorSpeed": 0.85,
                                "cursorAcceleration": 0.8,
                                "-provisional-initDelay": 0.12,
                                "-provisional-mouseEmulationEnabled": true
                            }
                        },
                        "applications": {
                            "org.alsa-project": {
                                "id": "org.alsa-project",
                                "parameters": {
                                    "volume": 14,
                                    "pitch": 100
                                }
                            },
                            "org.gnome.desktop.a11y.magnifier": {
                                "id": "org.gnome.desktop.a11y.magnifier",
                                "parameters": {
                                    "show-cross-hairs": true,
                                    "lens-mode": false
                                }
                            }
                        }
                    },
                    "metadata": [
                        {
                            "type": "provenance",
                            "scope": ["display.screenEnhancement.fontSize"],
                            "source": "snapshotter"
                        }
                    ]
                },
                "gpii-xyz1234": {
                    "name": "Nighttime at home",
                    "preferences": {
                        "control": {
                            "mouseEmulation": {
                                "cursorSpeed": 1,
                                "cursorAcceleration": 1
                            }
                        }
                    },
                    "conditions": [
                        {
                            "type": "http://registry.gpii.net/conditions/timeOfDay",
                            "range": {
                                "start": 1730,
                                "end": 730
                            }
                        }
                    ],
                    "priority": 100
                }
            },
            "metadata": [
                {
                    "type": "doNotShare",
                    "scope": [ "display.screenEnhancement.fontSize"]
                }, {
                    "type": "doNotShare",
                    "scope": [ "display.screenEnhancement.magnification"]
                }
            ]
        }
    }, {
        name: "GET: Basic retrieval of simple NP set in different ontology (with parameter)",
        userToken: "np_ISO24751Only_singleContext_wildcardMetadata",
        url: "%userToken?view=flat",
        expected: {
            "contexts": {
                "gpii-default": {
                    "name": "Default preferences",
                    "preferences": {
                        "http://registry.gpii.net/common/onScreenKeyboardEnabled": true,
                        "http://registry.gpii.net/common/initDelay": 0.120,
                        "http://registry.gpii.net/common/cursorSpeed": 0.850,
                        "http://registry.gpii.net/common/cursorAcceleration": 0.800,
                        "http://registry.gpii.net/common/mouseEmulationEnabled": true,
                        "http://registry.gpii.net/applications/org.alsa-project": {
                            "volume": 14,
                            "pitch": 100
                        }
                    },
                    "metadata": [{
                        "type": "provenance",
                        "scope": [
                            "http://registry\\.gpii\\.net/common/initDelay",
                            "http://registry\\.gpii\\.net/common/stickyKeys",
                            "http://registry\\.gpii\\.net/common/cursorSpeed",
                            "http://registry\\.gpii\\.net/common/slowKeysEnable",
                            "http://registry\\.gpii\\.net/common/debounceEnable",
                            "http://registry\\.gpii\\.net/common/hapticFeedback",
                            "http://registry\\.gpii\\.net/common/tableOfContents",
                            "http://registry\\.gpii\\.net/common/slowKeysInterval",
                            "http://registry\\.gpii\\.net/common/debounceInterval",
                            "http://registry\\.gpii\\.net/common/cursorAcceleration",
                            "http://registry\\.gpii\\.net/common/mouseEmulationEnabled",
                            "http://registry\\.gpii\\.net/common/onScreenKeyboardEnabled"
                        ],
                        "source": "snapshotter"
                    }]
                }
            },
            "metadata": [
                {
                    "type": "doNotShare",
                    "scope": [
                        "http://registry\\.gpii\\.net/common/fontSize",
                        "http://registry\\.gpii\\.net/common/tracking",
                        "http://registry\\.gpii\\.net/common/cursorSize",
                        "http://registry\\.gpii\\.net/common/trackingTTS",
                        "http://registry\\.gpii\\.net/common/invertImages",
                        "http://registry\\.gpii\\.net/common/magnification",
                        "http://registry\\.gpii\\.net/common/invertColours",
                        "http://registry\\.gpii\\.net/common/mouseTrailing",
                        "http://registry\\.gpii\\.net/common/foregroundColor",
                        "http://registry\\.gpii\\.net/common/backgroundColor",
                        "http://registry\\.gpii\\.net/common/fontFaceFontName",
                        "http://registry\\.gpii\\.net/common/magnifierEnabled",
                        "http://registry\\.gpii\\.net/common/magnifierPosition",
                        "http://registry\\.gpii\\.net/common/highContrastTheme",
                        "http://registry\\.gpii\\.net/common/highContrastEnabled",
                        "http://registry\\.gpii\\.net/common/fontFaceGenericFontFace"
                    ]
                }
            ]
        }
    }
];

fluid.each(getFixtures, function (fixture) {
    testDefs.push(gpii.preferencesServer.tests.get.buildTestDef(fixture));
});

// /////////////////////// TESTING preferencesServer POST functionality ////////////////////////////
fluid.registerNamespace("gpii.preferencesServer.tests.post");

gpii.preferencesServer.tests.post.testRequestResponse = function (prefs) {
    return function (data) {
        var retrievedData = JSON.parse(data);
        // expect preferences without ontology info - any generated user token is fine
        var expected = {
            preferences: prefs,
            userToken: retrievedData.userToken
        };

        jqUnit.assertDeepEq("Response from preferences server is as expected", expected, retrievedData);
    };
};

gpii.preferencesServer.tests.post.buildTestDef = function (fixture) {
    return {
        name: fixture.name,
        expect: 2,
        config: {
            configName: "standardConfig",
            configPath: configPath
        },
        listeners: {
            onDestroy: gpii.preferencesServer.tests.cleanUpTmpFiles
        },
        components: {
            postRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/preferences",
                    method: "POST",
                    port: 8081
                }
            }
        },
        sequence: [{
            func: "{postRequest}.send",
            args: fixture.postBody
        }, {
            event: "{postRequest}.events.onComplete",
            listenerMaker: "gpii.preferencesServer.tests.post.testRequestResponse",
            makerArgs: [ fixture.postBody ]
        }]
    };
};

var postFixtures = [
    {
        name: "POST: With no userToken specified and no ontology specified",
        url: "",
        postBody: {
            "contexts": {
                "gpii-default": {
                    "name": "Default preferences",
                    "preferences": {
                        "http://registry.gpii.net/common/onScreenKeyboardEnabled": true,
                        "http://registry.gpii.net/common/initDelay": 0.120,
                        "http://registry.gpii.net/common/cursorSpeed": 0.850,
                        "http://registry.gpii.net/common/cursorAcceleration": 0.800,
                        "http://registry.gpii.net/common/mouseEmulationEnabled": true,
                        "http://registry.gpii.net/common/unknown": true,
                        "http://registry.gpii.net/applications/org.alsa-project": {
                            "volume": 14,
                            "pitch": 100
                        }
                    },
                    "metadata": [
                        {
                            "type": "provenance",
                            "scope": ["http://registry.gpii.net/common/fontSize"],
                            "source": "snapshotter"
                        }
                    ]
                }
            }
        }
    }, {
        name: "POST: With no userToken specified and ontology specified",
        url: "?view=flat",
        postBody: {
            "contexts": {
                "gpii-default": {
                    "name": "Default preferences",
                    "preferences": {
                        "http://registry.gpii.net/common/onScreenKeyboardEnabled": true,
                        "http://registry.gpii.net/common/initDelay": 0.120,
                        "http://registry.gpii.net/common/cursorSpeed": 0.850,
                        "http://registry.gpii.net/common/cursorAcceleration": 0.800,
                        "http://registry.gpii.net/common/mouseEmulationEnabled": true,
                        "http://registry.gpii.net/common/unknown": true,
                        "http://registry.gpii.net/applications/org.alsa-project": {
                            "volume": 14,
                            "pitch": 100
                        }
                    },
                    "metadata": [
                        {
                            "type": "provenance",
                            "scope": ["http://registry.gpii.net/common/fontSize"],
                            "source": "snapshotter"
                        }
                    ]
                }
            }
        }
    }
];

fluid.each(postFixtures, function (fixture) {
    testDefs.push(gpii.preferencesServer.tests.post.buildTestDef(fixture));
});


/////////////////////// TESTING preferencesServer PUT functionality ////////////////////////////
fluid.registerNamespace("gpii.preferencesServer.tests.put");

gpii.preferencesServer.tests.put.testRequestResponse = function (prefs, userToken) {
    return function (data) {
        var retrievedData = JSON.parse(data);
        // expect preferences without ontology info - any generated user token is fine
        var expected = {
            preferences: prefs,
            userToken: userToken
        };

        jqUnit.assertDeepEq("Response from preferences server is as expected", expected, retrievedData);
    };
};

gpii.preferencesServer.tests.put.buildTestDef = function (fixture) {
    return {
        name: fixture.name,
        expect: 3,
        config: {
            configName: "standardConfig",
            configPath: configPath
        },
        listeners: {
            onDestroy: gpii.preferencesServer.tests.cleanUpTmpFiles
        },
        components: {
            putRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/preferences/%userToken" + (fixture.view ? "?view=" + fixture.view : ""),
                    method: "PUT",
                    port: 8081,
                    termMap: {
                        userToken: fixture.userToken
                    }
                }
            }
        },
        sequence: [{
            func: "gpii.preferencesServer.tests.put.copyNPSet",
            args: [ fixture.userToken, fixture.copyFromToken ]
        }, {
            func: "{putRequest}.send",
            args: fixture.putBody
        }, {
            event: "{putRequest}.events.onComplete",
            listenerMaker: "gpii.preferencesServer.tests.put.testRequestResponse",
            makerArgs: [ fixture.putBody, fixture.userToken ]
        }, {
            func: "gpii.preferencesServer.tests.put.checkRawPreferences",
            args: [ fixture.userToken, fixture.expectedRaw ]
        }]
    };
};

gpii.preferencesServer.tests.put.copyNPSet = function (toToken, fromToken) {
    if (!toToken) {
        return;
    }
    if (fromToken === undefined) { // if fromToken is undefined, it means we dont want to copy anything
        return;
    }
    var rawPrefs = fs.readFileSync(__dirname + "/data/" + fromToken + ".json");
    fs.writeFileSync(__dirname + "/data/" + toToken + ".json", rawPrefs);
};

gpii.preferencesServer.tests.put.checkRawPreferences = function (userToken, expectedRaw) {
    var rawPrefs;
    // var resolved = fluid.stringTemplate(that.options.ontologySourceList, { root: that.options.root });
    try {
        rawPrefs = fs.readFileSync(__dirname + "/data/" + userToken + ".json");
    } catch (e) {
        jqUnit.assertTrue("Failed to read the expected preferences set - error: " + e, false);
        return;
    }
    rawPrefs = JSON.parse(rawPrefs);
    jqUnit.assertDeepEq("Raw preferences saved to the NP set are as expected: ", expectedRaw, rawPrefs);
};

var putFixtures = [
    {
        name: "PUT: No view specified, ontology matching NP set",
        userToken: "put_test1",
        copyFromToken: "np_flatOnly_singleContext",
        view: undefined,
        putBody: {
            "contexts": {
                "gpii-default": {
                    "name": "Default preferences",
                    "preferences": {
                        "http://registry.gpii.net/common/onScreenKeyboardEnabled": false
                    },
                    "metadata": [
                        {
                            "type": "required",
                            "scope": ["*"]
                        }
                    ]
                }
            },
            "metadata": [
                {
                    "type": "doNotShare",
                    "scope": [ "http://registry\\.gpii\\.net/common/fontSize"]
                }
            ]
        },
        expectedRaw: {
            flat: {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/onScreenKeyboardEnabled": false
                        },
                        "metadata": [
                            {
                                "type": "required",
                                "scope": ["*"]
                            }
                        ]
                    }
                },
                "metadata": [
                    {
                        "type": "doNotShare",
                        "scope": [ "http://registry\\.gpii\\.net/common/fontSize"]
                    }
                ]
            }
        }
    }, {
        name: "PUT: To NP set containing same preference in different ontology",
        userToken: "put_test2",
        copyFromToken: "np_tiny",
        view: "ISO24751",
        putBody: {
            "contexts": {
                "gpii-default": {
                    "name": "Default preferences",
                    "preferences": {
                        "control": {
                            "onscreenKeyboard": false
                        }
                    }
                }
            }
        },
        expectedRaw: {
            "ISO24751": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "control": {
                                "onscreenKeyboard": false
                            }
                        }
                    }
                }
            },
            "flat": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences"
                    }
                }
            }
        }
    }, {
        name: "PUT: Overwriting one view and modifying another",
        userToken: "put_test3",
        copyFromToken: "np_mixed_singleContext",
        view: "ISO24751",
        putBody: {
            "contexts": {
                "gpii-default": {
                    "name": "Default preferences",
                    "preferences": {
                        "control": {
                            "mouseEmulation": {
                                "cursorSpeed": 1
                            }
                        }
                    }
                }
            }
        },
        expectedRaw: {
            "flat": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/onScreenKeyboardEnabled": true,
                            "http://registry.gpii.net/common/initDelay": 0.120,
                            "http://registry.gpii.net/common/cursorAcceleration": 0.800,
                            "http://registry.gpii.net/common/mouseEmulationEnabled": true,
                            "http://registry.gpii.net/common/flatOnly": true,
                            "http://registry.gpii.net/applications/org.alsa-project": {
                                "volume": 14
                            }
                        },
                        "metadata": [{
                            "type": "required",
                            "scope": ["*"]
                        }]
                    }
                }
            },
            "ISO24751": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "control": {
                                "mouseEmulation": {
                                    "cursorSpeed": 1
                                }
                            }
                        }
                    }
                }
            },
            "bogus": {
                "contexts": {
                    "gpii-default": {
                        "preferences": {
                            "foo": "bar"
                        }
                    }
                }
            }
        }
    }, {
        name: "PUT: Overwriting app specific block in one view with new ones from another view",
        userToken: "put_test4",
        copyFromToken: "np_mixed_singleContext",
        view: "ISO24751",
        putBody: {
            "contexts": {
                "gpii-default": {
                    "name": "Default preferences",
                    "preferences": {
                        "applications": {
                            "org.alsa-project": {
                                "parameters": {
                                    "bass": "damn loud"
                                }
                            }
                        }
                    }
                }
            }
        },
        expectedRaw: {
            "flat": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/onScreenKeyboardEnabled": true,
                            "http://registry.gpii.net/common/initDelay": 0.120,
                            "http://registry.gpii.net/common/cursorSpeed": 0.850,
                            "http://registry.gpii.net/common/cursorAcceleration": 0.800,
                            "http://registry.gpii.net/common/mouseEmulationEnabled": true,
                            "http://registry.gpii.net/common/flatOnly": true,
                            "http://registry.gpii.net/applications/org.alsa-project": {
                                "volume": 14
                            }
                        },
                        "metadata": [{
                            "type": "required",
                            "scope": ["*"]
                        }]
                    }
                }
            },
            "ISO24751": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "applications": {
                                "org.alsa-project": {
                                    "parameters": {
                                        "bass": "damn loud"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "bogus": {
                "contexts": {
                    "gpii-default": {
                        "preferences": {
                            "foo": "bar"
                        }
                    }
                }
            }
        }
    }, {
        name: "PUT: To a non-existing preferences set",
        userToken: "put_test5",
        copyFromToken: undefined,
        view: "flat",
        putBody: {
            "contexts": {
                "gpii-default": {
                    "name": "Default preferences",
                    "preferences": {
                        "http://registry.gpii.net/common/onScreenKeyboardEnabled": true
                    }
                }
            }
        },
        expectedRaw: {
            flat: {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/onScreenKeyboardEnabled": true
                        }
                    }
                }
            }
        }
    }, {
        name: "PUT: System shouldn't act crazy when saving with wildcard metadata",
        userToken: "put_test6",
        copyFromToken: "np_flatOnly_singleContext",
        view: "ISO24751",
        putBody: {
            "contexts": {
                "gpii-default": {
                    "name": "Default preferences",
                    "preferences": {
                        "control": {
                            "onscreenKeyboard": false
                        }
                    },
                    "metadata": [{
                        "type": "required",
                        "scope": ["control.*"]
                    }]
                }
            }
        },
        expectedRaw: {
            "flat": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/initDelay": 0.120,
                            "http://registry.gpii.net/common/cursorSpeed": 0.850,
                            "http://registry.gpii.net/common/cursorAcceleration": 0.800,
                            "http://registry.gpii.net/common/mouseEmulationEnabled": true,
                            "http://registry.gpii.net/common/unknown": true,
                            "http://registry.gpii.net/applications/org.alsa-project": {
                                "volume": 14,
                                "pitch": 100
                            }
                        },
                        "metadata": [
                            {
                                "type": "provenance",
                                "scope": ["http://registry\\.gpii\\.net/applications/org\\.alsa-project"],
                                "source": "snapshotter"
                            }, {
                                "type": "required",
                                "scope": ["*"]
                            }
                        ]
                    }
                },
                "metadata": [
                    {
                        "type": "doNotShare",
                        "scope": [ "http://registry\\.gpii\\.net/common/fontSize"]
                    }
                ]
            },
            "ISO24751": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "control": {
                                "onscreenKeyboard": false
                            }
                        },
                        "metadata": [{
                            "type": "required",
                            "scope": ["control.*"]
                        }]
                    }
                }
            }
        }
    }
];

fluid.each(putFixtures, function (fixture) {
    testDefs.push(gpii.preferencesServer.tests.put.buildTestDef(fixture));
});

////////////////// Tests for old preferences set style support //////////////////////////
fluid.registerNamespace("gpii.preferencesServer.tests.old");

gpii.preferencesServer.tests.old.testGetRequestResponse = function (expected) {
    return function (data) {
        var retrievedData = JSON.parse(data);
        console.log(JSON.stringify(retrievedData, null, 4));
        jqUnit.assertDeepEq("Response is correct", expected, retrievedData);
    };
};

gpii.preferencesServer.tests.old.buildGetTestDef = function (fixture) {
    return {
        name: fixture.name,
        expect: 1,
        config: {
            configName: "standardConfig",
            configPath: configPath
        },
        components: {
            getRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/oldPreferences/" + fixture.url,
                    method: "GET",
                    port: 8081,
                    termMap: {
                        userToken: fixture.userToken
                    }
                }
            }
        },
        sequence: [{
            func: "{getRequest}.send"
        }, {
            event: "{getRequest}.events.onComplete",
            listenerMaker: "gpii.preferencesServer.tests.old.testGetRequestResponse",
            makerArgs: [ fixture.expected ]
        }]
    };
};

var oldGetSupportFixtures = [
    {
        name: "GET: Basic retrieval of simple NP set in same ontology",
        userToken: "np_flatOnly_singleContext",
        url: "%userToken",
        expected: {
            "userToken": "np_flatOnly_singleContext",
            "preferences": {
                "http://registry.gpii.net/common/onScreenKeyboardEnabled": [{ value: true }],
                "http://registry.gpii.net/common/initDelay": [{ value: 0.120 }],
                "http://registry.gpii.net/common/cursorSpeed": [{ value: 0.850 }],
                "http://registry.gpii.net/common/cursorAcceleration": [{ value: 0.800 }],
                "http://registry.gpii.net/common/mouseEmulationEnabled": [{ value: true }],
                "http://registry.gpii.net/common/unknown": [{ value: true }],
                "http://registry.gpii.net/applications/org.alsa-project": [{ value: {
                    "volume": 14,
                    "pitch": 100
                }}]
            }
        }
    }, {
        name: "GET: Basic retrieval of simple NP set in different ontology",
        userToken: "np_ISO24751Only_singleContext",
        url: "%userToken",
        expected: {
            "userToken": "np_ISO24751Only_singleContext",
            "preferences": {
                "http://registry.gpii.net/common/onScreenKeyboardEnabled": [{ value: true }],
                "http://registry.gpii.net/common/initDelay": [{ value: 0.120 }],
                "http://registry.gpii.net/common/cursorSpeed": [{ value: 0.850 }],
                "http://registry.gpii.net/common/cursorAcceleration": [{ value: 0.800 }],
                "http://registry.gpii.net/common/mouseEmulationEnabled": [{ value: true }],
                "http://registry.gpii.net/applications/org.alsa-project": [{ value: {
                    "volume": 14,
                    "pitch": 100
                }}]
            }
        }
    }, {
        name: "GET: Retrieval of multi-context NP set",
        userToken: "np_flatOnly_multiContext",
        url: "%userToken",
        expected: {
            "userToken": "np_flatOnly_multiContext",
            "preferences": {
                "http://registry.gpii.net/common/cursorAcceleration": [{ value: 0.800 }],
                "http://registry.gpii.net/common/mouseEmulationEnabled": [{ value: true }],
                "http://registry.gpii.net/common/unknown": [{ value: true }],
                "http://registry.gpii.net/applications/org.alsa-project": [{ value: {
                    "volume": 14,
                    "pitch": 100
                }}]
            }
        }
    }
];

fluid.each(oldGetSupportFixtures, function (fixture) {
    testDefs.push(gpii.preferencesServer.tests.old.buildGetTestDef(fixture));
});

gpii.preferencesServer.tests.old.testPostRequestResponse = function (userToken, expectedRaw) {
    return function (data) {
        var retrievedData = JSON.parse(data);
        // if auto-generated user token, copy from return payload - this still ensures correct structure
        if (userToken === "") {
            userToken = retrievedData.userToken;
        }

        jqUnit.assertDeepEq("Response from old preferences server is as expected",
                { userToken: userToken }, retrievedData);
        gpii.preferencesServer.tests.put.checkRawPreferences(userToken, expectedRaw);

    };
};

gpii.preferencesServer.tests.old.buildPostTestDef = function (fixture) {
    return {
        name: fixture.name,
        expect: 3,
        config: {
            configName: "standardConfig",
            configPath: configPath
        },
        listeners: {
            onDestroy: gpii.preferencesServer.tests.cleanUpTmpFiles
        },
        components: {
            putRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/oldPreferences/%userToken",
                    method: "POST",
                    port: 8081,
                    termMap: {
                        userToken: fixture.userToken
                    }
                }
            }
        },
        sequence: [{
            func: "gpii.preferencesServer.tests.put.copyNPSet",
            args: [ fixture.userToken, fixture.copyFromToken ]
        }, {
            func: "{putRequest}.send",
            args: fixture.putBody
        }, {
            event: "{putRequest}.events.onComplete",
            listenerMaker: "gpii.preferencesServer.tests.old.testPostRequestResponse",
            makerArgs: [ fixture.userToken, fixture.expectedRaw ]
        }]
    };
};

var oldPostSupportFixtures = [
    {
        name: "POST: no user token given",
        userToken: "",
        copyFromToken: undefined,
        putBody: {
            "http://registry.gpii.net/common/onScreenKeyboardEnabled": [{ value: false }]
        },
        expectedRaw: {
            flat: {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/onScreenKeyboardEnabled": false
                        }
                    }
                }
            }
        }
    }, {
        name: "POST: user token given - prefs set doesn't exist",
        userToken: "old_post_test1",
        copyFromToken: undefined,
        putBody: {
            "http://registry.gpii.net/common/onScreenKeyboardEnabled": [{ value: false }]
        },
        expectedRaw: {
            flat: {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/onScreenKeyboardEnabled": false
                        }
                    }
                }
            }
        }
    }, {
        name: "POST: user token given - Overwriting existing NP set",
        userToken: "old_post_test2",
        copyFromToken: "np_mixed_multiContext",
        putBody: {
            "http://registry.gpii.net/common/onScreenKeyboardEnabled": [{ value: false }]
        },
        expectedRaw: {
            flat: {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/onScreenKeyboardEnabled": false
                        }
                    }
                }
            }
        }
    }
];

fluid.each(oldPostSupportFixtures, function (fixture) {
    testDefs.push(gpii.preferencesServer.tests.old.buildPostTestDef(fixture));
});

// =============== Rejected promise from rawPreferences server =========
fluid.defaults("gpii.preferencesServer.tests.rejectedPromise", {
    gradeNames: ["autoInit", "fluid.littleComponent"],
    invokers: {
        set: {
            funcName: "gpii.preferencesServer.tests.rejectedPromise.set"
        }
    }
});

gpii.preferencesServer.tests.rejectedPromise.set = function () {
    var promise = fluid.promise();
    promise.reject({
        isError: true,
        message: "this is a failure"
    });
    return promise;
};

gpii.preferencesServer.tests.testRejectedPromise = function (request) {
    return function (data) {
        data = JSON.parse(data);
        jqUnit.assertTrue("Received error as expected", data.isError);
        jqUnit.assertEquals("Received message as expected", "this is a failure", data.message);
        jqUnit.assertEquals("Received error code 500", 500, request.nativeResponse.statusCode);
    };
};

gpii.preferencesServer.tests.rejectedPromiseFixture = {
    name: "RawPreferencesDataSource promise rejection",
    expect: 3,
    config: {
        configName: "standardConfig",
        configPath: configPath
    },
    distributeOptions: {
        source: "{that}.options.rawPreferencesDataSourceGradeNames",
        target: "{that rawPreferencesDataSource}.options.gradeNames"
    },
    rawPreferencesDataSourceGradeNames: ["gpii.preferencesServer.tests.rejectedPromise"],
    components: {
        failRequest: {
            type: "kettle.test.request.http",
            options: {
                path: "/preferences",
                method: "POST"
            }
        }
    },
    sequence: [{
        func: "{failRequest}.send"
    }, {
        event: "{failRequest}.events.onComplete",
        listenerMaker: "gpii.preferencesServer.tests.testRejectedPromise",
        makerArgs: [ "{failRequest}" ]
    }]
};

testDefs.push(gpii.preferencesServer.tests.rejectedPromiseFixture);

module.exports = kettle.test.bootstrapServer(testDefs);
