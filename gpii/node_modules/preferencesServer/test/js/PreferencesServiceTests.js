/*!
Copyright 2017-2018 OCAD university

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

/* global fluid, jqUnit */

"use strict";

(function () {

    var gpii = fluid.registerNamespace("gpii");

    // The base test enviornment without any pouch data being imported
    fluid.defaults("gpii.tests.preferencesServer.preferencesService.testEnvironment", {
        gradeNames: ["gpii.tests.dbOperation.pouchBackedTestEnvironment"],
        // Use a module-relative path when https://issues.gpii.net/browse/GPII-3030 is addressed
        dbViewsLocation: "../../../../../testData/dbData/views.json",
        dbName: "gpii",
        components: {
            preferencesService: {
                type: "gpii.preferencesServer.preferencesService",
                createOnEvent: "onFixturesConstructed",
                options: {
                    gradeNames: ["gpii.tests.dbOperation.dbDataStore.base"],
                    dbViews: "{arguments}.0",
                    components: {
                        dataStore: {
                            type: "gpii.dbOperation.dbDataStore"
                        }
                    }
                }
            },
            caseHolder: {
                type: "gpii.tests.inBrowserPouchDB.baseTestCaseHolder"
            }
        }
    });

    // All input test data
    gpii.tests.preferencesServer.preferencesService.testData = {
        preferencesToCreate: {
            "http://registry.gpii.net/common/matchMakerType": "ruleBased",
            "http://registry.gpii.net/common/fontSize": 24
        },
        preferencesToUpdate: {
            "flat": {
                "contexts": {
                    "gpii-default": {
                        "name": "an updated name",
                        "preferences": {
                            "http://registry.gpii.net/common/fontSize": 20
                        }
                    }
                }
            },
            "newKey": {
                "nested": "nested-value"
            }
        }
    };

    // All expected results
    gpii.tests.preferencesServer.preferencesService.expected = {
        // for testing getPreferencesByGpiiKey()
        receivedPrefs: {
            "flat": {
                "name": "Default context",
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/matchMakerType": "ruleBased",
                            "http://registry.gpii.net/common/fontSize": 24,
                            "http://registry.gpii.net/common/foregroundColor": "white"
                        }
                    }
                }
            }
        },
        updatedPrefs: {
            "flat": {
                "name": "Default context",
                "contexts": {
                    "gpii-default": {
                        "name": "an updated name",
                        "preferences": {
                            "http://registry.gpii.net/common/fontSize": 20,
                            "http://registry.gpii.net/common/foregroundColor": "white",
                            "http://registry.gpii.net/common/matchMakerType": "ruleBased"
                        }
                    }
                }
            },
            "newKey": {
                "nested": "nested-value"
            }
        },
        unauthorized: {
            message: "Unauthorized",
            statusCode: 401,
            isError: true
        },
        missingGpiiKey: {
            message: "GPII key \"non-existent-gpii-key\" does not exist"
        },
        noUpdateOnSnapset: {
            message: "Cannot update:  GPII key \"snapset1\" is a snapset"
        },
        // for testing createPreferences()
        preferencesToCreate_prefsOnly: {
            prefsSafeType: "user",
            name: null,
            password: null,
            email: null,
            preferences: {
                "http://registry.gpii.net/common/cursorSize": 24
            }
        },
        gpiiKeyExisted: "GPII key \"alice_gpii_key\" already exists"
    };

    gpii.tests.preferencesServer.preferencesService.pouchData = [{
        "_id": "alice_gpii_key",
        "type": "gpiiKey",
        "schemaVersion": "0.1",
        "prefsSafeId": "prefsSafe-1",
        "prefsSetId": "gpii-default",
        "revoked": false,
        "revokedReason": null,
        "timestampCreated": "2017-11-21T18:11:22.101Z",
        "timestampUpdated": null
    }, {
        "_id": "bob_gpii_key",
        "type": "gpiiKey",
        "schemaVersion": "0.1",
        "prefsSafeId": null,
        "prefsSetId": null,
        "revoked": false,
        "revokedReason": null,
        "timestampCreated": "2017-11-21T18:11:22.101Z",
        "timestampUpdated": null
    }, {
        "_id": "snapset1",
        "type": "gpiiKey",
        "schemaVersion": "0.1",
        "prefsSafeId": "prefsSafe-snapset1",
        "prefsSetId": "gpii-default",
        "revoked": false,
        "revokedReason": null,
        "timestampCreated": "2017-11-21T18:11:22.101Z",
        "timestampUpdated": null
    }, {
        "_id": "prefsSafe-1",
        "type": "prefsSafe",
        "schemaVersion": "0.1",
        "prefsSafeType": "user",
        "name": null,
        "password": null,
        "email": null,
        "preferences": {
            "flat": {
                "name": "Default context",
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/matchMakerType": "ruleBased",
                            "http://registry.gpii.net/common/fontSize": 24,
                            "http://registry.gpii.net/common/foregroundColor": "white"
                        }
                    }
                }
            }
        },
        "timestampCreated": "2017-12-01T18:43:32.889Z",
        "timestampUpdated": null
    }, {
        "_id": "prefsSafe-snapset1",
        "type": "prefsSafe",
        "schemaVersion": "0.1",
        "prefsSafeType": "snapset",
        "name": null,
        "password": null,
        "email": null,
        "preferences": {
            "flat": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/foregroundColor": "white"
                        }
                    }
                }
            }
        },
        "timestampCreated": "2017-12-01T18:43:32.889Z",
        "timestampUpdated": null
    }];

    fluid.defaults("gpii.tests.preferencesServer.preferencesService.getPreferencesByGpiiKey", {
        gradeNames: ["gpii.tests.preferencesServer.preferencesService.testEnvironment"],
        pouchData: gpii.tests.preferencesServer.preferencesService.pouchData,
        rawModules: [{
            name: "Test getPreferencesByGpiiKey()",
            tests: [{
                name: "getPreferencesByGpiiKey() returns preferences - a successful workflow",
                sequence: [{
                    func: "gpii.tests.invokePromiseProducer",
                    args: ["{preferencesService}.getPreferencesByGpiiKey", ["alice_gpii_key"], "{that}"]
                }, {
                    listener: "jqUnit.assertDeepEq",
                    args: ["The access token should be received in an expected format", gpii.tests.preferencesServer.preferencesService.expected.receivedPrefs, "{arguments}.0"],
                    event: "{that}.events.onResponse"
                }]
            }, {
                name: "getPreferencesByGpiiKey() returns undefined when the GPII key has no preferences defined",
                sequence: [{
                    func: "gpii.tests.invokePromiseProducer",
                    args: ["{preferencesService}.getPreferencesByGpiiKey", ["bob_gpii_key"], "{that}"]
                }, {
                    listener: "jqUnit.assertUndefined",
                    args: ["undefined is returned when the gpii key has no preferences defined", "{arguments}.0"],
                    event: "{that}.events.onResponse"
                }]
            }, {
                name: "getPreferencesByGpiiKey() returns error when a gpii key is not provided in the argument list",
                sequence: [{
                    func: "gpii.tests.invokePromiseProducer",
                    args: ["{preferencesService}.getPreferencesByGpiiKey", ["non-existent-gpii-key"], "{that}"]
                }, {
                    listener: "jqUnit.assertDeepEq",
                    args: ["The error is returned when a gpii key is not found", gpii.tests.preferencesServer.preferencesService.expected.missingGpiiKey, "{arguments}.0"],
                    event: "{that}.events.onError"
                }]
            }]
        }]
    });

    fluid.defaults("gpii.tests.preferencesServer.preferencesService.createPreferences", {
        gradeNames: ["gpii.tests.preferencesServer.preferencesService.testEnvironment"],
        pouchData: gpii.tests.preferencesServer.preferencesService.pouchData,
        rawModules: [{
            name: "Test createPreferences()",
            tests: [{
                name: "createPreferences() creates a prefs safe and an auto generated GPII key - a successful workflow",
                sequence: [{
                    func: "gpii.tests.invokePromiseProducer",
                    args: ["{preferencesService}.createPreferences", [gpii.tests.preferencesServer.preferencesService.testData.preferencesToCreate], "{that}"]
                }, {
                    listener: "gpii.tests.invokePromiseProducer",
                    args: ["{preferencesService}.getPrefsSafeByGpiiKey", ["{arguments}.0.gpiiKey"], "{that}"],
                    event: "{that}.events.onResponse"
                }, {
                    listener: "gpii.tests.preferencesServer.preferencesService.verifyFetchedPrefsSafe",
                    args: [gpii.tests.preferencesServer.preferencesService.testData.preferencesToCreate, "{arguments}.0"],
                    event: "{that}.events.onResponse"
                }]
            }, {
                name: "createPreferences() creates a prefs safe and an GPII key with the provided key value - a successful workflow",
                sequence: [{
                    func: "gpii.tests.invokePromiseProducer",
                    args: ["{preferencesService}.createPreferences", [gpii.tests.preferencesServer.preferencesService.testData.preferencesToCreate, "a-new-gpii-key-by-preferences-service"], "{that}"]
                }, {
                    listener: "gpii.tests.invokePromiseProducer",
                    args: ["{preferencesService}.getPrefsSafeByGpiiKey", ["{arguments}.0.gpiiKey"], "{that}"],
                    event: "{that}.events.onResponse"
                }, {
                    listener: "gpii.tests.preferencesServer.preferencesService.verifyFetchedPrefsSafe",
                    args: [gpii.tests.preferencesServer.preferencesService.testData.preferencesToCreate, "{arguments}.0", "a-new-gpii-key-by-preferences-service"],
                    event: "{that}.events.onResponse"
                }]
            }, {
                name: "createPreferences() returns error when the provided GPII key already exists",
                sequence: [{
                    func: "gpii.tests.invokePromiseProducer",
                    args: ["{preferencesService}.createPreferences", [gpii.tests.preferencesServer.preferencesService.testData.preferencesToCreate, "alice_gpii_key"], "{that}"]
                }, {
                    listener: "jqUnit.assertDeepEq",
                    args: ["The error is returned when the provided GPII key already exists", gpii.tests.preferencesServer.preferencesService.expected.gpiiKeyExisted, "{arguments}.0"],
                    event: "{that}.events.onError"
                }]
            }]
        }]
    });

    gpii.tests.preferencesServer.preferencesService.verifyFetchedPrefsSafe = function (preferencesToCreate, response, expectedGpiiKey) {
        if (expectedGpiiKey) {
            jqUnit.assertEquals("The created GPII key matches the input GPII key", expectedGpiiKey, response.gpiiKey);
            jqUnit.assertEquals("The GPII key in the key record matches the input GPII key", expectedGpiiKey, response.gpiiKeyDetails.id);
        } else {
            jqUnit.assertNotUndefined("The GPII key is auto generated", response.gpiiKey);
        }

        var gpiiKeyDetails = response.gpiiKeyDetails;
        jqUnit.assertEquals("The value of \"schemaVersion\" has been set correctly", gpii.dbOperation.schemaVersion, gpiiKeyDetails.schemaVersion);
        jqUnit.assertNotUndefined("The value of \"prefsSafeId\" has been set to default", gpiiKeyDetails.prefsSafeId);
        jqUnit.assertEquals("The value of \"prefsSetId\" has been set to default", gpii.preferencesServer.defaultPrefsSetId, gpiiKeyDetails.prefsSetId);
        jqUnit.assertFalse("The value of \"revoked\" has been set to false", gpiiKeyDetails.revoked);
        jqUnit.assertNull("The value of \"revokedReason\" has been set to null", gpiiKeyDetails.revokedReason);
        jqUnit.assertNotUndefined("The value of \"timestampCreated\" has been set", gpiiKeyDetails.timestampCreated);
        jqUnit.assertNull("The value of \"timestampUpdated\" has been set", gpiiKeyDetails.timestampUpdated);

        var prefsSafe = response.prefsSafe;
        jqUnit.assertLeftHand("The data is saved successfully", preferencesToCreate, prefsSafe.preferences);
    };

    fluid.defaults("gpii.tests.preferencesServer.preferencesService.updatePreferences", {
        gradeNames: ["gpii.tests.preferencesServer.preferencesService.testEnvironment"],
        pouchData: gpii.tests.preferencesServer.preferencesService.pouchData,
        rawModules: [{
            name: "Test updatePreferences()",
            tests: [{
                name: "updatePreferences() updates the associated prefs safe with merged preferences - a successful workflow",
                sequence: [{
                    func: "gpii.tests.invokePromiseProducer",
                    args: ["{preferencesService}.getPrefsSafeByGpiiKey", ["alice_gpii_key"], "{that}"]
                }, {
                    // save the original GPII key and prefs safe records to compare after the update
                    listener: "fluid.set",
                    args: ["{that}", ["originalData"], "{arguments}.0"],
                    event: "{that}.events.onResponse"
                }, {
                    func: "gpii.tests.invokePromiseProducer",
                    args: ["{preferencesService}.updatePreferences", [gpii.tests.preferencesServer.preferencesService.testData.preferencesToUpdate, "alice_gpii_key", true], "{that}"]
                }, {
                    listener: "gpii.tests.invokePromiseProducer",
                    args: ["{preferencesService}.getPrefsSafeByGpiiKey", ["{arguments}.0.gpiiKey"], "{that}"],
                    event: "{that}.events.onResponse"
                }, {
                    listener: "gpii.tests.preferencesServer.preferencesService.verifyUpdatedPrefsSafe",
                    args: ["{that}", gpii.tests.preferencesServer.preferencesService.expected.updatedPrefs, "alice_gpii_key", "{arguments}.0"],
                    event: "{that}.events.onResponse"
                }]
            }, {
                name: "updatePreferences() updates the associated prefs safe without merging with existing preferences - a successful workflow",
                sequence: [{
                    func: "gpii.tests.invokePromiseProducer",
                    args: ["{preferencesService}.getPrefsSafeByGpiiKey", ["alice_gpii_key"], "{that}"]
                }, {
                    // save the original GPII key and prefs safe records to compare after the update
                    listener: "fluid.set",
                    args: ["{that}", ["originalData"], "{arguments}.0"],
                    event: "{that}.events.onResponse"
                }, {
                    func: "gpii.tests.invokePromiseProducer",
                    args: ["{preferencesService}.updatePreferences", [gpii.tests.preferencesServer.preferencesService.testData.preferencesToUpdate, "alice_gpii_key"], "{that}"]
                }, {
                    listener: "gpii.tests.invokePromiseProducer",
                    args: ["{preferencesService}.getPrefsSafeByGpiiKey", ["{arguments}.0.gpiiKey"], "{that}"],
                    event: "{that}.events.onResponse"
                }, {
                    listener: "gpii.tests.preferencesServer.preferencesService.verifyUpdatedPrefsSafe",
                    args: ["{that}", gpii.tests.preferencesServer.preferencesService.testData.preferencesToUpdate, "alice_gpii_key", "{arguments}.0"],
                    event: "{that}.events.onResponse"
                }]
            }, {
                name: "updatePreferences() creates a new prefs safe when the GPII key is not associates with a prefs safe - a successful workflow",
                sequence: [{
                    func: "gpii.tests.invokePromiseProducer",
                    args: ["{preferencesService}.getPrefsSafeByGpiiKey", ["bob_gpii_key"], "{that}"]
                }, {
                    // save the original GPII key and prefs safe records to compare after the update
                    listener: "fluid.set",
                    args: ["{that}", ["originalData"], "{arguments}.0"],
                    event: "{that}.events.onResponse"
                }, {
                    func: "gpii.tests.invokePromiseProducer",
                    args: ["{preferencesService}.updatePreferences", [gpii.tests.preferencesServer.preferencesService.testData.preferencesToUpdate, "bob_gpii_key"], "{that}"]
                }, {
                    listener: "gpii.tests.invokePromiseProducer",
                    args: ["{preferencesService}.getPrefsSafeByGpiiKey", ["{arguments}.0.gpiiKey"], "{that}"],
                    event: "{that}.events.onResponse"
                }, {
                    listener: "gpii.tests.preferencesServer.preferencesService.verifyNewPrefsSafeForUpdate",
                    args: ["{that}", gpii.tests.preferencesServer.preferencesService.testData.preferencesToUpdate, "bob_gpii_key", "{arguments}.0"],
                    event: "{that}.events.onResponse"
                }]
            }, {
                name: "updatePreferences() returns error when updating a snapset",
                sequence: [{
                    func: "gpii.tests.invokePromiseProducer",
                    args: ["{preferencesService}.updatePreferences", [gpii.tests.preferencesServer.preferencesService.testData.preferencesToUpdate, "snapset1"], "{that}"]
                }, {
                    listener: "jqUnit.assertDeepEq",
                    args: ["The error is returned when updating a snapset", gpii.tests.preferencesServer.preferencesService.expected.noUpdateOnSnapset, "{arguments}.0"],
                    event: "{that}.events.onError"
                }]
            }]
        }]
    });

    gpii.tests.preferencesServer.preferencesService.verifyUpdatedPrefsSafe = function (that, updatedPreferences, gpiiKey, response) {
        jqUnit.assertDeepEq("The GPII key in the response is expected", gpiiKey, response.gpiiKey);
        jqUnit.assertDeepEq("The GPII key record is unchanged", that.originalData.gpiiKeyDetails, response.gpiiKeyDetails);
        jqUnit.assertDeepEq("The preferences has been updated", updatedPreferences, response.prefsSafe.preferences);
        jqUnit.assertNotEquals("The prefs safe timestampUpdated has been updated", that.originalData.prefsSafe.timestampUpdated, response.prefsSafe.timestampUpdated);

        var unchangedOrigPrefsSafeFields = fluid.censorKeys(that.originalData.prefsSafe, ["preferences", "timestampUpdated"]);
        var unchangedPrefsSafeFields = fluid.censorKeys(response.prefsSafe, ["preferences", "timestampUpdated"]);
        jqUnit.assertDeepEq("Other prefs safe values are unchanged", unchangedOrigPrefsSafeFields, unchangedPrefsSafeFields);
    };

    gpii.tests.preferencesServer.preferencesService.verifyNewPrefsSafeForUpdate = function (that, updatedPreferences, gpiiKey, response) {
        // verify before update status
        jqUnit.assertNull("The GPII key originally has no prefs safe associated", that.originalData.gpiiKeyDetails.prefsSafeId);

        // verify after update status
        jqUnit.assertDeepEq("The GPII key in the response is expected", gpiiKey, response.gpiiKey);
        jqUnit.assertNotUndefined("A prefs safe has been created", response.prefsSafe);
        jqUnit.assertNull("The timestampUpdated of the prefs safe is null", response.prefsSafe.timestampUpdated);
        jqUnit.assertDeepEq("The preferences in the prefs safe is expected", updatedPreferences, response.prefsSafe.preferences);
        jqUnit.assertEquals("The prefs safe has been associated with the GPII key", response.gpiiKeyDetails.prefsSafeId, response.prefsSafe.id);

        var unchangedOrigGpiiKeyFields = fluid.censorKeys(that.originalData.gpiiKeyDetails, ["prefsSafeId", "prefsSetId", "timestampUpdated"]);
        var unchangedGpiiKeyFields = fluid.censorKeys(response.gpiiKeyDetails, ["prefsSafeId", "prefsSetId", "timestampUpdated"]);
        jqUnit.assertDeepEq("Other GPII key values are unchanged", unchangedOrigGpiiKeyFields, unchangedGpiiKeyFields);
    };
})();
