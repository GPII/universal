/**
GPII Preferences Server Tests

Copyright 2018 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

The research leading to these results has received funding from the European Union's
Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 289016.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    jqUnit = fluid.require("node-jqunit", require, "jqUnit"),
    gpii = fluid.registerNamespace("gpii");

require("./preferencesServerTestsUtils.js");
require("./preferencesServerTests.js");

fluid.require("%gpii-universal");
gpii.loadTestingSupport();

fluid.registerNamespace("gpii.tests.preferencesServer.cloudSafeCred");

gpii.tests.preferencesServer.config = {
    configName: "gpii.tests.preferencesServer.config",
    configPath: "%preferencesServer/test/configs"
};

/////////////// TEST Creating a Cloud Safe Login /////////////////
//
// Steps 1: Send the POST to create a cloudSafeCred for an existing prefset
// Step 2: Verify that the Cloud Safe Cred Document is correct
// Step 3: Verify that the gpii-express-user document is correct
// Step 4: Verify that this is included in the list keys endpoint
// Step 5: Verify that this is included in the prefsSafe with keys endpoint
fluid.registerNamespace("gpii.tests.preferencesServer.cloudSafeCred.put");

/*
 * Test response payload against a subset of a gpiiCloudSafeCred document.
 */
gpii.tests.preferencesServer.cloudSafeCred.testCloudSafeCreatePut = function (cloudCredSubset, response) {
    var data = JSON.parse(response);
    jqUnit.assertLeftHand("Returned cred document should have the following: ", cloudCredSubset, data);
};

/*
 * Check and see if the prefs safe that came back has our new credentials doc.
 */
gpii.tests.preferencesServer.cloudSafeCred.testCloudSafeCred = function (response /*, expected, receivedStatusCode, expectedStatusCode */) {
    var data = JSON.parse(response);
    jqUnit.assertEquals("There should be a prefsSafe", data.prefsSafe.type, "prefsSafe");
    var keyTypes = fluid.getMembers(data.keys, "type");
    jqUnit.assertTrue("There should be a cloud cred", fluid.contains(keyTypes, "gpiiCloudSafeCredential"));
    jqUnit.assertTrue("There should be a gpii key", fluid.contains(keyTypes, "gpiiKey"));
};

gpii.tests.preferencesServer.cloudSafeCred.put.buildSuccessTestDef = function (fixture) {
    var expectedStatusCode = fixture.expectedStatusCode || 200;
    return {
        name: fixture.name,
        config: gpii.tests.preferencesServer.config,
        components: {
            putCloudCred: {
                type: "kettle.test.request.http",
                options: {
                    path: "/add-cloud-credentials/" + fixture.url,
                    method: "PUT",
                    port: 8081,
                    termMap: {
                        prefsSafeId: fixture.prefsSafeId
                    }
                }
            },
            getFullSafe: {
                type: "kettle.test.request.http",
                options: {
                    path: "/prefsSafe-with-keys/" + fixture.url,
                    method: "GET",
                    port: 8081,
                    termMap: {
                        prefsSafeId: fixture.prefsSafeId
                    }
                }
            },
            unlockCloudSafe: {
                type: "kettle.test.request.http",
                options: {
                    path: "/unlock-cloud-safe",
                    method: "POST",
                    port: 8081
                }
            }
        },
        sequence: [{
            func: "{putCloudCred}.send",
            args: fixture.putCloudCredBody
        }, {
            event: "{putCloudCred}.events.onComplete",
            listener: "gpii.tests.preferencesServer.cloudSafeCred.testCloudSafeCreatePut",
            args: [fixture.cloudCredSubset, "{arguments}.0"]
        }, {
            func: "{getFullSafe}.send"
        }, {
            event: "{getFullSafe}.events.onComplete",
            listener: "gpii.tests.preferencesServer.cloudSafeCred.testCloudSafeCred",
            args: ["{arguments}.0", fixture.getCloudCredFullSafeExpected, "{getFullSafe}.nativeResponse.statusCode", expectedStatusCode]
        }, {
            func: "{unlockCloudSafe}.send",
            args: fixture.unlockCloudSafePost
        }, {
            event: "{unlockCloudSafe}.events.onComplete",
            listener: "gpii.tests.preferencesServer.testResponse",
            args: ["{arguments}.0", fixture.unlockCloudSafeExpected, "{unlockCloudSafe}.nativeResponse.statusCode", expectedStatusCode]
        }]
    };
};

gpii.tests.preferencesServer.cloudSafeCred.put.successFixtures = [
    {
        name: "PUT: Add a cloudsafe credential to an existing prefsSafe",
        prefsSafeId: "prefsSafe-1",
        url: "%prefsSafeId",
        putCloudCredBody: {
            username: "prefsTestUsername",
            password: "testPassword"
        },
        cloudCredSubset: {
            type: "gpiiCloudSafeCredential",
            prefsSafeId: "prefsSafe-1",
            gpiiExpressUserId: "org.couch.db.user:prefsTestUsername"
        },
        unlockCloudSafePost: {
            username: "prefsTestUsername",
            password: "testPassword"
        },
        unlockCloudSafeExpected: {
            "type": "prefsSafe",
            "schemaVersion": "0.3",
            "prefsSafeType": "user",
            "name": null,
            "email": null,
            "preferences": {
                "ISO24751": {
                    "name": "ISO24751 set",
                    "contexts": {
                        "gpii-default": {
                            "name": "Default preferences",
                            "preferences": {
                                "control": {
                                    "onscreenKeyboard": true,
                                    "mouseEmulation": {
                                        "-provisional-initDelay": 120,
                                        "cursorSpeed": 0.850,
                                        "-provisional-mouseEmulation/enabled": true
                                    }
                                },
                                "unknown": true,
                                "applications": {
                                    "org.alsa-project": {
                                        "id": "org.alsa-project",
                                        "parameters": {
                                            "masterVolume": 14
                                        }
                                    }
                                }
                            },
                            "metadata": [
                                {
                                    "type": "provenance",
                                    "scope": ["applications.org\\.alsa-project.parameters"],
                                    "source": "snapshotter"
                                }
                            ]
                        }
                    },
                    "metadata": [
                        {
                            "type": "doNotShare",
                            "scope": [ "display.screenEnhancement.fontSize"]
                        }
                    ]
                }
            },
            "timestampCreated": "2017-12-14T19:55:11.640Z",
            "timestampUpdated": null,
            "id": "prefsSafe-1"
        }
    }
];

gpii.tests.preferencesServer.cloudSafeCred.put.buildFailureTestDef = function (fixture) {
    return {
        name: fixture.name,
        config: gpii.tests.preferencesServer.config,
        components: {
            putCloudCred: {
                type: "kettle.test.request.http",
                options: {
                    path: "/add-cloud-credentials/" + fixture.url,
                    method: "PUT",
                    port: 8081,
                    termMap: {
                        prefsSafeId: fixture.prefsSafeId
                    }
                }
            }
        },
        sequence: [{
            func: "{putCloudCred}.send",
            args: fixture.putCloudCredBody
        }, {
            event: "{putCloudCred}.events.onComplete",
            listener: "gpii.tests.preferencesServer.testResponse",
            args: ["{arguments}.0", fixture.failedCreateExpected, "{putCloudCred}.nativeResponse.statusCode", fixture.expectedStatusCode]
        }]
    };
};

gpii.tests.preferencesServer.cloudSafeCred.put.failureFixtures = [
    {
        name: "Unsuccessful PUT: Cannot add a cloudSafe credential to a safe that doesn't exist",
        expectedStatusCode: 404,
        prefsSafeId: "prefsSafe-1000",
        url: "%prefsSafeId",
        putCloudCredBody: {
            username: "prefsTestUsername",
            password: "testPassword"
        },
        failedCreateExpected: {
            isError: true,
            errorCode: "GPII_ERR_NO_PREFSSAFE",
            message: "Missing prefsSafe"
        }
    },
    {
        name: "Unsuccessful PUT: Cannot add a cloudSafe credential with an existing name",
        expectedStatusCode: 404,
        prefsSafeId: "prefsSafe-1",
        url: "%prefsSafeId",
        putCloudCredBody: {
            username: "prefs7user",
            password: "testPassword"
        },
        failedCreateExpected: {
            "isError": true,
            "message": "Unable to create credentials with this username and password combination",
            "errorCode": "GPII_ERR_CREATE_CRED_BAD_USERNAME_PASSWORD"
        }
    },
    {
        name: "Unsuccessful PUT: Missing username",
        expectedStatusCode: 404,
        prefsSafeId: "prefsSafe-1",
        url: "%prefsSafeId",
        putCloudCredBody: {
            password: "testPassword"
        },
        failedCreateExpected: {
            "isError": true,
            "message": "Unable to create credentials with this username and password combination",
            "errorCode": "GPII_ERR_CREATE_CRED_BAD_USERNAME_PASSWORD"
        }
    },
    {
        name: "Unsuccessful PUT: Missing password",
        expectedStatusCode: 404,
        prefsSafeId: "prefsSafe-1",
        url: "%prefsSafeId",
        putCloudCredBody: {
            username: "spectacularUsername"
        },
        failedCreateExpected: {
            "isError": true,
            "message": "Unable to create credentials with this username and password combination",
            "errorCode": "GPII_ERR_CREATE_CRED_BAD_USERNAME_PASSWORD"
        }
    },
    {
        name: "Unsuccessful PUT: Empty password",
        expectedStatusCode: 404,
        prefsSafeId: "prefsSafe-1",
        url: "%prefsSafeId",
        putCloudCredBody: {
            username: "spectacularUsername",
            password: ""
        },
        failedCreateExpected: {
            "isError": true,
            "message": "Unable to create credentials with this username and password combination",
            "errorCode": "GPII_ERR_CREATE_CRED_BAD_USERNAME_PASSWORD"
        }
    },
    {
        name: "Unsuccessful PUT: Empty username",
        expectedStatusCode: 404,
        prefsSafeId: "prefsSafe-1",
        url: "%prefsSafeId",
        putCloudCredBody: {
            username: "",
            password: "s3cret"
        },
        failedCreateExpected: {
            "isError": true,
            "message": "Unable to create credentials with this username and password combination",
            "errorCode": "GPII_ERR_CREATE_CRED_BAD_USERNAME_PASSWORD"
        }
    }
];

/////////////// TEST Unlocking a Prefs Safe using a Cloud Safe Login  /////////////
fluid.registerNamespace("gpii.tests.preferencesServer.cloudSafeCred.unlock");

gpii.tests.preferencesServer.cloudSafeCred.unlock.buildSuccessTestDef = function (fixture) {
    var expectedStatusCode = fixture.expectedStatusCode || 200;
    return {
        name: fixture.name,
        expect: 2,
        config: gpii.tests.preferencesServer.config,
        components: {
            unlockCloudSafe: {
                type: "kettle.test.request.http",
                options: {
                    path: "/unlock-cloud-safe",
                    method: "POST",
                    port: 8081
                }
            }
        },
        sequence: [{
            func: "{unlockCloudSafe}.send",
            args: fixture.unlockCloudSafePost
        }, {
            event: "{unlockCloudSafe}.events.onComplete",
            listener: "gpii.tests.preferencesServer.testResponse",
            args: ["{arguments}.0", fixture.unlockCloudSafeExpected, "{unlockCloudSafe}.nativeResponse.statusCode", expectedStatusCode]
        }]
    };
};

gpii.tests.preferencesServer.cloudSafeCred.unlock.successFixtures = [
    {
        name: "POST: Unlock Prefs Safe 7 using it's attached credentials",
        unlockCloudSafePost: {
            username: "prefs7user",
            password: "testPassword"
        },
        unlockCloudSafeExpected: {
            "id": "prefsSafe-7",
            "type": "prefsSafe",
            "schemaVersion": "0.3",
            "prefsSafeType": "user",
            "name": null,
            "email": null,
            "preferences": {
                "flat": {
                    "name": "bit of stuff",
                    "contexts": {
                        "gpii-default": {
                            "name": "Default preferences",
                            "preferences": {
                                "http://registry.gpii.net/common/onScreenKeyboard/enabled": true
                            },
                            "metadata": []
                        }
                    },
                    "metadata": []
                }
            },
            "timestampCreated": "2017-12-14T19:55:11.641Z",
            "timestampUpdated": null
        }
    },
    {
        name: "POST: Fail to Unlock Prefs Safe 7 using bad credentials",
        expectedStatusCode: 401,
        unlockCloudSafePost: {
            username: "prefs7user",
            password: "notThePassword"
        },
        unlockCloudSafeExpected: {
            "isError": true,
            "message": "Unable to unlock Preferences Safe with the supplied credentials.",
            "errorCode": "GPII_ERR_UNLOCKING_PREFSSAFE_CREDENTIALS"
        }
    }
];

/////////////// Test Aggregation and Setup below ///////////////
gpii.tests.preferencesServer.cloudSafeCred.testMap = [ {
    build: gpii.tests.preferencesServer.cloudSafeCred.put.buildSuccessTestDef,
    fixtures: gpii.tests.preferencesServer.cloudSafeCred.put.successFixtures
}, {
    build: gpii.tests.preferencesServer.cloudSafeCred.unlock.buildSuccessTestDef,
    fixtures: gpii.tests.preferencesServer.cloudSafeCred.unlock.successFixtures
}, {
    build: gpii.tests.preferencesServer.cloudSafeCred.put.buildFailureTestDef,
    fixtures: gpii.tests.preferencesServer.cloudSafeCred.put.failureFixtures
}];

fluid.defaults("gpii.tests.preferencesServer.cloudSafeCred.testEnvironment", {
    gradeNames: ["gpii.test.couchdb.environment.base", "gpii.test.serverEnvironment"],
    databases: {
        gpii: {
            data: [
                "%gpii-universal/gpii/node_modules/preferencesServer/test/data/gpiiKeys.json",
                "%gpii-universal/gpii/node_modules/preferencesServer/test/data/prefsSafes.json",
                "%gpii-universal/gpii/node_modules/preferencesServer/test/data/gpiiCloudSafeCred.json",
                "%gpii-universal/testData/dbData/views.json"
            ]
        }
    }
});

gpii.tests.preferencesServer.cloudSafeCred.testDefs = fluid.flatten(fluid.transform(gpii.tests.preferencesServer.cloudSafeCred.testMap, function (mapEl) {
    return fluid.transform(mapEl.fixtures, mapEl.build, function (fixture) {
        var common = {
            config: gpii.tests.preferencesServer.config
        };

        return fluid.extend({}, common, fixture);
    });
}));

gpii.tests.preferencesServer.cloudSafeCred.testDefToEnvironment = function (testDef) {
    return gpii.test.testDefToEnvironment(testDef, "gpii.tests.preferencesServer.cloudSafeCred.testEnvironment", "gpii.test.couchSequenceGrade");
};

gpii.test.runTestDefs(gpii.tests.preferencesServer.cloudSafeCred.testDefs, gpii.tests.preferencesServer.cloudSafeCred.testDefToEnvironment);
