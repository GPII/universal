/**
GPII Preferences Server Tests

Copyright 2018 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

The research leading to these results has received funding from the European Union's
Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 289016.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

require("./preferencesServerTestsUtils.js");
require("./preferencesServerTests.js");

fluid.require("%gpii-universal");
gpii.loadTestingSupport();

fluid.registerNamespace("gpii.tests.preferencesServer.prefsSafes");

gpii.tests.preferencesServer.config = {
    configName: "gpii.tests.preferencesServer.config",
    configPath: "%preferencesServer/test/configs"
};

/////////////////////// TESTING prefsSafes GET /prefsafe/:prefsSafeId ////////////////////////////
fluid.registerNamespace("gpii.tests.preferencesServer.prefsSafes.get");

gpii.tests.preferencesServer.prefsSafes.get.buildTestDef = function (fixture) {
    var expectedStatusCode = fixture.expectedStatusCode || 200;
    return {
        name: fixture.name,
        expect: 2,
        components: {
            getRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/prefsSafe/" + fixture.url,
                    method: "GET",
                    port: 8081,
                    termMap: {
                        prefsSafeId: fixture.prefsSafeId
                    }
                }
            }
        },
        sequence: [{
            func: "{getRequest}.send"
        }, {
            event: "{getRequest}.events.onComplete",
            listener: "gpii.tests.preferencesServer.testResponse",
            args: ["{arguments}.0", fixture.expected, "{getRequest}.nativeResponse.statusCode", expectedStatusCode]
        }]
    };
};

gpii.tests.preferencesServer.prefsSafes.get.successFixtures = [
    {
        name: "GET: Basic retrieval of a prefs safe",
        prefsSafeId: "prefsSafe-7",
        url: "%prefsSafeId",
        expected: {
            "id": "prefsSafe-7",
            "type": "prefsSafe",
            "schemaVersion": "0.3",
            "prefsSafeType": "user",
            "name": null,
            "email": null,
            "preferences": {
                "flat": {
                    "name": "bit of stuff",
                    "contexts": {
                        "gpii-default": {
                            "name": "Default preferences",
                            "preferences": {
                                "http://registry.gpii.net/common/onScreenKeyboard/enabled": true
                            },
                            "metadata": []
                        }
                    },
                    "metadata": []
                }
            },
            "timestampCreated": "2017-12-14T19:55:11.641Z",
            "timestampUpdated": null
        }
    }
];

gpii.tests.preferencesServer.prefsSafes.get.failFixtures = [
    {
        name: "GET error: Fetching a safe that does not exist returns an error payload.",
        prefsSafeId: "prefsSafe-2999",
        url: "%prefsSafeId",
        expectedStatusCode: 404,
        expected: {
            "isError": true,
            "errorCode": "GPII_ERR_NO_PREFSSAFE",
            "message": "Missing prefsSafe"
        }
    }
];

/////////////////////// TESTING prefsSafes with keys GET ////////////////////////////
fluid.registerNamespace("gpii.tests.preferencesServer.prefsSafes.getSafeWithKeys");

gpii.tests.preferencesServer.prefsSafes.getSafeWithKeys.buildTestDef = function (fixture) {
    var expectedStatusCode = fixture.expectedStatusCode || 200;
    return {
        name: fixture.name,
        expect: 2,
        components: {
            getRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/prefsSafe-with-keys/" + fixture.url,
                    method: "GET",
                    port: 8081,
                    termMap: {
                        prefsSafeId: fixture.prefsSafeId
                    }
                }
            }
        },
        sequence: [{
            func: "{getRequest}.send"
        }, {
            event: "{getRequest}.events.onComplete",
            listener: "gpii.tests.preferencesServer.testResponse",
            args: ["{arguments}.0", fixture.expected, "{getRequest}.nativeResponse.statusCode", expectedStatusCode]
        }]
    };
};

gpii.tests.preferencesServer.prefsSafes.getSafeWithKeys.successFixtures = [
    {
        name: "GET: Retieve a payload containing the prefs-safes and all it's associated key/credential records",
        prefsSafeId: "prefsSafe-7",
        url: "%prefsSafeId",
        expected: {
            prefsSafe: {
                "id": "prefsSafe-7",
                "type": "prefsSafe",
                "schemaVersion": "0.3",
                "prefsSafeType": "user",
                "name": null,
                "email": null,
                "preferences": {
                    "flat": {
                        "name": "bit of stuff",
                        "contexts": {
                            "gpii-default": {
                                "name": "Default preferences",
                                "preferences": {
                                    "http://registry.gpii.net/common/onScreenKeyboard/enabled": true
                                },
                                "metadata": []
                            }
                        },
                        "metadata": []
                    }
                },
                "timestampCreated": "2017-12-14T19:55:11.641Z",
                "timestampUpdated": null
            },
            keys: [
                {
                    "type": "gpiiCloudSafeCredential",
                    "schemaVersion": "0.3",
                    "prefsSafeId": "prefsSafe-7",
                    "gpiiExpressUserId": "org.couch.db.user:prefs7user",
                    "id": "8f3085a7-b65b-4648-9a78-8ac7de766997"
                },
                {
                    "id": "np_tiny",
                    "type": "gpiiKey",
                    "schemaVersion": "0.3",
                    "prefsSafeId": "prefsSafe-7",
                    "prefsSetId": "gpii-default",
                    "revoked": false,
                    "revokedReason": null,
                    "timestampCreated": "2017-12-14T19:55:11.641Z",
                    "timestampUpdated": null
                }
            ]
        }
    }
];

gpii.tests.preferencesServer.prefsSafes.getSafeWithKeys.failFixtures = [
    {
        name: "GET: Failure message for a prefs safe that does not exist.",
        prefsSafeId: "prefsSafe-3999",
        url: "%prefsSafeId",
        expectedStatusCode: 404,
        expected: {
            "isError": true,
            "errorCode": "GPII_ERR_NO_PREFSSAFE",
            "message": "Missing prefsSafe"
        }
    }
];

/////////////////////// TESTING prefsSafes PUT (Save) ////////////////////////////
fluid.registerNamespace("gpii.tests.preferencesServer.prefsSafes.putSafe");

gpii.tests.preferencesServer.prefsSafes.putSafe.buildTestDef = function (fixture) {
    var expectedStatusCode = fixture.expectedStatusCode || 200;
    return {
        name: fixture.name,
        expect: 2,
        components: {
            getRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/prefsSafe/" + fixture.url,
                    method: "PUT",
                    port: 8081,
                    termMap: {
                        prefsSafeId: fixture.prefsSafeId
                    }
                }
            }
        },
        sequence: [{
            func: "{getRequest}.send",
            args: fixture.putBody
        }, {
            event: "{getRequest}.events.onComplete",
            listener: "gpii.tests.preferencesServer.testResponseLeftHand",
            args: ["{arguments}.0", fixture.expected, "{getRequest}.nativeResponse.statusCode", expectedStatusCode]
        }]
    };
};

gpii.tests.preferencesServer.prefsSafes.putSafe.successFixtures = [
    {
        name: "PUT: Basic update of an existing safe.",
        prefsSafeId: "prefsSafe-7",
        url: "%prefsSafeId",
        putBody: {
            "id": "prefsSafe-7",
            "type": "prefsSafe",
            "schemaVersion": "0.3",
            "prefsSafeType": "user",
            "name": "Prefs Seven",
            "email": null,
            "preferences": {
                "flat": {
                    "name": "bit of stuff",
                    "contexts": {
                        "gpii-default": {
                            "name": "Default preferences",
                            "preferences": {
                                "http://registry.gpii.net/common/onScreenKeyboard/enabled": false
                            },
                            "metadata": []
                        }
                    },
                    "metadata": []
                }
            },
            "timestampCreated": "2017-12-14T19:55:11.641Z",
            "timestampUpdated": null
        },
        expected: {
            "id": "prefsSafe-7",
            "type": "prefsSafe",
            "schemaVersion": "0.3",
            "prefsSafeType": "user",
            "name": "Prefs Seven",
            "email": null,
            "preferences": {
                "flat": {
                    "name": "bit of stuff",
                    "contexts": {
                        "gpii-default": {
                            "name": "Default preferences",
                            "preferences": {
                                "http://registry.gpii.net/common/onScreenKeyboard/enabled": false
                            },
                            "metadata": []
                        }
                    },
                    "metadata": []
                }
            },
            "timestampCreated": "2017-12-14T19:55:11.641Z"
            // This will be updated "timestampUpdated": null
        }
    }
];

gpii.tests.preferencesServer.prefsSafes.putSafe.failFixtures = [
    {
        name: "PUT: Failure to put a safe that doesn't exist yet.",
        expectedStatusCode: 404,
        prefsSafeId: "prefsSafe-4000",
        url: "%prefsSafeId",
        putBody: {
            "id": "prefsSafe-4000",
            "type": "prefsSafe",
            "schemaVersion": "0.3",
            "prefsSafeType": "user",
            "name": "Prefs Seven",
            "email": null,
            "preferences": {
                "flat": {
                    "name": "bit of stuff",
                    "contexts": {
                        "gpii-default": {
                            "name": "Default preferences",
                            "preferences": {
                                "http://registry.gpii.net/common/onScreenKeyboard/enabled": false
                            },
                            "metadata": []
                        }
                    },
                    "metadata": []
                }
            },
            "timestampCreated": "2017-12-14T19:55:11.641Z",
            "timestampUpdated": null
        },
        expected: {
            isError: true,
            errorCode: "GPII_ERR_NO_PREFSSAFE",
            message: "Missing prefsSafe"
        }
    },
    {
        name: "PUT: Failure to put a safe whose URL ID does not match the payload ID",
        expectedStatusCode: 404,
        prefsSafeId: "prefsSafe-1",
        url: "%prefsSafeId",
        putBody: {
            "id": "prefsSafe-7",
            "type": "prefsSafe",
            "schemaVersion": "0.3",
            "prefsSafeType": "user",
            "name": "Prefs Seven",
            "email": null,
            "preferences": {
                "flat": {
                    "name": "bit of stuff",
                    "contexts": {
                        "gpii-default": {
                            "name": "Default preferences",
                            "preferences": {
                                "http://registry.gpii.net/common/onScreenKeyboard/enabled": false
                            },
                            "metadata": []
                        }
                    },
                    "metadata": []
                }
            },
            "timestampCreated": "2017-12-14T19:55:11.641Z",
            "timestampUpdated": null
        },
        expected: {
            isError: true,
            errorCode: "GPII_ERR_URL_PAYLOAD_ID_MISMATCH",
            message: "The ID parameter in the URL does not match the ID in the payload."
        }
    }
];

/////////////////////// TESTING prefsSafes Create (POST) ////////////////////////////
fluid.registerNamespace("gpii.tests.preferencesServer.prefsSafes.postSafe");

gpii.tests.preferencesServer.prefsSafes.postSafe.buildTestDef = function (fixture) {
    var expectedStatusCode = fixture.expectedStatusCode || 200;
    return {
        name: fixture.name,
        expect: 2,
        components: {
            getRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/prefsSafe",
                    method: "POST",
                    port: 8081
                }
            }
        },
        sequence: [{
            func: "{getRequest}.send",
            args: fixture.postBody
        }, {
            event: "{getRequest}.events.onComplete",
            listener: "gpii.tests.preferencesServer.testResponseLeftHand",
            args: ["{arguments}.0", fixture.expected, "{getRequest}.nativeResponse.statusCode", expectedStatusCode]
        }]
    };
};

gpii.tests.preferencesServer.prefsSafes.postSafe.successFixtures = [
    {
        name: "POST: Create a new preferences safe.",
        url: "%prefsSafeId",
        postBody: {
            "type": "prefsSafe",
            "schemaVersion": "0.3",
            "prefsSafeType": "user",
            "name": "Prefs Three Thousand",
            "email": null,
            "preferences": {
                "flat": {
                    "name": "bit of stuff",
                    "contexts": {
                        "gpii-default": {
                            "name": "Default preferences",
                            "preferences": {
                                "http://registry.gpii.net/common/onScreenKeyboard/enabled": false
                            },
                            "metadata": []
                        }
                    },
                    "metadata": []
                }
            }
        },
        expected: {
            "type": "prefsSafe",
            "schemaVersion": "0.3",
            "prefsSafeType": "user",
            "name": "Prefs Three Thousand",
            "email": null,
            "preferences": {
                "flat": {
                    "name": "bit of stuff",
                    "contexts": {
                        "gpii-default": {
                            "name": "Default preferences",
                            "preferences": {
                                "http://registry.gpii.net/common/onScreenKeyboard/enabled": false
                            },
                            "metadata": []
                        }
                    },
                    "metadata": []
                }
            }
        }
    }
];

/////////////////////// TESTING prefsSafes List (GET) ////////////////////////////
fluid.registerNamespace("gpii.tests.preferencesServer.prefsSafes.list");

gpii.tests.preferencesServer.prefsSafes.list.buildTestDef = function (fixture) {
    var expectedStatusCode = fixture.expectedStatusCode || 200;
    return {
        name: fixture.name,
        expect: 2,
        components: {
            getRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/prefsSafes",
                    method: "GET",
                    port: 8081
                }
            }
        },
        sequence: [{
            func: "{getRequest}.send"
        }, {
            event: "{getRequest}.events.onComplete",
            listener: "gpii.tests.preferencesServer.testResponse",
            args: ["{arguments}.0", fixture.expected, "{getRequest}.nativeResponse.statusCode", expectedStatusCode]
        }]
    };
};

gpii.tests.preferencesServer.prefsSafes.list.successFixtures = [
    {
        name: "GET: List Preference Safes",
        expected: {
            total_rows: 8,
            offset: 0,
            rows: [
                {
                    "name": null,
                    "email": null,
                    "created": "2017-12-14T19:55:11.640Z",
                    "updated": null,
                    "id": "prefsSafe-1"
                },
                {
                    "name": null,
                    "email": null,
                    "created": "2017-12-14T19:55:11.640Z",
                    "updated": null,
                    "id": "prefsSafe-2"
                },
                {
                    "name": null,
                    "email": null,
                    "created": "2017-12-14T19:55:11.641Z",
                    "updated": null,
                    "id": "prefsSafe-3"
                },
                {
                    "name": null,
                    "email": null,
                    "created": "2017-12-14T19:55:11.641Z",
                    "updated": null,
                    "id": "prefsSafe-4"
                },
                {
                    "name": null,
                    "email": null,
                    "created": "2017-12-14T19:55:11.641Z",
                    "updated": null,
                    "id": "prefsSafe-5"
                },
                {
                    "name": null,
                    "email": null,
                    "created": "2017-12-14T19:55:11.641Z",
                    "updated": null,
                    "id": "prefsSafe-6"
                },
                {
                    "name": null,
                    "email": null,
                    "created": "2017-12-14T19:55:11.641Z",
                    "updated": null,
                    "id": "prefsSafe-7"
                },
                {
                    "name": null,
                    "email": null,
                    "created": "2017-12-01T18:43:32.889Z",
                    "updated": null,
                    "id": "prefsSafe-snapset1"
                }
            ]
        }
    }
];

// There aren't really any failure scenerios yet for the bare bones prefsSafe list,
// but we can test the case where there are zero safes.
gpii.tests.preferencesServer.prefsSafes.list.emptyDatabase = [
    {
        config: {
            configName: "gpii.tests.preferencesServer.config",
            configPath: "%preferencesServer/test/configs"
        },
        pouchTestCaseHolder: "gpii.tests.preferencesServer.preferencesService.emptySet.pouchTestCaseHolder",
        name: "List the empty set of preference safes",
        components: {
            getRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/prefsSafes",
                    method: "GET",
                    port: 8081
                }
            }
        },
        sequence: [{
            func: "{getRequest}.send"
        }, {
            event: "{getRequest}.events.onComplete",
            listener: "gpii.tests.preferencesServer.testResponse",
            args: ["{arguments}.0", {
                "total_rows": 0,
                "offset": 0,
                "rows": []
            }, "{getRequest}.nativeResponse.statusCode", 200]
        }]
    }
];

/////////////////////// TESTING prefsSafes List Keys for Safe (GET) ////////////////////////////
fluid.registerNamespace("gpii.tests.preferencesServer.prefsSafes.listKeysForSafe");

gpii.tests.preferencesServer.prefsSafes.listKeysForSafe.buildTestDef = function (fixture) {
    var expectedStatusCode = fixture.expectedStatusCode || 200;
    return {
        name: fixture.name,
        expect: 2,
        components: {
            getRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/prefsSafe-keys/" + fixture.url,
                    method: "GET",
                    port: 8081,
                    termMap: {
                        prefsSafeId: fixture.prefsSafeId
                    }
                }
            }
        },
        sequence: [{
            func: "{getRequest}.send"
        }, {
            event: "{getRequest}.events.onComplete",
            listener: "gpii.tests.preferencesServer.testResponse",
            args: ["{arguments}.0", fixture.expected, "{getRequest}.nativeResponse.statusCode", expectedStatusCode]
        }]
    };
};

gpii.tests.preferencesServer.prefsSafes.listKeysForSafe.successFixtures = [
    {
        name: "GET: Basic listing of keys for a prefsSafe",
        prefsSafeId: "prefsSafe-7",
        url: "%prefsSafeId",
        expected: {
            // TODO sgithens, this CouchDB query needs to be fixed so that the total_rows
            // is the actual number returned from the query, in this case 2
            "total_rows": 11,
            "offset": 9,
            rows: [{
                "type": "gpiiCloudSafeCredential",
                "schemaVersion": "0.3",
                "prefsSafeId": "prefsSafe-7",
                "gpiiExpressUserId": "org.couch.db.user:prefs7user",
                "id": "8f3085a7-b65b-4648-9a78-8ac7de766997"
            },
            {
                "id": "np_tiny",
                "type": "gpiiKey",
                "schemaVersion": "0.3",
                "prefsSafeId": "prefsSafe-7",
                "prefsSetId": "gpii-default",
                "revoked": false,
                "revokedReason": null,
                "timestampCreated": "2017-12-14T19:55:11.641Z",
                "timestampUpdated": null
            }]
        }
    }
];

gpii.tests.preferencesServer.prefsSafes.listKeysForSafe.failFixtures = [
    {
        name: "GET: Cannot list keys for a safe that doesn't exist.",
        prefsSafeId: "prefsSafe-5999",
        url: "%prefsSafeId",
        expectedStatusCode: 404,
        expected: {
            "isError": true,
            "errorCode": "GPII_ERR_NO_PREFSSAFE",
            "message": "Missing prefsSafe"
        }
    }
];

/////////////////////// TESTING prefsSafesKeyCreate (POST) ////////////////////////////
fluid.registerNamespace("gpii.tests.preferencesServer.prefsSafes.prefsSafeKeyCreate");

gpii.tests.preferencesServer.prefsSafes.prefsSafeKeyCreate.buildTestDef = function (fixture) {
    var expectedStatusCode = fixture.expectedStatusCode || 200;
    return {
        name: fixture.name,
        expect: 2,
        components: {
            getRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/prefsSafe-key-create",
                    method: "POST",
                    port: 8081
                }
            }
        },
        sequence: [{
            func: "{getRequest}.send",
            args: fixture.postBody
        }, {
            event: "{getRequest}.events.onComplete",
            listener: "gpii.tests.preferencesServer.testResponseLeftHand",
            args: ["{arguments}.0", fixture.expected, "{getRequest}.nativeResponse.statusCode", expectedStatusCode]
        }]
    };
};

gpii.tests.preferencesServer.prefsSafes.prefsSafeKeyCreate.successFixtures = [
    {
        name: "POST: Add a new GPII Key to a preferences set",
        postBody: {
            "prefsSafeId": "prefsSafe-1",
            "prefsSetId": "gpii-lowlight"
        },
        expected: {
            "type": "gpiiKey",
            "schemaVersion": "0.3",
            "prefsSafeId": "prefsSafe-1",
            "prefsSetId": "gpii-lowlight",
            "revoked": false,
            "revokedReason": null,
            // "timestampCreated": "2017-12-14T19:55:11.640Z",
            "timestampUpdated": null
        }
    }
];

gpii.tests.preferencesServer.prefsSafes.prefsSafeKeyCreate.failFixtures = [
    {
        name: "POST: Failure expected when not including the safe id and prefset id",
        expectedStatusCode: 404,
        postBody: {
            // "prefsSafeId": "prefsSafe-1",
            "prefsSetId": "gpii-lowlight"
        },
        expected: {
            isError: true,
            errorCode: "GPII_ERR_MISSING_PREFSAFE_PREFSET_IDS",
            message: "Unable to process. `prefsSafeId` and `prefsSetId` are required fields."
        }
    }
];

//////////////////////// Prefs Test Map ///////////////////////////

gpii.tests.preferencesServer.prefsSafes.testMap = [ {
    build: gpii.tests.preferencesServer.prefsSafes.get.buildTestDef,
    fixtures: gpii.tests.preferencesServer.prefsSafes.get.successFixtures
}, {
    build: gpii.tests.preferencesServer.prefsSafes.get.buildTestDef,
    fixtures: gpii.tests.preferencesServer.prefsSafes.get.failFixtures
}, {
    build: gpii.tests.preferencesServer.prefsSafes.putSafe.buildTestDef,
    fixtures: gpii.tests.preferencesServer.prefsSafes.putSafe.successFixtures
}, {
    build: gpii.tests.preferencesServer.prefsSafes.putSafe.buildTestDef,
    fixtures: gpii.tests.preferencesServer.prefsSafes.putSafe.failFixtures
}, {
    build: gpii.tests.preferencesServer.prefsSafes.postSafe.buildTestDef,
    fixtures: gpii.tests.preferencesServer.prefsSafes.postSafe.successFixtures
}, {
    build: gpii.tests.preferencesServer.prefsSafes.list.buildTestDef,
    fixtures: gpii.tests.preferencesServer.prefsSafes.list.successFixtures
}, {
    build: gpii.tests.preferencesServer.prefsSafes.listKeysForSafe.buildTestDef,
    fixtures: gpii.tests.preferencesServer.prefsSafes.listKeysForSafe.successFixtures
}, {
    build: gpii.tests.preferencesServer.prefsSafes.listKeysForSafe.buildTestDef,
    fixtures: gpii.tests.preferencesServer.prefsSafes.listKeysForSafe.failFixtures
}, {
    build: gpii.tests.preferencesServer.prefsSafes.getSafeWithKeys.buildTestDef,
    fixtures: gpii.tests.preferencesServer.prefsSafes.getSafeWithKeys.successFixtures
}, {
    build: gpii.tests.preferencesServer.prefsSafes.getSafeWithKeys.buildTestDef,
    fixtures: gpii.tests.preferencesServer.prefsSafes.getSafeWithKeys.failFixtures
}, {
    build: gpii.tests.preferencesServer.prefsSafes.prefsSafeKeyCreate.buildTestDef,
    fixtures: gpii.tests.preferencesServer.prefsSafes.prefsSafeKeyCreate.successFixtures
}, {
    build: gpii.tests.preferencesServer.prefsSafes.prefsSafeKeyCreate.buildTestDef,
    fixtures: gpii.tests.preferencesServer.prefsSafes.prefsSafeKeyCreate.failFixtures
}];

fluid.defaults("gpii.tests.preferencesServer.prefsSafes.testEnvironment", {
    gradeNames: ["gpii.test.couchdb.environment.base", "gpii.test.serverEnvironment"],
    databases: {
        gpii: {
            data: [
                "%gpii-universal/gpii/node_modules/preferencesServer/test/data/gpiiKeys.json",
                "%gpii-universal/gpii/node_modules/preferencesServer/test/data/prefsSafes.json",
                "%gpii-universal/gpii/node_modules/preferencesServer/test/data/gpiiCloudSafeCred.json",
                "%gpii-universal/testData/dbData/views.json"
            ]
        }
    }
});

gpii.tests.preferencesServer.prefsSafes.testDefs = fluid.flatten(fluid.transform(gpii.tests.preferencesServer.prefsSafes.testMap, function (mapEl) {
    return fluid.transform(mapEl.fixtures, mapEl.build, function (fixture) {
        var common = {
            config: gpii.tests.preferencesServer.config
        };

        return fluid.extend({}, common, fixture);
    });
}));

gpii.tests.preferencesServer.prefsSafes.testDefToEnvironment = function (testDef) {
    return gpii.test.testDefToEnvironment(testDef, "gpii.tests.preferencesServer.prefsSafes.testEnvironment", "gpii.test.couchSequenceGrade");
};

gpii.test.runTestDefs(gpii.tests.preferencesServer.prefsSafes.testDefs, gpii.tests.preferencesServer.prefsSafes.testDefToEnvironment);
