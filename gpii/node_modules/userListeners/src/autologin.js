/* AutoLogin user listener.
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion");

var gpii = fluid.registerNamespace("gpii");

// The AutoLogin user listener.
fluid.defaults("gpii.userListeners.autoLogin", {
    gradeNames: ["fluid.component", "fluid.contextAware", "gpii.userListener"],
    contextAwareness: {
        platform: {
            checks: {
                windows: {
                    contextValue: "{gpii.contexts.windows}",
                    gradeNames: "gpii.userListeners.autoLogin.windows"
                }
            }
        }
    },
    members: {
        tokenDirectory: "@expand:{settingsDir}.getGpiiSettingsDir()",
        tokenFile: ".gpii-user-token.txt",
        done: false,
        listenerName: "auto-login"
    },
    components: {
        settingsDir: {
            type: "gpii.settingsDir"
        }
    },
    invokers: {
        startListener: "{that}.attemptLogin",
        stopListener: "fluid.identity",
        attemptLogin: {
            funcName: "gpii.userListeners.autoLogin.attemptLogin",
            args: ["{that}"]
        },
        getToken: {
            func: "{that}.readTokenFile",
            args: ["{that}.tokenDirectory", "{that}.tokenFile"]
        },
        storeToken: {
            func: "{that}.writeTokenFile",
            args: [ "{that}.tokenDirectory", "{that}.tokenFile", "{arguments}.0" ]
        }
    },
    listeners: {
        "onCreate.loginListener": {
            funcName: "gpii.userListeners.autoLogin.addLoginListener",
            args: [ "{that}", "{lifecycleManager}.events.onSessionStart"]
        }
    },
    // Disabling by default, as it is the safest and will prevent people's keys from being accidentally stored when it
    // is not desired (eg, on shared or public access computers).
    saveLastLogin: false
});

/**
 * Adds a listener to the onSessionStart event of the lifecycle manager, which stores the token file.
 *
 * @param {Component} that The gpii.userListeners.autoLogin instance.
 * @param {EventFirer} firer The event firer for the onSessionStart event.
 */
gpii.userListeners.autoLogin.addLoginListener = function (that, firer) {
    if (that.options.saveLastLogin) {
        firer.addListener(function (gradeName, gpiiKey) {
            if (gpiiKey !== "noUser") {
                that.storeToken(gpiiKey);
            }
        });
    }
};

/**
 * Performs the auto-login, by raising the onTokenArrive event with the result of getToken().
 *
 * This should only be called once, during startup. Subsequent calls will have no effect.
 *
 * @param {Component} that - The gpii.userListeners.autoLogin instance.
 * @return {Promise} A promise resolving when the token has been read.
 */
gpii.userListeners.autoLogin.attemptLogin = function (that) {
    var promise;

    if (that.done) {
        promise = fluid.promise().reject({
            isError: true,
            message: "autoLogin.attemptLogin had already been called."
        });
    } else {
        that.done = true;
        promise = that.getToken().then(function (token) {
            that.events.onTokenArrive.fire(that, token);
        });
    }

    return promise;
};
