/* User listeners
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    request = require("request");

var gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.userListeners");

// The user listeners.
fluid.defaults("gpii.userListeners", {
    gradeNames: ["fluid.component", "fluid.contextAware"],
    contextAwareness: {
        platform: {
            checks: {
                windows: {
                    contextValue: "{gpii.contexts.windows}",
                    gradeNames: ["gpii.userListeners.windows"]
                }
            }
        }
    },
    components: {
        pcsc: {
            type: "gpii.userListeners.pcsc"
        },
        usb: {
            type: "gpii.userListeners.usb"
        }
    },
    events: {
        // The listeners are starting.
        "onListenersStart": null,
        // The listeners are stopping.
        "onListenersStop": null
    },
    listeners: {
        "onCreate.startListeners": "{that}.events.onListenersStart"
    }
});

// A user listener.
fluid.defaults("gpii.userListener", {
    gradeNames: ["fluid.component"],
    events: {
        // A token has arrived.
        "onTokenArrive": null,
        // A token has removed.
        "onTokenRemove": null,
        // The listener has failed.
        "onFail": null
    },
    invokers: {
        // Start the listener, returning a Promise
        startListener: "fluid.notImplemented",
        // Stop the listener, returning a Promise
        stopListener: "fluid.notImplemented",
        // Parse a Buffer containing an NDEF message, returning a string.
        decodeNDEF: {
            funcName: "gpii.userListeners.decodeNDEF",
            args: [
                "{arguments}.0" // NDEF buffer
            ]
        },
        // The listener has failed, and should be restarted.
        failed: {
            funcName: "gpii.userListeners.failed",
            args: [
                "{that}",
                "{arguments}.0" // The error.
            ]
        }
    },
    members: {
        // Set to true to call proximityTriggered, otherwise login/logout.
        proximity: false,
        // Override to provide the name of the listener.
        listenerName: "no-name",
        // Number of failures
        failCount: 0
    },
    listeners: {
        // Start/stop this listener
        "{userListeners}.events.onListenersStart":  "{that}.startListener",
        "{userListeners}.events.onListenersStop": "{that}.stopListener",

        "onTokenArrive.callFlowManager": {
            funcName: "gpii.userListeners.tokenArrived",
            args: [
                "{that}",
                "{arguments}.1" // token
            ]
        },
        "onTokenRemove.callFlowManager": {
            funcName: "gpii.userListeners.tokenRemoved",
            args: [
                "{that}",
                "{arguments}.1" // token
            ]
        }
    },

    // Seconds (multiplied by failureCount) to wait before restarting.
    failDelay: 10
});

/**
 * Handles the onTokenArrive event.
 *
 * It calls the "login" action for non-proximity devices, otherwise "proximityTriggered".
 *
 * @param {Component} that - An instance of gpii.userListener.
 * @param {String} token - The token from the user listener.
 */
gpii.userListeners.tokenArrived = function (that, token) {
    fluid.log(that.listenerName + " token arrived: " + token);

    var action = that.proximity ? "proximityTriggered" : "login";
    request("http://localhost:8081/user/" + token + "/" + action);
};

/**
 * Handles the onTokenRemove event.
 *
 * It calls the "logout" action for non-proximity devices, otherwise it does nothing.
 *
 * @param {Component} that - An instance of gpii.userListener.
 * @param {String} token - The token from the user listener.
 */
gpii.userListeners.tokenRemoved = function (that, token) {
    fluid.log(that.listenerName + " token removed: " + token);

    if (!that.proximity) {
        request("http://localhost:8081/user/" + token + "/logout");
    }
};

/**
 * The listener has failed, and needs to be restarted. To avoid fast repeating failures, the restart will have a delay
 * which increases each time.
 *
 * @param {Component} that - An instance of gpii.userListener.
 * @param {Any} err - The error.
 */
gpii.userListeners.failed = function (that, err) {
    var delay = Math.min(that.failCount++, 10) * that.options.failDelay;

    fluid.log(fluid.logLevel.WARN,
        "Listener " + that.listenerName + " has failed. Restarting in " + delay + " seconds");

    that.events.onFail.fire(that, err);

    process.nextTick(function () {
        that.stopListener().then(function () {
            setTimeout(function () {
                fluid.log("Restarting " + that.listenerName + " listener");
                that.startListener();
            }, delay * 1000);
        });
    });
};
