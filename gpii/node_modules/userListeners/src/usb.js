/* USB user listener.
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    fs = require("fs"),
    path = require("path");

var gpii = fluid.registerNamespace("gpii");

// The USB user listener.
fluid.defaults("gpii.userListeners.usb", {
    gradeNames: ["fluid.component", "fluid.contextAware", "gpii.userListener"],
    contextAwareness: {
        platform: {
            checks: {
                windows: {
                    contextValue: "{gpii.contexts.windows}",
                    gradeNames: "gpii.userListeners.usb.windows"
                },
                linux: {
                    contextValue: "{gpii.contexts.linux}",
                    gradeNames: "gpii.userListeners.usb.linux"
                }
            }
        }
    },
    events: {
        // A volume has been mounted
        onMount: null, // (that, mountPoint)
        // A volume has been unmounted
        onUnmount: null // (that, mountPoint)
    },
    members: {
        tokenFile: ".gpii-user-token.txt",
        currentDevice: {
            token: null,
            path: null
        }
    },
    listeners: {
        "onMount.readToken": "{that}.readUSBToken({that}, {arguments}.1)",
        "onUnmount.deviceRemoved": "{that}.deviceRemoved({that}, {arguments}.1)"
    },
    invokers: {
        startListener: "fluid.identity",
        stopListener: "fluid.identity",
        readUSBToken: {
            funcName: "gpii.userListeners.usb.readUSBToken",
            args: ["{that}", "{arguments}.1"]
        },
        deviceRemoved: {
            funcName: "gpii.userListeners.usb.deviceRemoved",
            args: ["{that}", "{arguments}.1"]
        }
    }
});

/**
 * Reads a token from the USB device. If one is found, the onTokenArrive event is raised.
 *
 * If there's already a device with a token, then the new one takes precedence. See GPII-2682.
 *
 * @param {Component} that - The gpii.userListeners.usb instance.
 * @param {String} usbPath - The root of the USB device.
 * @return {Promise} resolves when the token is read, rejects on error (or there's already a device)
 */
gpii.userListeners.usb.readUSBToken = function (that, usbPath) {
    var promise = fluid.promise();

    // Try to read the token file.
    var tokenFile = path.join(usbPath, that.tokenFile);
    fs.readFile(tokenFile, "utf8", function (err, data) {
        if (err) {
            fluid.log("Error reading token from device (" + usbPath + "):");
            promise.reject({
                isError: true,
                message: "Error reading token from device (" + usbPath + ")",
                error: err
            });
        } else {
            that.currentDevice.path = usbPath;
            fluid.log("Got token from USB device (" + that.currentDevice.path + "):", that.currentDevice.token);
            if (that.currentDevice.token !== data.trim()) {
                that.currentDevice.token = data.trim();
                that.events.onTokenArrive.fire(that, that.currentDevice.token);
            } else {
                fluid.log("Ignoring key-in request. Got the same token from a different USB device (" + that.currentDevice.path + "):",
                    that.currentDevice.token);
            }
            promise.resolve(that.currentDevice.token);
        }
    });

    return promise;
};

/**
 * Called when a device has been removed. If the device had a token, then the onTokenRemove event is raised.
 *
 * @param {Component} that - The gpii.userListeners.usb instance.
 * @param {String} usbPath - The root of the USB device.
 * @return {Boolean} True if the device had a token that was used to login.
 */
gpii.userListeners.usb.deviceRemoved = function (that, usbPath) {
    var wasActive = that.currentDevice.path === usbPath;
    if (wasActive) {
        that.events.onTokenRemove.fire(that, that.currentDevice.token);
        that.currentDevice.token = that.currentDevice.path = null;
    }
    return wasActive;
};
