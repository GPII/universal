/*
 * User listener tests
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";
var fluid = require("infusion");

var jqUnit = fluid.require("node-jqunit");
var gpii = fluid.registerNamespace("gpii");
fluid.registerNamespace("gpii.tests.userListener");

require("../index.js");


fluid.defaults("gpii.tests.userListener.testListener", {
    gradeNames: ["fluid.component", "fluid.contextAware", "gpii.userListener"],
    invokers: {
        startListener: "fluid.identity",
        stopListener: "fluid.identity"
    },
    members: {
        listenerName: "testListener"
    }
});


var teardowns = [];
jqUnit.module("gpii.tests.userListener", {
    teardown: function () {
        while (teardowns.length) {
            teardowns.pop()();
        }
    }
});

gpii.tests.userListener.toggleModeTests = fluid.freezeRecursive({
    "maintained-short": {
        momentary: false,
        detectMode: false,
        time: 1,
        expect: ["login", "logout"]
    },
    "maintained-long": {
        momentary: false,
        detectMode: false,
        time: 100,
        expect: ["login", "logout"]
    },
    "momentary-short": {
        momentary: true,
        detectMode: false,
        time: 1,
        expect: ["proximityTriggered", null, "proximityTriggered", null]
    },
    "momentary-long": {
        momentary: true,
        detectMode: false,
        time: 100,
        expect: ["proximityTriggered", null, "proximityTriggered", null]
    },
    "hybrid-short": {
        momentary: false,
        detectMode: true,
        time: 1,
        expect: ["login", null, "proximityTriggered", null]
    },
    "hybrid-short-again": {
        momentary: false,
        detectMode: true,
        time: 1,
        expect: ["proximityTriggered", null, "proximityTriggered", null]
    },
    "hybrid-long": {
        momentary: false,
        detectMode: true,
        time: 100,
        expect: ["proximityTriggered", "logout"]
    },
    "hybrid-long-again": {
        momentary: false,
        detectMode: true,
        time: 100,
        expect: ["login", "logout"]
    },
    "hybrid-short-momentary": {
        momentary: true,
        detectMode: true,
        time: 1,
        expect: ["proximityTriggered", null, "proximityTriggered", null]
    },
    "hybrid-long-momentary": {
        momentary: true,
        detectMode: true,
        time: 100,
        expect: ["proximityTriggered", "logout" ]
    },
    "hybrid-long-momentary-again": {
        momentary: true,
        detectMode: true,
        time: 100,
        expect: ["proximityTriggered", "logout" ]
    }
});


// Tests USB device removal.
jqUnit.test("User listener - toggle mode timings", function () {

    var tests = gpii.tests.userListener.toggleModeTests;
    var currentTest;
    var currentTestKey;
    var testEvent;
    var expectIndex;

    fluid.each(tests, function (test) {
        jqUnit.expect(test.expect.filter(fluid.identity).length * 2);
    });

    // Mock hrtime to return the desired time, instead of waiting.
    var hrtimeOrig = process.hrtime;
    teardowns.push(function () {
        process.hrtime = hrtimeOrig;
    });
    process.hrtime = function (t) {
        if (t) {
            // Return the duration
            return [currentTest.time, 1];
        } else {
            // The current time isn't used.
            return [1, 1];
        }
    };

    // Check the correct calls for flow manager.
    var callFlowManager = function (token, action) {
        var expectAction = currentTest.expect[expectIndex];
        fluid.log(testEvent, ": ", action, "+", token);

        if (expectAction === null || (testEvent !== "arrive") && (testEvent !== "remove")) {
            jqUnit.fail("Unexpected invocation of callFlowManager - " + currentTestKey);
        }

        jqUnit.assertEquals(testEvent + " action as expected - " + currentTestKey, expectAction, action);
        jqUnit.assertEquals(testEvent + " token as expected for " + currentTestKey, "token-" + currentTestKey, token);
    };

    // Create the test listener component.
    var listeners = gpii.userListeners({
        components: {
            testListener: {
                type: "gpii.tests.userListener.testListener"
            }
        },
        distributeOptions: {
            record: {
                callFlowManager: callFlowManager
            },
            target: "{that testListener}.options.invokers"
        }
    });

    var listener = listeners.testListener;


    fluid.each(tests, function (test, key) {
        currentTest = test;
        currentTestKey = key;

        listener.momentary = test.momentary;
        listener.detectMode = test.detectMode;
        listener.detectModeTimeout = 5;

        for (expectIndex = 0; expectIndex < currentTest.expect.length; expectIndex++) {
            testEvent = "arrive";
            listener.events.onTokenArrive.fire(listener, "token-" + currentTestKey);
            expectIndex++;
            testEvent = "remove";
            listener.events.onTokenRemove.fire(listener, "token-" + currentTestKey);
        }

        testEvent = null;
    });

});

