/*
 * Auto-login User listener tests
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";
var fluid = require("infusion"),
    os = require("os"),
    path = require("path"),
    fs = require("fs");

var jqUnit = fluid.require("node-jqunit");
var gpii = fluid.registerNamespace("gpii");
fluid.registerNamespace("gpii.tests.userListener");

require("../index.js");

fluid.defaults("gpii.tests.userListener.autoLoginListener", {
    gradeNames: ["fluid.component"],
    listeners: {
        "onTokenArrive.callFlowManager": "fluid.identity",
        "onTokenRemove.callFlowManager": "fluid.identity"
    },
    invokers: {
        startListener: "fluid.identity",
        stopListener: "fluid.identity"
    }
});

var teardowns = [];
jqUnit.module("gpii.tests.userListener.autoLogin", {
    teardown: function () {
        while (teardowns.length) {
            teardowns.pop()();
        }
    }
});

gpii.tests.userListener.tokenFileTests = fluid.freezeRecursive([
    {
        filename: "test1",
        content: "test-key1",
        expect: "test-key1"
    },
    {
        filename: "test2",
        content: " \n \t test-key2 \n \t \r",
        expect: "test-key2"
    },
    {
        filename: "test3",
        content: "",
        expect: "reject"
    },
    {
        filename: "test4",
        content: " \r\n\t",
        expect: "reject"
    },
    {
        directory: "/does/not/exist",
        filename: "a",
        expect: "reject"
    },
    {
        directory: "/",
        filename: "",
        expect: "reject"
    },
    {
        directory: "",
        filename: "",
        expect: "reject"
    }
]);

/**
 * Get an instance of the gpii.userListeners.autoLogin component.
 * @return {Component} The gpii.userListeners.autoLogin component.
 */
gpii.tests.userListener.getAutoLoginListener = function () {
    var userListeners = gpii.userListeners({
        listeners: {
            "onCreate.startListeners": "fluid.identity"
        },
        events: {
            "onListenersStart": null
        },
        distributeOptions: {
            record: "gpii.tests.userListener.autoLoginListener",
            target: "{that autoLogin}.options.gradeNames"
        }
    });

    return userListeners.autoLogin;
};

jqUnit.asyncTest("autoLogin readTokenFile", function () {

    var tests = gpii.tests.userListener.tokenFileTests;

    jqUnit.expect(tests.length * 2);
    var tempDir = path.join(os.tmpdir(), "gpii-listener-tests" + Math.random());
    fs.mkdirSync(tempDir);
    var tempFiles = [];

    teardowns.push(function () {
        while (tempFiles.length) {
            fs.unlinkSync(tempFiles.pop());
        }
        fs.rmdirSync(tempDir);
    });

    var doTest = function (index) {
        if (index >= tests.length) {
            jqUnit.start();
        } else {
            var currentTest = tests[index];
            var messagePrefix = " - test index " + index;

            if (currentTest.hasOwnProperty("content")) {
                var tempFile = path.join(tempDir, currentTest.filename);
                fs.writeFileSync(tempFile, currentTest.content, "utf8");
                tempFiles.push(tempFile);
            }

            var directory = currentTest.hasOwnProperty("directory") ? currentTest.directory : tempDir;
            var file = currentTest.filename;

            var p = gpii.userListeners.readTokenFile(directory, file);

            jqUnit.assertTrue("readTokenFile must return a promise" + messagePrefix, fluid.isPromise(p));

            p.then(function (token) {
                jqUnit.assertEquals("readTokenFile should resolve with the expected value" + messagePrefix,
                    currentTest.expect, token);

                doTest(index + 1);
            }, function () {
                jqUnit.assertEquals("readTokenFile should reject if expected" + messagePrefix,
                    currentTest.expect, "reject");

                doTest(index + 1);
            });
        }
    };

    doTest(0);
});


jqUnit.asyncTest("Test attemptLogin", function () {

    jqUnit.expect(2);

    var testToken = "test-token" + Math.random();

    // Write the test token file.
    var tempDir = os.tmpdir();
    var tokenFile = "test-token-file" + Math.random();
    var tokenPath = path.join(tempDir, tokenFile);
    fs.writeFileSync(tokenPath, testToken, "utf8");

    teardowns.push(function () {
        fs.unlinkSync(tokenPath);
    });

    var autoLogin = gpii.tests.userListener.getAutoLoginListener();

    autoLogin.tokenDirectory = tempDir;
    autoLogin.tokenFile = tokenFile;

    var eventRaised = false;

    autoLogin.events.onTokenArrive.addListener(function (that, token) {
        jqUnit.assertFalse("Token event should only fire once", eventRaised);
        eventRaised = true;
        jqUnit.assertEquals("Token in event should match the test token", testToken, token);
    });

    gpii.userListeners.autoLogin.attemptLogin(autoLogin).then(function () {
        // try it again - it should reject.
        gpii.userListeners.autoLogin.attemptLogin(autoLogin).then(function () {
            jqUnit.fail("Second call to attemptLogin should reject");
        }, jqUnit.start);
    });
});
