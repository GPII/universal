/*
 * Abstraction of something that installs packages.
 *
 * Copyright 2018 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var path = require("path"),
    fs = require("fs");

var fluid = require("infusion");
var gpii = fluid.registerNamespace("gpii");
fluid.registerNamespace("gpii.iod");

fluid.defaults("gpii.iod.packageInstaller", {
    gradeNames: ["fluid.component"],

    invokers: {
        startInstaller: {
            funcName: "gpii.iod.startInstaller",
            args: ["{that}", "{iod}", "{arguments}.0"]
        },
        // Remaining invokers are part of the installation pipe-line. Each one is passed the installation and returns
        // a installation, either directly or via a promise.
        downloadPackage: {
            funcName: "gpii.iod.downloadPackage",
            args: ["{that}", "{iod}"]
        },
        checkPackage: {
            funcName: "gpii.iod.checkPackage",
            args: ["{that}", "{iod}"]
        },
        prepareInstall: {
            funcName: "gpii.iod.prepareInstall",
            args: ["{that}", "{iod}"]
        },
        installPackage: "fluid.notImplemented",
        cleanup: {
            funcName: "gpii.iod.cleanup",
            args: ["{that}", "{iod}"]
        },
        uninstallPackage: "fluid.notImplemented"
    },
    events: {
        // Dummy events for the installation pipe-lines
        onInstallPackage: null,
        onRemovePackage: null
    },
    listeners: {
        "onInstallPackage.download": {
            func: "{that}.downloadPackage",
            priority: "first"
        },
        "onInstallPackage.check": {
            func: "{that}.checkPackage",
            priority: "after:download"
        },
        "onInstallPackage.prepareInstall": {
            func: "{that}.prepareInstall",
            priority: "after:check"
        },
        "onInstallPackage.install": {
            func: "{that}.installPackage",
            priority: "after:prepareInstall"
        },
        "onInstallPackage.cleanup": {
            func: "{that}.cleanup",
            priority: "after:install"
        },

        "onRemovePackage.uninstallPackage": {
            func: "{that}.uninstallPackage",
            priority: "first"
        }
    },

    // Types of package this installer supports
    packageTypes: null,

    members: {
        // Package information from the server .
        packageInfo: null,
        // Where this installation will put it's stuff.
        tempDir: null,
        // Path of the downloaded package.
        localPackage: null
    }
});

/**
 * Starts the installation pipeline.
 *
 * @param that {Component} The gpii.iod.installer instance.
 * @param iod {object} The gpii.iod instance.
 * @param packageInfo {object} The package info.
 * @return {Promise} Resolves when complete.
 */
gpii.iod.startInstaller = function (that, iod, packageInfo) {
    that.packageInfo = packageInfo;
    that.tempDir = iod.getWorkingPath(that.packageInfo.name);

    var promise = fluid.promise.fireTransformEvent(that.events.onInstallPackage);

    return promise;
};

/**
 * Downloads a package from the server.
 *
 * @param that {Component} The gpii.iod.installer instance.
 * @param iod {object} The gpii.iod instance.
 * @return {Promise} Resolves when complete.
 */
gpii.iod.downloadPackage = function (that) {
    fluid.log("IoD: Downloading package " + that.packageInfo.url);

    var promise = fluid.promise();

    that.localPackage = path.join(that.tempDir, that.packageInfo.filename);

    fs.copyFile(that.packageInfo.url, that.localPackage, function (err) {
        if (err) {
            promise.reject({
                isError: true,
                message: "Unable to download package"
            });
        } else {
            promise.resolve();
        }
    });

    return promise;
};

/**
 * Checks that a downloaded package is ok.
 *
 * @param that {Component} The gpii.iod.installer instance.
 * @param iod {object} The gpii.iod instance.
 * @return {Promise} Resolves when complete.
 */
gpii.iod.checkPackage = function (that) {
    fluid.log("IoD: Checking downloaded package file " + that.packageInfo.filename);
};

/**
 * Generate the installation instructions.
 *
 * @param that {Component} The gpii.iod.installer instance.
 * @param iod {object} The gpii.iod instance.
 * @return {Promise} Resolves when complete.
 */
gpii.iod.prepareInstall = function (that) {
    fluid.log("IoD: Preparing installation for " + that.packageInfo.name);
};

/**
 * Cleans up things that are no longer required.
 *
 * @param that {Component} The gpii.iod.installer instance.
 * @param iod {object} The gpii.iod instance.
 * @return {Promise} Resolves when complete.
 */
gpii.iod.cleanup = function (that) {
    fluid.log("IoD: Cleaning installation of " + that.packageInfo.name);
};
