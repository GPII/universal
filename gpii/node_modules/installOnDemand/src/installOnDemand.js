/*
 * Install on Demand.
 *
 * Copyright 2018 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion");

var path = require("path"),
    os = require("os"),
    fs = require("fs"),
    request = require("request"),
    glob = require("glob");

var gpii = fluid.registerNamespace("gpii");
fluid.registerNamespace("gpii.iod");

require("./packageInstaller.js");
require("./iodSettingsHandler.js");

/**
 * Information about a package.
 * @typedef {Object} packageInfo
 * @property {string} name - The package name.
 * @property {string} url - The package location.
 * @property {string} filename - The package filename.
 * @property {string} packageType - Type of installer to use.
 *
 * Installation state.
 * @typedef {Object} installation
 * @property {id} - Installation ID
 * @property {packageInfo} packageInfo - Package data.
 * @property {string} packageName - packageInfo.name
 * @property {Component} installer - The gpii.iod.installer instance.
 * @property {boolean} failed - true if the installation had failed.
 * @property {string} tmpDir - Temporary working directory.
 * @property {string} localPackage - Path to the downloaded package file.
 * @property {string[]} cleanupPaths - The directories to remove during cleanup.
 *
 */

fluid.defaults("gpii.iod", {
    gradeNames: ["fluid.component", "fluid.contextAware", "fluid.modelComponent"],
    contextAwareness: {
        platform: {
            checks: {
                windows: {
                    contextValue: "{gpii.contexts.windows}",
                    gradeNames: "gpii.windows.iod"
                }
            }
        }
    },
    components: {
        "packageData": {
            createOnEvent: "onServiceFound",
            type: "gpii.iod.packageDataSource"
        },
        "packageDataFallback": {
            type: "gpii.iod.packageDataSource"
        }
    },
    dynamicComponents: {
        installers: {
            createOnEvent: "onInstallerLoad",
            type: "{arguments}.0",
            options: {
                installationID: "{arguments}.1"
            }
        }
    },
    events: {
        onServiceFound: null, // [ endpoint address ]
        onServiceLost: null, // [ endpoint address ]
        onInstallerLoad: null // [ packageInstaller grade name, installation ID ]
    },
    listeners: {
        "onCreate.discoverServer": "{that}.discoverServer",
        "onCreate.readInstallations": "{that}.readInstallations",
        "onServiceFound": "{that}.serviceFound",
        "onServiceLost": "{that}.serviceLost",
        "{lifecycleManager}.events.onSessionStop": "{that}.uninstallPackages"
    },
    invokers: {
        discoverServer: {
            funcName: "gpii.iod.discoverServer",
            args: ["{that}"]
        },
        requirePackage: {
            funcName: "gpii.iod.requirePackage",
            args: ["{that}", "{arguments}.0"]
        },
        initialiseInstallation: {
            funcName: "gpii.iod.initialiseInstallation",
            args: ["{that}", "{arguments}.0"]
        },
        getPackageInfo: {
            funcName: "gpii.iod.getPackageInfo",
            args: ["{that}", "{arguments}.0"]
        },
        getInstaller: {
            funcName: "gpii.iod.getInstaller",
            args: ["{that}", "{arguments}.0"]
        },
        getWorkingPath: {
            funcName: "gpii.iod.getWorkingPath",
            args: ["{arguments}.0"]
        },
        serviceFound: {
            funcName: "gpii.iod.serviceFound",
            args: ["{that}", "{arguments}.0"]
        },
        serviceLost: {
            funcName: "gpii.iod.serviceLost",
            args: ["{that}", "{arguments}.0"]
        },
        readInstallations: {
            funcName: "gpii.iod.readInstallations",
            args: ["{that}", "{gpii.journal}.settingsDir.gpiiSettingsDir" ]
        },
        writeInstallation: {
            funcName: "gpii.iod.writeInstallation",
            args: ["{that}", "{gpii.journal}.settingsDir.gpiiSettingsDir", "{arguments}.0"]
        },
        unrequirePackage: {
            funcName: "gpii.iod.unrequirePackage",
            args: ["{that}", "{arguments}.0"]
        },
        uninstallPackages: {
            funcName: "gpii.iod.uninstallPackages",
            args: ["{that}", "{arguments}.0"]
        },
        uninstallPackage: {
            funcName: "gpii.iod.uninstallPackage",
            args: ["{that}", "{arguments}.0"]
        }
    },

    model: {
        logonChange: "{lifecycleManager}.model.logonChange"
    },

    members: {
        installations: {}
    }
});

fluid.defaults("gpii.iod.packageDataSource", {
    gradeNames: ["fluid.component"],
    readOnlyGrade: "gpii.iod.packageDataSource"
});

/**
 * Reads the stored installations from a previous instance. Installations will be kept when an uninstall fails, or if
 * GPII was closed without keying out.
 * All installed packages from the previous instance will be set for removal.
 *
 * @param {Component} that The gpii.iod instance.
 * @param {string} directory The directory containing the stored installation info.
 * @param {bool} justRead true to only read the packages, and not mark them for removal.
 * @return {Promise} Resolves when complete.
 */
gpii.iod.readInstallations = function (that, directory) {
    var promise = fluid.promise();
    var needRemove = false;

    glob(path.join(directory, "iod-installation.*.json"), function (err, files) {
        if (err) {
            promise.reject({
                isError: true,
                message: "Unable to read previous installations",
                error: err
            });
        } else {
            fluid.each(files, function (file) {
                var content = fs.readFileSync(file);
                var installation = JSON.parse(content);
                if (installation && installation.id) {
                    installation.remove = true;
                    installation.uninstalling = false;
                    needRemove = needRemove || installation.remove;
                    that.installations[installation.id] = installation;
                }
            });
            process.nextTick(promise.resolve);
        }
    });

    promise.then(function () {
        if (needRemove) {
            // Loaded some uninstalled installation.
            that.uninstallPackages(0);
        }
    });

    return promise;
};

/**
 * Writes information about an installation so it can be uninstalled at a later time.
 * If the installation has been removed, then the file will be deleted.
 *
 * @param {Component} that The gpii.iod instance.
 * @param {string} directory The directory containing the stored installation info.
 * @return {string} The file that the installation data was written to.
 */
gpii.iod.writeInstallation = function (that, directory, installation) {
    var filename = path.join(directory, "iod-installation." + installation.id + ".json");

    if (installation.removed) {
        fs.unlinkSync(filename);
    } else {
        // Don't write the installer component.
        var out = Object.assign({}, installation);
        delete out.installer;
        var content = JSON.stringify(out);
        fs.writeFileSync(filename, content);
    }
    return filename;
};

/**
 * Create a directory where packages are temporarily stored.
 *
 * @param {String} packageName Name of the package for which the directory is being created.
 * @return {Object} Contains the full path (fullPath), and the first path that was created (createdPath), for cleanup
 */
gpii.iod.getWorkingPath = function (packageName) {
    var createdPath = null;

    var parts = [
        os.tmpdir(),
        "gpii-iod",
        packageName && packageName.replace(/[^-a-z0-9]/, "_"),
        Math.random().toString(36)
    ];

    // Create a new directory
    var createDirectory = function (parent, child) {
        var dir = path.join(parent, child);
        try {
            fs.mkdirSync(dir);
            if (!createdPath) {
                createdPath = dir;
            }
        } catch (e) {
            if (e.code !== "EEXIST") {
                throw e;
            }
        }
        return dir;
    };

    // Create the parents of the path. (mkdirp isn't used because the first non-existing path is required to be known)
    var fullPath = parts.reduce(createDirectory, "");

    return {
        fullPath: fullPath,
        createdPath: createdPath
    };
};

/**
 * Finds a package installer component that handles the given type of package.
 *
 * @param {Component} that The gpii.iod instance.
 * @param {string} packageType The package type identifier.
 * @return {string} The grade name of the package installer.
 */
gpii.iod.getInstaller = function (that, packageType) {
    var packageInstallers = fluid.queryIoCSelector(that, "gpii.iod.packageInstaller");

    var installerComponent = fluid.find(packageInstallers, function (installer) {
        var packageTypes = fluid.makeArray(installer.options.packageTypes);
        return packageTypes.indexOf(packageType) >= 0
            ? installer
            : undefined;
    });

    return installerComponent && installerComponent.typeName;
};

/**
 * Starts the process of installing a package.
 *
 * @param {Component} that The gpii.iod instance.
 * @param {string|Object} packageRequest Package name, or object containing packageName, language, version.
 * @param packageRequest.packageName {string} Name of the package.
 * @param packageRequest.language {string|string[]} Language.
 * @return {Promise} Resolves when the installation is complete.
 */
gpii.iod.requirePackage = function (that, packageRequest) {
    if (typeof(packageRequest) === "string") {
        packageRequest = {
            packageName: packageRequest
        };
    }

    fluid.log("IoD: Requiring " + packageRequest.packageName);

    var promise = fluid.promise();

    var installation = fluid.find(that.installations, function (inst) {
        return inst.packageName === packageRequest.packageName ? inst : undefined;
    });

    if (installation) {
        // Package is already installed by IoD.
        installation.remove = false;
        that.writeInstallation(installation);
    }

    that.initialiseInstallation(packageRequest).then(function (installation) {
        var result = installation.installer.startInstaller().then(function () {
            installation.installed = true;
            // Store the installation info so it can still get removed if gpii restarts.
            that.writeInstallation(installation);
        });
        fluid.promise.follow(result, promise);
    }, promise.reject);


    return promise.then(function () {
        fluid.log("IoD: Installation of " + packageRequest.packageName + " complete");
    }, function (err) {
        fluid.log("IoD: Installation of " + packageRequest.packageName + " failed:", err.error || err);
    });
};

gpii.iod.initialiseInstallation = function (that, packageRequest) {
    if (typeof(packageRequest) === "string") {
        packageRequest = {
            packageName: packageRequest
        };
    }

    fluid.log("IoD: Initialising installation for " + packageRequest.packageName);

    var installation = {
        id: fluid.allocateGuid(),
        packageName: packageRequest.packageName,
        packageRequest: packageRequest,
        cleanupPaths: []
    };
    that.installations[installation.id] = installation;

    var promise = fluid.promise();

    // Get the package info.
    that.getPackageInfo(packageRequest).then(function (packageInfo) {
        // Create the installer instance.
        installation.packageInfo = packageInfo;
        var installerGrade = that.getInstaller(packageInfo.packageType);
        if (installerGrade) {
            // Load the installer.
            that.events.onInstallerLoad.fire(installerGrade, installation.id);
            promise.resolve(installation);
        } else {
            promise.reject({
                isError: true,
                error: "Unable to find an installer for package type " + packageInfo.packageType
            });
        }
    }, promise.reject);

    return promise;
};

/**
 * Retrieve the package metadata.
 *
 * @param {Component} that The gpii.iod instance.
 * @param {Object} packageRequest Containing packageName, language, version.
 * @param packageRequest.packageName {string} Name of the package.
 * @param packageRequest.version {string} [optional] Version.
 * @param packageRequest.language {string} [optional] Language code with optional country code (en, en-US, es-ES).
 * @return {Promise} Resolves to an object containing package information.
 */
gpii.iod.getPackageInfo = function (that, packageRequest) {
    fluid.log("IoD: Getting package info for " + packageRequest.packageName);

    var promise = fluid.promise();

    var dataSource = that.packageData || (that.packageDataFallback.options.path && that.packageDataFallback);

    if (dataSource) {
        dataSource.get({
            packageName: packageRequest.packageName,
            language: packageRequest.language,
            version: packageRequest.version,
            server: that.remoteServer
        }).then(function (packageInfo) {
            if (packageRequest.language && packageInfo.languages) {
                // Merge the language-specific info.
                var lang = gpii.iod.matchLanguage(Object.keys(packageInfo.languages), packageRequest.language);
                if (lang) {
                    Object.assign(packageInfo, packageInfo.languages[lang]);
                    packageInfo.language = lang;
                }
            }

            promise.resolve(packageInfo);
        }, function (err) {
            promise.reject({
                isError: true,
                message: "Unknown package " + packageRequest.packageName,
                error: err
            });
        });
    } else {
        promise.reject({
            isError: true,
            message: "No package data source for IoD"
        });
    }

    return promise;
};

/**
 * Finds the best language from a list of available languages, using the following priority:
 * - Exact match with country code
 * - Exact match without country code
 * - First language, ignoring country code.
 *
 * @param {string[]} languages The list of available languages, with optional country code (en, en-US, es-ES)
 * @param {string} language The preferred language.
 * @return {string} The closest matching item from languages.
 */
gpii.iod.matchLanguage = function (languages, language) {
    languages = fluid.makeArray(languages);

    // Exact match.
    var index = languages.indexOf(language);
    var match = index >= 0 && languages[index];

    if (!match) {
        var langCode = language.substr(0, 2);
        // Language without country.
        if (language.length > 2) {
            index = languages.indexOf(language);
            match = index >= 0 && languages[index];
        }

        if (!match) {
            // Ignore the country.
            match = languages.find(function (lang) {
                return lang.substr(0, 2) === langCode;
            });
        }
    }

    return match;
};

/**
 * No longer require a package. This will cause the package to be uninstalled in a short-time if there is no active
 * session.
 *
 * @param {Component} that The gpii.iod instance.
 * @param {string} packageName The name of the package to no longer require.
 */
gpii.iod.unrequirePackage = function (that, packageName) {

    var installation = fluid.find(that.installations, function (inst) {
        return inst.packageName === packageName ? inst : undefined;
    });

    if (installation) {
        installation.remove = true;
        that.writeInstallation(installation);
    }
};

/**
 * Called by onSessionStop to uninstall the packages that are no longer required. The removal will be performed after
 * a short time if there is no active session, to avoid giving the computer too much to do while it's in use.
 *
 * @param {Component} that The gpii.iod instance.
 * @param {number} wait Number of seconds to wait until uninstalling (default: 30).
 */
gpii.iod.uninstallPackages = function (that, wait) {

    var uninstall = function () {
        var inSession = that.model.logonChange.inProgress && that.model.logonChange.type !== "login";
        if (!inSession) {
            var installation = fluid.find(that.installations, function (inst) {
                return inst.remove && !inst.removed ? inst : undefined;
            });

            if (installation && !installation.uninstalling) {
                installation.uninstalling = true;
                that.uninstallPackage(installation).then(uninstall, uninstall);
            }
        }
    };

    if (wait === 0) {
        uninstall();
    }  else {
        setTimeout(uninstall, (wait || 30) * 1000);
    }
};

/**
 * Uninstall a package.
 *
 * @param {Component} that The gpii.iod instance.
 * @param {object|string} The installation state, or installation ID.
 * @return {Promise} Resolves when the package is removed.
 */
gpii.iod.uninstallPackage = function (that, installation) {
    var packageName;
    if (typeof(installation) === "string") {
        packageName = installation;
        installation = fluid.find(that.installations, function (inst) {
            return (inst.packageName === packageName) ? inst : undefined;
        });
    } else {
        packageName = installation.packageName;
    }

    var initPromise;
    if (installation && installation.installer) {
        initPromise = fluid.toPromise(installation);
    } else {
        initPromise = that.initialiseInstallation(installation);
    }

    var promiseTogo = fluid.promise();
    initPromise.then(function (installation) {
        var result = installation.installer.uninstallPackage();
        fluid.promise.follow(result, promiseTogo);
    });


    return promiseTogo.then(function () {
        fluid.log("IoD: Uninstallation of " + packageName + " complete");
        installation.remove = false;
        installation.removed = true;
        that.writeInstallation(installation);
        delete that.installations[installation.id];

    }, function (err) {
        fluid.log("IoD: Uninstallation of " + packageName + " failed:", err.error || err);
        // Remove it from the list so it's uninstalled again, but the file is kept so it tries again upon restart.
        that.writeInstallation(installation);
        delete that.installations[installation.id];
    });
};

/**
 * Discovers the IoD server.
 *
 * @param {Component} that The gpii.iod instance.
 */
gpii.iod.discoverServer = function (that) {

    var addr = process.env.GPII_IOD_ENDPOINT;

    if (addr) {
        gpii.iod.checkService(addr).then(that.events.onServiceFound.fire);
    } else {
        var bonjour = that.bonjourInstance || (that.bonjourInstance = require("bonjour")());
        if (bonjour) {
            var browser = bonjour.find({type: "gpii-iod"});
            browser.on("up", function (service) {
                fluid.log("IoD: Service up: " + service.fqdn);
                if (that.endpoint && that.packageData) {
                    that.events.onServiceLost.fire(that.endpoint);
                    that.packageData.destroy();
                }
                var endpoint = service.txt.url || ("https://" + service.host + ":" + service.port);
                gpii.iod.checkService(endpoint).then(that.events.onServiceFound.fire);
            });

            browser.on("down", function (service) {
                if (that.endpoint && that.endpointService === service.fqdn) {
                    fluid.log("IoD: Service down: " + service.fqdn);
                    var oldEndpoint = service.txt.url || ("https://" + service.host + ":" + service.port);
                    if (oldEndpoint === that.endpoint) {
                        that.events.onServiceLost.fire(that.endpoint);
                        that.packageData.destroy();
                    }
                }
            });

            // After a timeout use the default endpoint (if configured)
            if (that.options.defaultEndpoint) {
                setTimeout(function () {
                    if (!that.endpoint) {
                        fluid.log("IoD: No endpoint detected, trying " + that.options.defaultEndpoint);
                        gpii.iod.checkService(that.options.defaultEndpoint).then(that.events.onServiceFound.fire);
                    }
                }, 5000);
            }
        }
    }

    that.endpoint = addr;
};

/**
 * Check if an endpoint is listening for connections.
 *
 * @param endpoint
 * @return {Promise}
 */
gpii.iod.checkService = function (endpoint) {
    var promise = fluid.promise();
    request(endpoint, function (error, response) {
        if (response) {
            promise.resolve(endpoint);
        } else {
            fluid.log("IoD: Unable to connect to endpoint " + endpoint);
            promise.reject(error);
        }
    });
    return promise;
};

/**
 * Invoked when the service endpoint is down.
 *
 * @param {Component} that The gpii.iod instance.
 * @param {string} endPoint The endpoint address.
 */
gpii.iod.serviceLost = function (that, endPoint) {
    fluid.log("IoD: Endpoint lost: " + endPoint);
    that.endpoint = null;
};

/**
 * Invoked when a service endpoint is up.
 *
 * @param {Component} that The gpii.iod instance.
 * @param {string} endPoint The endpoint address.
 */
gpii.iod.serviceFound = function (that, endPoint) {
    fluid.log("IoD: Endpoint found: " + endPoint);
    that.endpoint = endPoint;
};

/**
 * A bad way of checking if a package is installed.
 */
gpii.iod.isInstalled = function (packageName) {
    return fs.existsSync(path.join(process.env.ProgramData, "chocolatey\\lib", packageName));
};
