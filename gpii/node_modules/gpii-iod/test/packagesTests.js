/*
 * IoD Tests - packages.
 *
 * Copyright 2019 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion");
var kettle = fluid.require("kettle");
kettle.loadTestingSupport();

var jqUnit = fluid.require("node-jqunit");
var gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.tests.iodPackages");

require("../index.js");

var teardowns = [];

jqUnit.module("gpii.tests.iodPackages", {
    teardown: function () {
        while (teardowns.length) {
            teardowns.pop()();
        }
    }
});


gpii.tests.iodPackages.getPackageInfoTests = fluid.freezeRecursive([
    {
        id: "No matching package",
        request: {
            packageName: "package-not-exists"
        },
        expect: "reject"
    },
    {
        id: "Single language package",
        request: {
            packageName: "package1"
        },
        expect: require("./testPackages/package1.json5")
    },
    {
        id: "Single language package, with language specified",
        request: {
            packageName: "package1",
            language: "fr-FR"
        },
        expect: require("./testPackages/package1.json5")
    },
    {
        id: "Multi-language package, language not specified",
        request: {
            packageName: "languages"
        },
        expect: {
            "name": "languages",
            "packageType": "testPackageType1",
            "filename": "example.filename"
        }
    },
    {
        id: "Multi-language package, unknown language specified",
        request: {
            packageName: "languages",
            language: "xx-YY"
        },
        expect: {
            "name": "languages",
            "packageType": "testPackageType1",
            "filename": "example.filename"
        }
    },
    {
        id: "Multi-language package, unknown language, no country specified",
        request: {
            packageName: "languages",
            language: "xx"
        },
        expect: {
            "name": "languages",
            "packageType": "testPackageType1",
            "filename": "example.filename"
        }
    },
    {
        id: "Multi-language package, full language specified",
        request: {
            packageName: "languages",
            language: "es-ES"
        },
        expect: {
            "name": "languages",
            "packageType": "testPackageType1",
            "filename": "file.es-es",
            "language": "es-ES"
        }
    },
    {
        id: "Multi-language package, full language specified 2",
        request: {
            packageName: "languages",
            language: "es-MX"
        },
        expect: {
            "name": "languages",
            "packageType": "testPackageType1",
            "filename": "file.es-mx",
            "language": "es-MX"
        }
    },
    {
        id: "Multi-language package, no country specified",
        request: {
            packageName: "languages",
            language: "es"
        },
        expect: {
            "name": "languages",
            "packageType": "testPackageType1",
            "filename": "file.es",
            "language": "es"
        }
    },
    {
        id: "Multi-language package, unknown country specified",
        request: {
            packageName: "languages",
            language: "es-YY"
        },
        expect: {
            "name": "languages",
            "packageType": "testPackageType1",
            "filename": "file.es",
            "language": "es"
        }
    },
    {
        id: "Multi-language package, no country specified, no non-country package",
        request: {
            packageName: "languages",
            language: "zh"
        },
        expect: {
            "name": "languages",
            "packageType": "testPackageType1",
            "filename": "file.zh-cn",
            "language": "zh-CN"
        }
    },
    {
        id: "Multi-language package, unknown country specified, no non-country package",
        request: {
            packageName: "languages",
            language: "zh-YY"
        },
        expect: {
            "name": "languages",
            "packageType": "testPackageType1",
            "filename": "file.zh-cn",
            "language": "zh-CN"
        }
    }
]);

fluid.defaults("gpii.tests.iodPackages", {
    gradeNames: [ "gpii.iod" ],
    distributeOptions: {
        packageData: {
            record: {
                gradeNames: ["kettle.dataSource.file.moduleTerms"],
                path: __dirname + "/testPackages/%packageName.json5",
                termMap: {
                    "packageName": "%packageName"
                }
            },
            target: "{that packages packageData}.options"
        }
    },
    invokers: {
        readInstallations: "fluid.identity",
        writeInstallation: "fluid.identity"
    }
});

// Test getPackageInfo returns correct information
jqUnit.asyncTest("test getPackageInfo", function () {

    var tests = gpii.tests.iodPackages.getPackageInfoTests;
    jqUnit.expect(tests.length * 2);

    var iod = gpii.tests.iodPackages();

    var testIndex = -1;
    var nextTest = function () {
        if (++testIndex >= tests.length) {
            jqUnit.start();
            return;
        }

        var test = tests[testIndex];
        var suffix = " - test:" + test.id;

        fluid.log("getPackage: " + test.request.packageName + ", " + test.request.language);

        var p = iod.packages.getPackageInfo(test.request);

        jqUnit.assertTrue("getPackageInfo must return a promise" + suffix, fluid.isPromise(p));

        p.then(function (packageInfo) {
            delete packageInfo.languages;
            jqUnit.assertDeepEq("packageInfo must match expected" + suffix, test.expect, packageInfo);
            nextTest();
        }, function (e) {
            if (test.expect !== "reject") {
                fluid.log(e);
            }
            jqUnit.assertEquals("packageInfo must only reject if expected" + suffix, test.expect, "reject");
            nextTest();
        });

    };

    nextTest();
});
