/*
 * IoD Tests.
 *
 * Copyright 2018 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var os = require("os"),
    fs = require("fs"),
    path = require("path"),
    crypto = require("crypto");

var fluid = require("infusion");
var kettle = fluid.require("kettle");
kettle.loadTestingSupport();
var jqUnit = fluid.require("node-jqunit");
var gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.tests.iodInstaller");

require("../index.js");

gpii.tests.iodInstaller.teardowns = [];

jqUnit.module("gpii.tests.iodInstaller", {
    teardown: function () {
        while (gpii.tests.iodInstaller.teardowns.length) {
            gpii.tests.iodInstaller.teardowns.pop()();
        }
    }
});

fluid.defaults("gpii.tests.iodInstaller", {
    gradeNames: [ "gpii.iod" ],
    components: {
        "testInstaller": {
            type: "gpii.tests.iodInstaller.installer"
        },
        "packages": {
            type: "gpii.iod.packages",
            options: {
                components: {
                    "packageDataSource": {
                        type: "kettle.dataSource.file",
                        options: {
                            path: __dirname + "/testPackages/%packageName.json"
                        }
                    }
                }
            }
        }
    },
    invokers: {
        readInstallations: "fluid.identity",
        writeInstallation: "fluid.identity"
    }
});

fluid.defaults("gpii.tests.iodInstaller.installer", {
    gradeNames: ["fluid.component", "gpii.iod.packageInstaller"],

    invokers: {
        initialise: "gpii.tests.iodInstaller.stage({that}, initialise)",
        downloadPackage: "gpii.tests.iodInstaller.stage({that}, downloadPackage)",
        checkPackage: "gpii.tests.iodInstaller.stage({that}, checkPackage)",
        prepareInstall: "gpii.tests.iodInstaller.stage({that}, prepareInstall)",
        installPackage: "gpii.tests.iodInstaller.stage({that}, installPackage)",
        cleanup: "gpii.tests.iodInstaller.stage({that}, cleanup)",
        startApplication: "gpii.tests.iodInstaller.stage({that}, startApplication)",
        uninstallPackage: "gpii.tests.iodInstaller.stage({that}, uninstallPackage)",
        stopApplication: "gpii.tests.iodInstaller.stage({that}, stopApplication)"
    },

    packageTypes: "testPackageType1"
});

gpii.tests.iodInstaller.stage = function (that, stage) {
    that.stages.push(stage);
};

// Test startInstaller starts the installation pipe-line.
jqUnit.asyncTest("test installation pipe-line", function () {

    var iod = gpii.tests.iodInstaller();
    var installer = iod.testInstaller;

    jqUnit.expect(2);
    installer.stages = [];

    installer.startInstaller({}).then(function () {
        var expect = [
            "initialise",
            "downloadPackage",
            "checkPackage",
            "prepareInstall",
            "installPackage",
            "cleanup",
            "startApplication"
        ];

        jqUnit.assertDeepEq("All stages of the installation should be called in order.", expect, installer.stages);

        installer.stages = [];
        installer.startUninstaller().then(function () {
            var expect = [
                "stopApplication",
                "uninstallPackage"
            ];

            jqUnit.assertDeepEq("All stages of the uninstallation should be called in order.", expect, installer.stages);
            jqUnit.start();
        });
    }, jqUnit.fail);
});


jqUnit.asyncTest("test https download", function () {

    if (process.env.GPII_QUICKTEST) {
        fluid.log("Skipping download tests");
        jqUnit.assert();
        jqUnit.start();
        return;
    }

    gpii.tests.iodInstaller.downloadTests = fluid.freezeRecursive([
        {
            url: "https://raw.githubusercontent.com/GPII/universal/108be0f5f0377eaec9100c1926647e7550efc2ea/gpii.js",
            expect: "8cb82683c931e15995b2573fda41c41eaacab59e"
        },
        {
            url: "https://gpii-test.invalid",
            expect: "reject"
        },
        // Certificate problems
        {
            url: "https://badssl.com",
            expect: "resolve"
        },
        {
            url: "https://expired.badssl.com/",
            expect: "reject"
        },
        {
            url: "https://wrong.host.badssl.com/",
            expect: "reject"
        },
        {
            url: "https://self-signed.badssl.com/",
            expect: "reject"
        },
        {
            url: "https://untrusted-root.badssl.com/",
            expect: "reject"
        },
        // Prohibited ciphers
        {
            url: "https://rc4-md5.badssl.com/",
            expect: "reject"
        },
        {
            url: "https://rc4.badssl.com/",
            expect: "reject"
        },
        {
            url: "https://3des.badssl.com/",
            expect: "reject"
        },
        {
            url: "https://null.badssl.com/",
            expect: "reject"
        },
        // HTTP
        {
            // This redirects to http
            url: "https://http.badssl.com/",
            expect: "reject"
        },
        {
            url: "http://http.badssl.com/",
            expect: "reject"
        },
        {
            // Unopened port (hopefully)
            url: "https://127.0.0.1:51749",
            expect: "reject"
        }
    ]);

    var filePrefix = path.join(os.tmpdir(), "gpii-test-download" + Math.random().toString(36) + "-");

    var files = [];
    // Remove all temporary files.
    gpii.tests.iodInstaller.teardowns.push(function () {
        fluid.each(files, function (file) {
            try {
                fs.unlinkSync(file);
            } catch (e) {
                // ignore.
            }
        });
    });


    var tests = gpii.tests.iodInstaller.downloadTests;
    jqUnit.expect(tests.length * 3);

    var testIndex = -1;
    var nextTest = function () {
        if (++testIndex >= tests.length) {
            jqUnit.start();
            return;
        }

        var test = tests[testIndex];
        var suffix = " - test " + testIndex + "(" + test.url + ")";

        var outFile = filePrefix + testIndex;
        files.push(outFile);

        var p = gpii.iod.httpsDownload(test.url, outFile);

        jqUnit.assertTrue("httpsDownload must return a promise" + suffix, fluid.isPromise(p));

        p.then(function () {
            jqUnit.assertNotEquals("httpsDownload must only succeed if expected" + suffix, test.expect, "reject");

            if (test.expect === "resolve") {
                jqUnit.assert("resolved");
                nextTest();
            } else if (test.expect !== "reject") {
                var input = fs.createReadStream(outFile);
                var hash = crypto.createHash("sha1");
                input.on("readable", function () {
                    var buffer = input.read();
                    if (buffer) {
                        hash.update(buffer);
                    } else {
                        var digest = hash.digest("hex");
                        jqUnit.assertEquals("Hash of download must be correct", test.expect, digest);
                        nextTest();
                    }
                });

                input.on("error", function (err) {
                    fluid.log(err);
                    jqUnit.fail(err);
                });
            }
        }, function (err) {
            jqUnit.assertEquals("httpsDownload must only reject if expected" + suffix, test.expect, "reject");
            jqUnit.assert("Balancing the expected assert count");
            if (test.expects !== "reject") {
                fluid.log(err);
            }
            nextTest();
        });

    };

    nextTest();
});
