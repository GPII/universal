/*
 * Install on Demand packages.
 *
 * Copyright 2019 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion");

var path = require("path"),
    fs = require("fs");

require("kettle");

var gpii = fluid.registerNamespace("gpii");
fluid.registerNamespace("gpii.iod.packages");

require("./packageInstaller.js");
require("./iodSettingsHandler.js");

/**
 * Information about a package.
 * @typedef {Object} PackageInfo
 * @property {string} name - The package name.
 * @property {string} url - The package location.
 * @property {string} filename - The package filename.
 * @property {string} packageType - Type of installer to use.
 *
 */

fluid.defaults("gpii.iod.packages", {
    gradeNames: ["fluid.component"],
    components: {
        packageData: {
            type: "kettle.dataSource.file",
            options: {
                "gradeNames": ["kettle.dataSource.file.moduleTerms"],
                "path": "%gpii-universal/testData/installOnDemand/%packageName.json5",
                "termMap": {
                    "packageName": "%packageName"
                }
            }
        },
        remotePackageData: {
            createOnEvent: "onServiceFound",
            type: "kettle.dataSource.URL"
        }
    },
    invokers: {
        getPackageInfo: {
            funcName: "gpii.iod.getPackageInfo",
            args: ["{that}", "{arguments}.0"]
        }
    },
    listeners: {
        onCreate: "fluid.identity"
    }
});

/**
 * Retrieve the package metadata.
 *
 * @param {Component} that The gpii.iod.packages instance.
 * @param {Object} packageRequest Containing packageName, language, version.
 * @param {String} packageRequest.packageName Name of the package.
 * @param {String} packageRequest.version [optional] Version.
 * @param {String} packageRequest.language [optional] Language code with optional country code (en, en-US, es-ES).
 * @return {Promise} Resolves to an object containing package information.
 */
gpii.iod.getPackageInfo = function (that, packageRequest) {
    fluid.log("IoD: Getting package info for " + packageRequest.packageName);

    var promise = fluid.promise();

    var dataSource = that.remotePackageData || that.packageData;

    if (dataSource) {
        dataSource.get({
            packageName: packageRequest.packageName,
            language: packageRequest.language,
            version: packageRequest.version,
            server: that.remoteServer
        }).then(function (packageInfo) {
            if (packageRequest.language && packageInfo.languages) {
                // Merge the language-specific info.
                var lang = gpii.iod.matchLanguage(Object.keys(packageInfo.languages), packageRequest.language);
                if (lang) {
                    Object.assign(packageInfo, packageInfo.languages[lang]);
                    packageInfo.language = lang;
                }
            }

            promise.resolve(packageInfo);
        }, function (err) {
            promise.reject({
                isError: true,
                message: "Unknown package " + packageRequest.packageName,
                error: err
            });
        });
    } else {
        promise.reject({
            isError: true,
            message: "No package data source for IoD"
        });
    }

    return promise;
};

/**
 * Finds the best language from a list of available languages, using the following priority:
 * - Exact match with country code
 * - Exact match without country code
 * - First language, ignoring country code.
 *
 * @param {Array<String>} languages The list of available languages, with optional country code (en, en-US, es-ES)
 * @param {String} language The preferred language.
 * @return {String} The closest matching item from languages.
 */
gpii.iod.matchLanguage = function (languages, language) {
    languages = fluid.makeArray(languages);

    // Exact match.
    var index = languages.indexOf(language);
    var match = index >= 0 && languages[index];

    if (!match) {
        var langCode = language.substr(0, 2);
        // Language without country.
        if (language.length > 2) {
            index = languages.indexOf(language);
            match = index >= 0 && languages[index];
        }

        if (!match) {
            // Ignore the country.
            match = languages.find(function (lang) {
                return lang.substr(0, 2) === langCode;
            });
        }
    }

    return match;
};

/**
 * A bad way of checking if a package is installed.
 * @param {String} packageName Package name
 * @return {Boolean} true if the package is installed.
 */
gpii.iod.isInstalled = function (packageName) {
    return fs.existsSync(path.join(process.env.ProgramData, "chocolatey\\lib", packageName));
};
