/*
 * Install on Demand.
 *
 * Copyright 2018 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion");


var gpii = fluid.registerNamespace("gpii");
fluid.registerNamespace("gpii.iod.settingsHandler");

require("./packageInstaller.js");

gpii.iod.settingsHandler.getImpl = function () {
};
gpii.iod.settingsHandler.setImpl = function (payload) {

    var packages = payload.settings.packages ? fluid.makeArray(payload.settings.packages) : payload.settings;

    var iod = fluid.queryIoCSelector(fluid.rootComponent, "gpii.iod")[0];

    var results = {};

    var packagePromises = [];

    fluid.each(Object.keys(packages), function (packageKey) {
        var packageRequest = packages[packageKey] || packageKey;
        if (!packageRequest.packageName) {
            packageRequest.packageName = packageKey;
        }

        if (packageRequest.install === undefined) {
            packageRequest.install = true;
        }


        results[packageKey] = {
            oldValue: {},
            newValue: {}
        };

        var installPromise = fluid.promise();

        // For some reason the datasource.get call inside requirePackage doesn't resolve while it's inside this stack.
        // A better developer would have discovered why, but you have to make do with what you've got.
        process.nextTick(function () {
            var p = packageRequest.install
                ? iod.requirePackage(packageRequest)
                : iod.unrequirePackage(packageRequest.packageName);
            fluid.promise.follow(p, installPromise);
        });

        installPromise.then(function (installResult) {
            results[packageKey].oldValue.install = packageRequest.install ? !installResult : installResult;
            results[packageKey].newValue.install = packageRequest.install;
        }, function (error) {
            fluid.log(error);
            results[packageKey].newValue.install = false;
        });

        packagePromises.push(installPromise);
    });

    var promise = fluid.promise();
    fluid.promise.sequence(packagePromises).then(function () {
        promise.resolve(results);
    }, promise.reject);
    return promise;
};

gpii.iod.settingsHandler.get = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(gpii.iod.settingsHandler.getImpl, payload);
};

gpii.iod.settingsHandler.set = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(gpii.iod.settingsHandler.setImpl, payload);

};
