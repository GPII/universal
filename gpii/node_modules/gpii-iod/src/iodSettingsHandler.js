/*
 * Install on Demand.
 *
 * Copyright 2018 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion");


var gpii = fluid.registerNamespace("gpii");
fluid.registerNamespace("gpii.iod.settingsHandler");

require("./packageInstaller.js");

gpii.iod.settingsHandler.getImpl = function () {
};
gpii.iod.settingsHandler.setImpl = function (payload) {

    var packages = fluid.transform(payload.options, function (value, key) {
        return Object.assign({}, value, payload.settings[key]);
    });

    var iod = fluid.queryIoCSelector(fluid.rootComponent, "gpii.iod")[0];
    var promise = fluid.promise();
    var results = {};
    var packageKeys = Object.keys(packages);

    var nextPackage = function () {
        if (packageKeys.length === 0) {
            promise.resolve(results);
        } else {
            var key = packageKeys.shift();
            var packageRequest = packages[key];

            var isInstalled = iod.isInstalled(packageRequest.packageName);

            var p;
            results[key] = {
                oldValue: {
                    uninstall: true,
                    installed: isInstalled
                },
                newValue: {
                }
            };

            if (packageRequest.uninstall) {
                iod.unrequirePackage(packageRequest.packageName);
            } else if (!isInstalled) {
                p = iod.requirePackage(packageRequest);
                p.then(function () {
                    results[key].newValue.installed = true;
                }, function (error) {
                    fluid.log(error);
                    results[key].newValue.installed = false;
                });
            }

            fluid.toPromise(p).then(nextPackage, nextPackage);
        }
    };

    // For some reason the datasource.get call inside requirePackage doesn't resolve while it's inside this stack.
    // A better developer would have discovered why, but you have to make do with what you've got.
    process.nextTick(nextPackage);


    return promise;

};

gpii.iod.settingsHandler.get = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(gpii.iod.settingsHandler.getImpl, payload);
};

gpii.iod.settingsHandler.set = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(gpii.iod.settingsHandler.setImpl, payload);

};
