/*
 * Abstraction of something that installs packages.
 *
 * Copyright 2018 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var path = require("path"),
    fs = require("fs"),
    request = require("request"),
    child_process = require("child_process");

var fluid = require("infusion");
var gpii = fluid.registerNamespace("gpii");
fluid.registerNamespace("gpii.iod");

fluid.defaults("gpii.iod.packageInstaller", {
    gradeNames: ["fluid.component"],

    invokers: {
        created: {
            funcName: "gpii.iod.installerCreated",
            args: ["{that}", "{iod}"]
        },
        startInstaller: {
            funcName: "gpii.iod.startInstaller",
            args: ["{that}", "{iod}"]
        },
        startUninstaller: {
            funcName: "gpii.iod.startUninstaller",
            args: ["{that}", "{iod}"]
        },
        // Remaining invokers are part of the installation pipe-line. Each one is passed the installation and returns
        // a installation, either directly or via a promise.
        initialise: {
            funcName: "gpii.iod.initialise",
            args: ["{that}", "{iod}"]
        },
        downloadPackage: {
            funcName: "gpii.iod.downloadPackage",
            args: ["{that}", "{iod}"]
        },
        checkPackage: {
            funcName: "gpii.iod.checkPackage",
            args: ["{that}", "{iod}"]
        },
        prepareInstall: {
            funcName: "gpii.iod.prepareInstall",
            args: ["{that}", "{iod}"]
        },
        installPackage: "fluid.notImplemented",
        cleanup: {
            funcName: "gpii.iod.cleanup",
            args: ["{that}", "{iod}"]
        },
        startApplication: {
            funcName: "gpii.iod.startApplication",
            args: ["{that}", "{iod}"]
        },
        stopApplication: {
            funcName: "gpii.iod.stopApplication",
            args: ["{that}", "{iod}"]
        },
        uninstallPackage: "fluid.notImplemented"
    },
    events: {
        // Dummy events for the installation pipe-lines
        onInstallPackage: null,
        onRemovePackage: null
    },
    listeners: {
        "onCreate": "{that}.created",
        "onInstallPackage.initialise": {
            func: "{that}.initialise",
            priority: "first"
        },
        "onInstallPackage.download": {
            func: "{that}.downloadPackage",
            priority: "after:initialise"
        },
        "onInstallPackage.check": {
            func: "{that}.checkPackage",
            priority: "after:download"
        },
        "onInstallPackage.prepareInstall": {
            func: "{that}.prepareInstall",
            priority: "after:check"
        },
        "onInstallPackage.install": {
            func: "{that}.installPackage",
            priority: "after:prepareInstall"
        },
        "onInstallPackage.cleanup": {
            func: "{that}.cleanup",
            priority: "after:install"
        },
        "onInstallPackage.startApplication": {
            func: "{that}.startApplication",
            priority: "after:cleanup"
        },

        "onRemovePackage.stopApplication": {
            func: "{that}.stopApplication",
            priority: "first"
        },
        "onRemovePackage.uninstallPackage": {
            func: "{that}.uninstallPackage",
            priority: "after:stopApplication"
        }
    },

    // Types of package this installer supports
    packageTypes: null,

    members: {
        // Package information from the server.
        packageInfo: null
    }
});


/**
 * Installer component created.
 *
 * @param {Component} that The gpii.iod.installer instance.
 * @param {Component} iod The gpii.iod instance.
 */
gpii.iod.installerCreated = function (that, iod) {
    that.installation = iod.installations[that.options.installationID];
    if (that.installation) {
        that.installation.installer = that;
        that.packageInfo = that.installation.packageInfo;
    }
};

/**
 * Starts the installation pipeline.
 *
 * @param {Component} that The gpii.iod.installer instance.
 * @param {Component} iod The gpii.iod instance.
 * @return {Promise} Resolves when complete.
 */
gpii.iod.startInstaller = function (that) {
    return fluid.promise.fireTransformEvent(that.events.onInstallPackage);
};

/**
 * Starts the un-installation pipeline.
 *
 * @param {Component} that The gpii.iod.installer instance.
 * @param {Component} iod The gpii.iod instance.
 * @return {Promise} Resolves when complete.
 */
gpii.iod.startUninstaller = function (that) {
    return fluid.promise.fireTransformEvent(that.events.onRemovePackage);
};

/**
 * Initialises the installation.
 *
 * @param {Component} that The gpii.iod.installer instance.
 * @param {Component} iod The gpii.iod instance.
 */
gpii.iod.initialise = function (that, iod) {
    var tempDir = iod.getWorkingPath(that.packageInfo.name);
    that.installation.tempDir = tempDir.fullPath;
    that.installation.cleanupPaths.push(tempDir.createdPath);
};

/**
 * Downloads a package from the server.
 *
 * @param {Component} that The gpii.iod.installer instance.
 * @param {Object} iod The gpii.iod instance.
 * @return {Promise} Resolves when complete.
 */
gpii.iod.downloadPackage = function (that) {
    fluid.log("IoD: Downloading package " + that.packageInfo.url);

    var promise = fluid.promise();

    that.installation.localPackage = path.join(that.installation.tempDir, that.packageInfo.filename);

    if (that.packageInfo.url.startsWith("https://")) {
        // Warning: Taking a url from an external source, downloading it, and then later executing it (as admin).
        var downloadPromise = gpii.iod.httpsDownload(that.packageInfo.url, that.installation.localPackage);
        fluid.promise.follow(downloadPromise, promise);
    } else {
        fs.copyFile(that.packageInfo.url, that.installation.localPackage, function (err) {
            if (err) {
                promise.reject({
                    isError: true,
                    message: "Unable to copy package"
                });
            } else {
                promise.resolve();
            }
        });
    }

    return promise;
};

/**
 * Downloads a file, trying extra hard to use only https.
 *
 * @param {String} url The remote uri.
 * @param {String} localPath Destination path.
 * @return {Promise} Resolves when done.
 */
gpii.iod.httpsDownload = function (url, localPath) {
    var promise = fluid.promise();
    var output = fs.createWriteStream(localPath);
    output.on("finish", function () {
        promise.resolve();
    });

    if (url.startsWith("https:")) {
        var req = request.get({
            url: url,
            strictSSL: true,
            // Force https (and fail) if http is attempted.
            httpModules: {"http:": require("https")},
            // Don't permit redirecting to non-https.
            followRedirect: function (response) {
                var allow = response.caseless.get("location").startsWith("https:");
                if (!allow) {
                    fluid.log("IoD: Denying non-https redirect");
                }
                return allow;
            }
        });

        req.on("error", function (err) {
            promise.reject({
                isError: true,
                message: "Unable to download package: " + err.message,
                error: err
            });
        });

        req.on("response", function (response) {
            if ((response.statusCode >= 300) && (response.statusCode < 400)) {
                req.emit("error", {
                    message: "Redirect failed"
                });
            }
        });

        req.pipe(output);
    } else {
        promise.reject({
            isError: true,
            message: "IoD only supports HTTPS"
        });
    }

    return promise;
};

/**
 * Checks that a downloaded package is ok.
 *
 * @param {Component} that The gpii.iod.installer instance.
 * @param {Object} iod The gpii.iod instance.
 * @return {Promise} Resolves when complete.
 */
gpii.iod.checkPackage = function (that) {
    var promise = fluid.promise();
    fluid.log("IoD: Checking downloaded package file " + that.packageInfo.filename);
    // TODO: It shouldn't be checked here - another process may over-write it before the high privilege executes it.
    // Instead, take ownership then check the integrity in the same context as it's being ran.
    promise.resolve();
    return promise;
};

/**
 * Generate the installation instructions.
 *
 * @param {Component} that The gpii.iod.installer instance.
 * @param {Object} iod The gpii.iod instance.
 * @return {Promise} Resolves when complete.
 */
gpii.iod.prepareInstall = function (that) {
    var promise = fluid.promise();
    fluid.log("IoD: Preparing installation for " + that.packageInfo.name);
    promise.resolve();
    return promise;
};

/**
 * Cleans up things that are no longer required.
 *
 * @param {Component} that The gpii.iod.installer instance.
 * @return {Promise} Resolves when complete.
 */
gpii.iod.cleanup = function (that) {
    var promise = fluid.promise();
    fluid.log("IoD: Cleaning installation of " + that.packageInfo.name);
    promise.resolve();
    return promise;
};

/**
 * Starts the application.
 *
 * @param {Component} that The gpii.iod.installer instance.
 * @return {Promise} Resolves when the application has been started.
 */
gpii.iod.startApplication = function (that) {
    var promise = fluid.promise();
    fluid.log("IoD: Starting application " + that.packageInfo.name);
    if (that.packageInfo.start) {
        child_process.exec(that.packageInfo.start, function (err, stdout, stderr) {
            if (err) {
                fluid.log("IoD: startApplication error: ", err);
            }
            fluid.log("IoD: startApplication: ", { stdout: stdout, stderr: stderr });
        });
    }
    promise.resolve();
    return promise;
};

/**
 * Stops the application (for uninstallation).
 *
 * @param {Component} that The gpii.iod.installer instance.
 * @return {Promise} Resolves when the command has completed.
 */
gpii.iod.stopApplication = function (that) {
    var promise = fluid.promise();
    fluid.log("IoD: Stopping application " + that.packageInfo.name);
    if (that.packageInfo.start) {
        child_process.exec(that.packageInfo.start, function (err, stdout, stderr) {
            if (err) {
                fluid.log("IoD: stopApplication error: ", err);
            }
            fluid.log("IoD: stopApplication: ", { stdout: stdout, stderr: stderr });
            promise.resolve();
        });
    }
    return promise;
};
